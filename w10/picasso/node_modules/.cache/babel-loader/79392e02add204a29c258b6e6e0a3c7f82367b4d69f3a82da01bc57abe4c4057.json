{"ast":null,"code":"var parse = require('../parse/index.js');\n\n/**\n * @category Range Helpers\n * @summary Is the given date range overlapping with another date range?\n *\n * @description\n * Is the given date range overlapping with another date range?\n *\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\n * @returns {Boolean} whether the date ranges are overlapping\n * @throws {Error} startDate of a date range cannot be after its endDate\n *\n * @example\n * // For overlapping date ranges:\n * areRangesOverlapping(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping date ranges:\n * areRangesOverlapping(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\n * )\n * //=> false\n */\nfunction areRangesOverlapping(dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime();\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime();\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime();\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime();\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\n    throw new Error('The start of the range cannot be after the end of the range');\n  }\n  return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime;\n}\nmodule.exports = areRangesOverlapping;","map":{"version":3,"names":["parse","require","areRangesOverlapping","dirtyInitialRangeStartDate","dirtyInitialRangeEndDate","dirtyComparedRangeStartDate","dirtyComparedRangeEndDate","initialStartTime","getTime","initialEndTime","comparedStartTime","comparedEndTime","Error","module","exports"],"sources":["/home/marcucosmin3/bootcamp/w10/picasso/node_modules/simple-react-calendar/node_modules/date-fns/are_ranges_overlapping/index.js"],"sourcesContent":["var parse = require('../parse/index.js')\n\n/**\n * @category Range Helpers\n * @summary Is the given date range overlapping with another date range?\n *\n * @description\n * Is the given date range overlapping with another date range?\n *\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\n * @returns {Boolean} whether the date ranges are overlapping\n * @throws {Error} startDate of a date range cannot be after its endDate\n *\n * @example\n * // For overlapping date ranges:\n * areRangesOverlapping(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping date ranges:\n * areRangesOverlapping(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\n * )\n * //=> false\n */\nfunction areRangesOverlapping (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime()\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime()\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime()\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime()\n\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\n    throw new Error('The start of the range cannot be after the end of the range')\n  }\n\n  return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime\n}\n\nmodule.exports = areRangesOverlapping\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAAEC,0BAA0B,EAAEC,wBAAwB,EAAEC,2BAA2B,EAAEC,yBAAyB,EAAE;EAC3I,IAAIC,gBAAgB,GAAGP,KAAK,CAACG,0BAA0B,CAAC,CAACK,OAAO,EAAE;EAClE,IAAIC,cAAc,GAAGT,KAAK,CAACI,wBAAwB,CAAC,CAACI,OAAO,EAAE;EAC9D,IAAIE,iBAAiB,GAAGV,KAAK,CAACK,2BAA2B,CAAC,CAACG,OAAO,EAAE;EACpE,IAAIG,eAAe,GAAGX,KAAK,CAACM,yBAAyB,CAAC,CAACE,OAAO,EAAE;EAEhE,IAAID,gBAAgB,GAAGE,cAAc,IAAIC,iBAAiB,GAAGC,eAAe,EAAE;IAC5E,MAAM,IAAIC,KAAK,CAAC,6DAA6D,CAAC;EAChF;EAEA,OAAOL,gBAAgB,GAAGI,eAAe,IAAID,iBAAiB,GAAGD,cAAc;AACjF;AAEAI,MAAM,CAACC,OAAO,GAAGZ,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}