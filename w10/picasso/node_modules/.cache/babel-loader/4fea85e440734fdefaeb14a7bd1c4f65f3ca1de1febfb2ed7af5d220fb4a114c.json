{"ast":null,"code":"import { useMemo } from 'react';\nimport { hierarchy, tree } from 'd3';\nimport { useNodes } from './useNodes';\nconst getPositionLeavesAndNoChildren = options => {\n  const {\n    leaves,\n    node,\n    nodeSizeAttr\n  } = options;\n  const index = leaves.findIndex(leaf => leaf === node);\n  const position = Math.floor(index - leaves.length / 2) * nodeSizeAttr;\n  return position;\n};\nconst getPositionNoLeavesAndNoChildren = (coordinateType, options) => {\n  var _a;\n  const {\n    node,\n    nodeSizeAttr\n  } = options;\n  const siblings = (_a = node === null || node === void 0 ? void 0 : node.parent) === null || _a === void 0 ? void 0 : _a.children;\n  let position = 0;\n  if (siblings) {\n    const index = siblings.findIndex(leaf => leaf === node);\n    const indexWithChildren = siblings.findIndex(leaf => leaf.children);\n    if (indexWithChildren !== -1) {\n      const siblingWithChildren = siblings[indexWithChildren];\n      position = siblingWithChildren[coordinateType] + (index - indexWithChildren) * nodeSizeAttr;\n    } else {\n      const closeSiblingIndex = Math.floor(index - siblings.length / 2);\n      position = siblings.length % 2 ? closeSiblingIndex * nodeSizeAttr : closeSiblingIndex * nodeSizeAttr - nodeSizeAttr / 2;\n    }\n  }\n  return position;\n};\nconst getPositionLeavesAndChildren = (calculateNodePosition, coordinateType, options) => {\n  const {\n    node\n  } = options;\n  node.children = node.children || [];\n  const position = node.children.reduce((acc, child) => {\n    calculateNodePosition(Object.assign(Object.assign({}, options), {\n      node: child\n    }));\n    return acc + child[coordinateType];\n  }, 0) / node.children.length;\n  return position;\n};\nconst getPositionNoLeavesButChildren = (calculateNodePosition, coordinateType, options) => {\n  let position = 0;\n  const {\n    node\n  } = options;\n  node.children = node.children || [];\n  const childWithChildrenIndex = node.children.findIndex(child => child.children);\n  if (childWithChildrenIndex !== -1) {\n    calculateNodePosition(Object.assign(Object.assign({}, options), {\n      node: node.children[childWithChildrenIndex]\n    }));\n  }\n  node.children.forEach(child => {\n    if (!child.children) {\n      calculateNodePosition(Object.assign(Object.assign({}, options), {\n        node: child\n      }));\n    }\n  });\n  const halfLength = node.children.length / 2;\n  if (node.children.length % 2) {\n    position = node.children[Math.floor(halfLength)][coordinateType];\n  } else {\n    const middleChild = node.children[halfLength];\n    const previousToMiddleChild = node.children[halfLength - 1];\n    position = (middleChild[coordinateType] + previousToMiddleChild[coordinateType]) / 2;\n  }\n  return position;\n};\nconst getCalculateNodePositionFn = coordinateType => {\n  const calculateNodePosition = options => {\n    const {\n      node,\n      aggregationType\n    } = options;\n    let position = 0;\n    if (!node.children || !node.children.length) {\n      if (aggregationType === 'leaves') {\n        position = getPositionLeavesAndNoChildren(options);\n      } else {\n        position = getPositionNoLeavesAndNoChildren(coordinateType, options);\n      }\n    } else {\n      if (aggregationType === 'leaves') {\n        position = getPositionLeavesAndChildren(calculateNodePosition, coordinateType, options);\n      } else {\n        position = getPositionNoLeavesButChildren(calculateNodePosition, coordinateType, options);\n      }\n    }\n    node[coordinateType] = position;\n    return node;\n  };\n  return calculateNodePosition;\n};\nconst calculateNodeXPosition = getCalculateNodePositionFn('x');\nconst calculateNodeYPosition = getCalculateNodePositionFn('y');\nexport const useTree = _ref => {\n  let {\n    data,\n    nodeWidth,\n    nodeHeight,\n    direction,\n    verticalMargin,\n    horizontalMargin,\n    variant\n  } = _ref;\n  const rootNode = useMemo(() => positionTreeNodes({\n    data,\n    direction,\n    nodeHeight,\n    nodeWidth,\n    horizontalMargin,\n    verticalMargin,\n    variant\n  }), [data, direction, nodeHeight, nodeWidth, verticalMargin, horizontalMargin, variant]);\n  const nodes = useNodes(rootNode, direction, verticalMargin, horizontalMargin);\n  const links = useMemo(() => nodes.reduce((acc, nodePoint) => {\n    if (nodePoint.parent) {\n      acc.push({\n        source: nodePoint.parent,\n        target: nodePoint\n      });\n    }\n    return acc;\n  }, []), [nodes]);\n  const selectedNode = useMemo(() => nodes.find(node => node.data.selected), [nodes]);\n  return {\n    nodes,\n    links,\n    selectedNode\n  };\n};\nconst positionTreeNodes = _ref2 => {\n  let {\n    data,\n    direction,\n    nodeHeight,\n    nodeWidth,\n    horizontalMargin,\n    verticalMargin,\n    variant\n  } = _ref2;\n  const root = hierarchy(data);\n  const fullNodeWidth = nodeWidth + 2 * horizontalMargin;\n  const fullNodeHeight = nodeHeight + 2 * verticalMargin;\n  const rootNode = tree().nodeSize([nodeWidth, nodeHeight])(root);\n  const leaves = rootNode.leaves();\n  if (direction === 'vertical') {\n    return calculateNodeXPosition({\n      node: rootNode,\n      leaves,\n      nodeSizeAttr: fullNodeWidth,\n      aggregationType: variant === 'normal' ? 'leaves' : 'siblings'\n    });\n  }\n  return calculateNodeYPosition({\n    node: rootNode,\n    leaves,\n    nodeSizeAttr: fullNodeHeight,\n    aggregationType: variant === 'normal' ? 'leaves' : 'siblings'\n  });\n};","map":{"version":3,"names":["useMemo","hierarchy","tree","useNodes","getPositionLeavesAndNoChildren","options","leaves","node","nodeSizeAttr","index","findIndex","leaf","position","Math","floor","length","getPositionNoLeavesAndNoChildren","coordinateType","siblings","_a","parent","children","indexWithChildren","siblingWithChildren","closeSiblingIndex","getPositionLeavesAndChildren","calculateNodePosition","reduce","acc","child","Object","assign","getPositionNoLeavesButChildren","childWithChildrenIndex","forEach","halfLength","middleChild","previousToMiddleChild","getCalculateNodePositionFn","aggregationType","calculateNodeXPosition","calculateNodeYPosition","useTree","_ref","data","nodeWidth","nodeHeight","direction","verticalMargin","horizontalMargin","variant","rootNode","positionTreeNodes","nodes","links","nodePoint","push","source","target","selectedNode","find","selected","_ref2","root","fullNodeWidth","fullNodeHeight","nodeSize"],"sources":["../../src/TreeView/useTree.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,SAAS,EAAsBC,IAAI,QAAQ,IAAI;AAExD,SAASC,QAAQ,QAAQ,YAAY;AAmCrC,MAAMC,8BAA8B,GAClCC,OAAqC,IACnC;EACF,MAAM;IAAEC,MAAM;IAAEC,IAAI;IAAEC;EAAY,CAAE,GAAGH,OAAO;EAC9C,MAAMI,KAAK,GAAGH,MAAM,CAACI,SAAS,CAACC,IAAI,IAAIA,IAAI,KAAKJ,IAAI,CAAC;EACrD,MAAMK,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,GAAGH,MAAM,CAACS,MAAM,GAAG,CAAC,CAAC,GAAGP,YAAY;EAErE,OAAOI,QAAQ;AACjB,CAAC;AAED,MAAMI,gCAAgC,GAAGA,CACvCC,cAA8B,EAC9BZ,OAAqC,KACnC;;EACF,MAAM;IAAEE,IAAI;IAAEC;EAAY,CAAE,GAAGH,OAAO;EACtC,MAAMa,QAAQ,GAAG,CAAAC,EAAA,GAAAZ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEa,MAAM,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,QAAQ;EACvC,IAAIT,QAAQ,GAAG,CAAC;EAEhB,IAAIM,QAAQ,EAAE;IACZ,MAAMT,KAAK,GAAWS,QAAQ,CAACR,SAAS,CAACC,IAAI,IAAIA,IAAI,KAAKJ,IAAI,CAAC;IAC/D,MAAMe,iBAAiB,GAAWJ,QAAQ,CAACR,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACU,QAAQ,CAAC;IAE3E,IAAIC,iBAAiB,KAAK,CAAC,CAAC,EAAE;MAC5B,MAAMC,mBAAmB,GACvBL,QAAQ,CAACI,iBAAiB,CAAC;MAE7BV,QAAQ,GACNW,mBAAmB,CAACN,cAAc,CAAC,GACnC,CAACR,KAAK,GAAGa,iBAAiB,IAAId,YAAY;KAC7C,MAAM;MACL,MAAMgB,iBAAiB,GAAGX,IAAI,CAACC,KAAK,CAACL,KAAK,GAAGS,QAAQ,CAACH,MAAM,GAAG,CAAC,CAAC;MAEjEH,QAAQ,GACNM,QAAQ,CAACH,MAAM,GAAG,CAAC,GACfS,iBAAiB,GAAGhB,YAAY,GAChCgB,iBAAiB,GAAGhB,YAAY,GAAGA,YAAY,GAAG,CAAC;;;EAI7D,OAAOI,QAAQ;AACjB,CAAC;AAED,MAAMa,4BAA4B,GAAGA,CACnCC,qBAE0C,EAC1CT,cAA8B,EAC9BZ,OAAqC,KACnC;EACF,MAAM;IAAEE;EAAI,CAAE,GAAGF,OAAO;EAExBE,IAAI,CAACc,QAAQ,GAAGd,IAAI,CAACc,QAAQ,IAAI,EAAE;EACnC,MAAMT,QAAQ,GACZL,IAAI,CAACc,QAAQ,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAI;IAClCH,qBAAqB,CAAAI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAM1B,OAAO;MAAEE,IAAI,EAAEsB;IAAK,GAAG;IAElD,OAAOD,GAAG,GAAGC,KAAK,CAACZ,cAAc,CAAC;EACpC,CAAC,EAAE,CAAC,CAAC,GAAGV,IAAI,CAACc,QAAQ,CAACN,MAAM;EAE9B,OAAOH,QAAQ;AACjB,CAAC;AAED,MAAMoB,8BAA8B,GAAGA,CACrCN,qBAE0C,EAC1CT,cAA8B,EAC9BZ,OAAqC,KACnC;EACF,IAAIO,QAAQ,GAAG,CAAC;EAEhB,MAAM;IAAEL;EAAI,CAAE,GAAGF,OAAO;EAExBE,IAAI,CAACc,QAAQ,GAAGd,IAAI,CAACc,QAAQ,IAAI,EAAE;EAEnC,MAAMY,sBAAsB,GAAG1B,IAAI,CAACc,QAAQ,CAACX,SAAS,CACpDmB,KAAK,IAAIA,KAAK,CAACR,QAAQ,CACxB;EAED,IAAIY,sBAAsB,KAAK,CAAC,CAAC,EAAE;IACjCP,qBAAqB,CAAAI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAChB1B,OAAO;MACVE,IAAI,EAAEA,IAAI,CAACc,QAAQ,CAACY,sBAAsB;IAAC,GAC3C;;EAGJ1B,IAAI,CAACc,QAAQ,CAACa,OAAO,CAACL,KAAK,IAAG;IAC5B,IAAI,CAACA,KAAK,CAACR,QAAQ,EAAE;MACnBK,qBAAqB,CAAAI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAM1B,OAAO;QAAEE,IAAI,EAAEsB;MAAK,GAAG;;EAEtD,CAAC,CAAC;EAEF,MAAMM,UAAU,GAAG5B,IAAI,CAACc,QAAQ,CAACN,MAAM,GAAG,CAAC;EAE3C,IAAIR,IAAI,CAACc,QAAQ,CAACN,MAAM,GAAG,CAAC,EAAE;IAC5BH,QAAQ,GAAGL,IAAI,CAACc,QAAQ,CAACR,IAAI,CAACC,KAAK,CAACqB,UAAU,CAAC,CAAC,CAAClB,cAAc,CAAC;GACjE,MAAM;IACL,MAAMmB,WAAW,GACf7B,IAAI,CAACc,QAAQ,CAACc,UAAU,CAAC;IAC3B,MAAME,qBAAqB,GACzB9B,IAAI,CAACc,QAAQ,CAACc,UAAU,GAAG,CAAC,CAAC;IAE/BvB,QAAQ,GACN,CAACwB,WAAW,CAACnB,cAAc,CAAC,GAAGoB,qBAAqB,CAACpB,cAAc,CAAC,IAAI,CAAC;;EAG7E,OAAOL,QAAQ;AACjB,CAAC;AAED,MAAM0B,0BAA0B,GAAIrB,cAA8B,IAAI;EACpE,MAAMS,qBAAqB,GAAIrB,OAAqC,IAAI;IACtE,MAAM;MAAEE,IAAI;MAAEgC;IAAe,CAAE,GAAGlC,OAAO;IACzC,IAAIO,QAAQ,GAAG,CAAC;IAEhB,IAAI,CAACL,IAAI,CAACc,QAAQ,IAAI,CAACd,IAAI,CAACc,QAAQ,CAACN,MAAM,EAAE;MAC3C,IAAIwB,eAAe,KAAK,QAAQ,EAAE;QAChC3B,QAAQ,GAAGR,8BAA8B,CAACC,OAAO,CAAC;OACnD,MAAM;QACLO,QAAQ,GAAGI,gCAAgC,CAACC,cAAc,EAAEZ,OAAO,CAAC;;KAEvE,MAAM;MACL,IAAIkC,eAAe,KAAK,QAAQ,EAAE;QAChC3B,QAAQ,GAAGa,4BAA4B,CACrCC,qBAAqB,EACrBT,cAAc,EACdZ,OAAO,CACR;OACF,MAAM;QACLO,QAAQ,GAAGoB,8BAA8B,CACvCN,qBAAqB,EACrBT,cAAc,EACdZ,OAAO,CACR;;;IAILE,IAAI,CAACU,cAAc,CAAC,GAAGL,QAAQ;IAE/B,OAAOL,IAAI;EACb,CAAC;EAED,OAAOmB,qBAAqB;AAC9B,CAAC;AAED,MAAMc,sBAAsB,GAAGF,0BAA0B,CAAC,GAAG,CAAC;AAC9D,MAAMG,sBAAsB,GAAGH,0BAA0B,CAAC,GAAG,CAAC;AAE9D,OAAO,MAAMI,OAAO,GAAGC,IAAA,IAQiB;EAAA,IARhB;IACtBC,IAAI;IACJC,SAAS;IACTC,UAAU;IACVC,SAAS;IACTC,cAAc;IACdC,gBAAgB;IAChBC;EAAO,CACU,GAAAP,IAAA;EACjB,MAAMQ,QAAQ,GAAGnD,OAAO,CACtB,MACEoD,iBAAiB,CAAC;IAChBR,IAAI;IACJG,SAAS;IACTD,UAAU;IACVD,SAAS;IACTI,gBAAgB;IAChBD,cAAc;IACdE;GACD,CAAC,EACJ,CACEN,IAAI,EACJG,SAAS,EACTD,UAAU,EACVD,SAAS,EACTG,cAAc,EACdC,gBAAgB,EAChBC,OAAO,CACR,CACF;EAED,MAAMG,KAAK,GAAGlD,QAAQ,CAACgD,QAAQ,EAAEJ,SAAS,EAAEC,cAAc,EAAEC,gBAAgB,CAAC;EAE7E,MAAMK,KAAK,GAAGtD,OAAO,CACnB,MACEqD,KAAK,CAAC1B,MAAM,CACV,CAACC,GAAuB,EAAE2B,SAA2B,KAAI;IACvD,IAAIA,SAAS,CAACnC,MAAM,EAAE;MACpBQ,GAAG,CAAC4B,IAAI,CAAC;QACPC,MAAM,EAAEF,SAAS,CAACnC,MAAM;QACxBsC,MAAM,EAAEH;OACT,CAAC;;IAGJ,OAAO3B,GAAG;EACZ,CAAC,EACD,EAAE,CACH,EACH,CAACyB,KAAK,CAAC,CACR;EAED,MAAMM,YAAY,GAAG3D,OAAO,CAC1B,MAAMqD,KAAK,CAACO,IAAI,CAACrD,IAAI,IAAIA,IAAI,CAACqC,IAAI,CAACiB,QAAQ,CAAC,EAC5C,CAACR,KAAK,CAAC,CACR;EAED,OAAO;IACLA,KAAK;IACLC,KAAK;IACLK;GACD;AACH,CAAC;AAED,MAAMP,iBAAiB,GAAGU,KAAA,IAQO;EAAA,IARN;IACzBlB,IAAI;IACJG,SAAS;IACTD,UAAU;IACVD,SAAS;IACTI,gBAAgB;IAChBD,cAAc;IACdE;EAAO,CACoB,GAAAY,KAAA;EAC3B,MAAMC,IAAI,GAAG9D,SAAS,CAAC2C,IAAI,CAAC;EAC5B,MAAMoB,aAAa,GAAGnB,SAAS,GAAG,CAAC,GAAGI,gBAAgB;EACtD,MAAMgB,cAAc,GAAGnB,UAAU,GAAG,CAAC,GAAGE,cAAc;EAEtD,MAAMG,QAAQ,GAAGjD,IAAI,EAAqB,CAACgE,QAAQ,CAAC,CAACrB,SAAS,EAAEC,UAAU,CAAC,CAAC,CAC1EiB,IAAI,CACL;EACD,MAAMzD,MAAM,GAAG6C,QAAQ,CAAC7C,MAAM,EAAE;EAEhC,IAAIyC,SAAS,KAAK,UAAU,EAAE;IAC5B,OAAOP,sBAAsB,CAAC;MAC5BjC,IAAI,EAAE4C,QAAQ;MACd7C,MAAM;MACNE,YAAY,EAAEwD,aAAa;MAC3BzB,eAAe,EAAEW,OAAO,KAAK,QAAQ,GAAG,QAAQ,GAAG;KACpD,CAAC;;EAGJ,OAAOT,sBAAsB,CAAC;IAC5BlC,IAAI,EAAE4C,QAAQ;IACd7C,MAAM;IACNE,YAAY,EAAEyD,cAAc;IAC5B1B,eAAe,EAAEW,OAAO,KAAK,QAAQ,GAAG,QAAQ,GAAG;GACpD,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}