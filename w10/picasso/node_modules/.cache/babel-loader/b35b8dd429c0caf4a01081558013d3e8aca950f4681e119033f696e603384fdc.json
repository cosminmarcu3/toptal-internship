{"ast":null,"code":"/**\n * Returns the shape of the Avatar component in SVG path's format.\n * SVG's \"path\" works for the function like this:\n * M x1 y1 => move to point (x1,y1) (startPoint)\n * H x2 => horizontal line from (x1,y1) to (x2,y1) (topEdgeLength)\n * V y2 => vertical line from (x2,y1) to (x2,y2) (rightEdgeLength)\n * H x3 => horizontal line from (x2,y2) to (x3,y2) (bottomEdgeStartPoint)\n * L x1 y3 => line from (x1,y3) to (x3,y2) (leftCornerEndPoint)\n * Z - draw path back to starting point (x1 y1)\n *\n *   x1,y1 ----------------- x2,y1\n *     |                       |\n *     |                       |\n *     |                       |\n *     |                       |\n *     |                       |\n *   x1,y3                     |\n *      \\                      |\n *       \\                     |\n *       x3,y2-------------- x2,y2\n *\n */\nconst getAvatarShape = _ref => {\n  let {\n    bottomEdgeStartPoint,\n    startPoint,\n    leftCornerEndPoint,\n    rightEdgeLength,\n    topEdgeLength,\n    drawBackToStart\n  } = _ref;\n  return `\n    M ${startPoint} ${startPoint}\n    H ${topEdgeLength} \n    V ${rightEdgeLength} \n    H ${bottomEdgeStartPoint} \n    L ${startPoint} ${leftCornerEndPoint}${drawBackToStart ? ' Z' : ''}\n  `;\n};\n/**\n * Returns the shape of the background of the avatar.\n */\nexport const getBackgroundShape = (dimensions, cornerSize) => {\n  const centerShift = 3; // shift for the outline stroke\n  return getAvatarShape({\n    startPoint: centerShift,\n    topEdgeLength: dimensions + centerShift,\n    rightEdgeLength: dimensions + centerShift,\n    bottomEdgeStartPoint: cornerSize + centerShift,\n    leftCornerEndPoint: dimensions - cornerSize + centerShift,\n    drawBackToStart: false\n  });\n};\n/**\n * Returns the shape of the outline when field is focused.\n * it is 2px bigger than the background because of the outline stroke width.\n */\nexport const getOutlineShape = (dimensions, cornerSize) => {\n  const centerShift = 2; // shift for the outline stroke\n  const outlineStrokeWidth = 2; // width of the outline stroke\n  return getAvatarShape({\n    startPoint: centerShift,\n    topEdgeLength: dimensions + centerShift + outlineStrokeWidth,\n    rightEdgeLength: dimensions + centerShift + outlineStrokeWidth,\n    bottomEdgeStartPoint: cornerSize + centerShift,\n    leftCornerEndPoint: dimensions - cornerSize + centerShift + outlineStrokeWidth,\n    drawBackToStart: true\n  });\n};\n/**\n * Returns the shape of the borders.\n * it is 2px smaller than the background because of the border stroke width.\n */\nexport const getBordersShape = (dimensions, cornerSize) => {\n  const centerShift = 4; // shift for the outline stroke and border stroke\n  const outlineStrokeWidth = 2; // width of the outline stroke\n  return getAvatarShape({\n    startPoint: centerShift,\n    topEdgeLength: dimensions + outlineStrokeWidth,\n    rightEdgeLength: dimensions + outlineStrokeWidth,\n    bottomEdgeStartPoint: cornerSize + outlineStrokeWidth + 1,\n    leftCornerEndPoint: dimensions - cornerSize + outlineStrokeWidth + 1,\n    drawBackToStart: true\n  });\n};\nexport const getShapes = _ref2 => {\n  let {\n    dimensions,\n    cornerSize\n  } = _ref2;\n  return {\n    background: getBackgroundShape(dimensions, cornerSize),\n    outline: getOutlineShape(dimensions, cornerSize),\n    borders: getBordersShape(dimensions, cornerSize)\n  };\n};","map":{"version":3,"names":["getAvatarShape","_ref","bottomEdgeStartPoint","startPoint","leftCornerEndPoint","rightEdgeLength","topEdgeLength","drawBackToStart","getBackgroundShape","dimensions","cornerSize","centerShift","getOutlineShape","outlineStrokeWidth","getBordersShape","getShapes","_ref2","background","outline","borders"],"sources":["../../src/AvatarDropzoneSvg/utils.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMA,cAAc,GAAGC,IAAA,IAclB;EAAA,IAdmB;IACtBC,oBAAoB;IACpBC,UAAU;IACVC,kBAAkB;IAClBC,eAAe;IACfC,aAAa;IACbC;EAAe,CAQhB,GAAAN,IAAA;EACC,OAAO;QACDE,UAAU,IAAIA,UAAU;QACxBG,aAAa;QACbD,eAAe;QACfH,oBAAoB;QACpBC,UAAU,IAAIC,kBAAkB,GAAGG,eAAe,GAAG,IAAI,GAAG,EAAE;GACnE;AACH,CAAC;AAED;;;AAGA,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,UAAkB,EAAEC,UAAkB,KAAI;EAC3E,MAAMC,WAAW,GAAG,CAAC,EAAC;EAEtB,OAAOX,cAAc,CAAC;IACpBG,UAAU,EAAEQ,WAAW;IACvBL,aAAa,EAAEG,UAAU,GAAGE,WAAW;IACvCN,eAAe,EAAEI,UAAU,GAAGE,WAAW;IACzCT,oBAAoB,EAAEQ,UAAU,GAAGC,WAAW;IAC9CP,kBAAkB,EAAEK,UAAU,GAAGC,UAAU,GAAGC,WAAW;IACzDJ,eAAe,EAAE;GAClB,CAAC;AACJ,CAAC;AAED;;;;AAIA,OAAO,MAAMK,eAAe,GAAGA,CAACH,UAAkB,EAAEC,UAAkB,KAAI;EACxE,MAAMC,WAAW,GAAG,CAAC,EAAC;EACtB,MAAME,kBAAkB,GAAG,CAAC,EAAC;EAE7B,OAAOb,cAAc,CAAC;IACpBG,UAAU,EAAEQ,WAAW;IACvBL,aAAa,EAAEG,UAAU,GAAGE,WAAW,GAAGE,kBAAkB;IAC5DR,eAAe,EAAEI,UAAU,GAAGE,WAAW,GAAGE,kBAAkB;IAC9DX,oBAAoB,EAAEQ,UAAU,GAAGC,WAAW;IAC9CP,kBAAkB,EAChBK,UAAU,GAAGC,UAAU,GAAGC,WAAW,GAAGE,kBAAkB;IAC5DN,eAAe,EAAE;GAClB,CAAC;AACJ,CAAC;AAED;;;;AAIA,OAAO,MAAMO,eAAe,GAAGA,CAACL,UAAkB,EAAEC,UAAkB,KAAI;EACxE,MAAMC,WAAW,GAAG,CAAC,EAAC;EACtB,MAAME,kBAAkB,GAAG,CAAC,EAAC;EAE7B,OAAOb,cAAc,CAAC;IACpBG,UAAU,EAAEQ,WAAW;IACvBL,aAAa,EAAEG,UAAU,GAAGI,kBAAkB;IAC9CR,eAAe,EAAEI,UAAU,GAAGI,kBAAkB;IAChDX,oBAAoB,EAAEQ,UAAU,GAAGG,kBAAkB,GAAG,CAAC;IACzDT,kBAAkB,EAAEK,UAAU,GAAGC,UAAU,GAAGG,kBAAkB,GAAG,CAAC;IACpEN,eAAe,EAAE;GAClB,CAAC;AACJ,CAAC;AAED,OAAO,MAAMQ,SAAS,GAAGC,KAAA,IAMpB;EAAA,IANqB;IACxBP,UAAU;IACVC;EAAU,CAIX,GAAAM,KAAA;EACC,OAAO;IACLC,UAAU,EAAET,kBAAkB,CAACC,UAAU,EAAEC,UAAU,CAAC;IACtDQ,OAAO,EAAEN,eAAe,CAACH,UAAU,EAAEC,UAAU,CAAC;IAChDS,OAAO,EAAEL,eAAe,CAACL,UAAU,EAAEC,UAAU;GAChD;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}