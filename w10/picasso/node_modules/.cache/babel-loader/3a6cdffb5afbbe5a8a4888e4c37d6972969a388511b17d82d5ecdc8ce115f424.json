{"ast":null,"code":"var parse = require('../parse/index.js');\n\n/**\n * @category Day Helpers\n * @summary Return the array of dates within the specified range.\n *\n * @description\n * Return the array of dates within the specified range.\n *\n * @param {Date|String|Number} startDate - the first date\n * @param {Date|String|Number} endDate - the last date\n * @param {Number} [step=1] - the step between each day\n * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate\n * @throws {Error} startDate cannot be after endDate\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDay(\n *   new Date(2014, 9, 6),\n *   new Date(2014, 9, 10)\n * )\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\nfunction eachDay(dirtyStartDate, dirtyEndDate, dirtyStep) {\n  var startDate = parse(dirtyStartDate);\n  var endDate = parse(dirtyEndDate);\n  var step = dirtyStep !== undefined ? dirtyStep : 1;\n  var endTime = endDate.getTime();\n  if (startDate.getTime() > endTime) {\n    throw new Error('The first date cannot be after the second date');\n  }\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  while (currentDate.getTime() <= endTime) {\n    dates.push(parse(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n  }\n  return dates;\n}\nmodule.exports = eachDay;","map":{"version":3,"names":["parse","require","eachDay","dirtyStartDate","dirtyEndDate","dirtyStep","startDate","endDate","step","undefined","endTime","getTime","Error","dates","currentDate","setHours","push","setDate","getDate","module","exports"],"sources":["/home/marcucosmin3/bootcamp/w10/picasso/node_modules/simple-react-calendar/node_modules/date-fns/each_day/index.js"],"sourcesContent":["var parse = require('../parse/index.js')\n\n/**\n * @category Day Helpers\n * @summary Return the array of dates within the specified range.\n *\n * @description\n * Return the array of dates within the specified range.\n *\n * @param {Date|String|Number} startDate - the first date\n * @param {Date|String|Number} endDate - the last date\n * @param {Number} [step=1] - the step between each day\n * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate\n * @throws {Error} startDate cannot be after endDate\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDay(\n *   new Date(2014, 9, 6),\n *   new Date(2014, 9, 10)\n * )\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\nfunction eachDay (dirtyStartDate, dirtyEndDate, dirtyStep) {\n  var startDate = parse(dirtyStartDate)\n  var endDate = parse(dirtyEndDate)\n  var step = dirtyStep !== undefined ? dirtyStep : 1\n\n  var endTime = endDate.getTime()\n\n  if (startDate.getTime() > endTime) {\n    throw new Error('The first date cannot be after the second date')\n  }\n\n  var dates = []\n\n  var currentDate = startDate\n  currentDate.setHours(0, 0, 0, 0)\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(parse(currentDate))\n    currentDate.setDate(currentDate.getDate() + step)\n  }\n\n  return dates\n}\n\nmodule.exports = eachDay\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAAEC,cAAc,EAAEC,YAAY,EAAEC,SAAS,EAAE;EACzD,IAAIC,SAAS,GAAGN,KAAK,CAACG,cAAc,CAAC;EACrC,IAAII,OAAO,GAAGP,KAAK,CAACI,YAAY,CAAC;EACjC,IAAII,IAAI,GAAGH,SAAS,KAAKI,SAAS,GAAGJ,SAAS,GAAG,CAAC;EAElD,IAAIK,OAAO,GAAGH,OAAO,CAACI,OAAO,EAAE;EAE/B,IAAIL,SAAS,CAACK,OAAO,EAAE,GAAGD,OAAO,EAAE;IACjC,MAAM,IAAIE,KAAK,CAAC,gDAAgD,CAAC;EACnE;EAEA,IAAIC,KAAK,GAAG,EAAE;EAEd,IAAIC,WAAW,GAAGR,SAAS;EAC3BQ,WAAW,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAEhC,OAAOD,WAAW,CAACH,OAAO,EAAE,IAAID,OAAO,EAAE;IACvCG,KAAK,CAACG,IAAI,CAAChB,KAAK,CAACc,WAAW,CAAC,CAAC;IAC9BA,WAAW,CAACG,OAAO,CAACH,WAAW,CAACI,OAAO,EAAE,GAAGV,IAAI,CAAC;EACnD;EAEA,OAAOK,KAAK;AACd;AAEAM,MAAM,CAACC,OAAO,GAAGlB,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}