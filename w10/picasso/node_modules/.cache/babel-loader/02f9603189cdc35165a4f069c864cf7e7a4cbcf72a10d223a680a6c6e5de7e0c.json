{"ast":null,"code":"var parse = require('../parse/index.js');\n\n/**\n * @category Range Helpers\n * @summary Is the given date within the range?\n *\n * @description\n * Is the given date within the range?\n *\n * @param {Date|String|Number} date - the date to check\n * @param {Date|String|Number} startDate - the start of range\n * @param {Date|String|Number} endDate - the end of range\n * @returns {Boolean} the date is within the range\n * @throws {Error} startDate cannot be after endDate\n *\n * @example\n * // For the date within the range:\n * isWithinRange(\n *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)\n * )\n * //=> true\n *\n * @example\n * // For the date outside of the range:\n * isWithinRange(\n *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)\n * )\n * //=> false\n */\nfunction isWithinRange(dirtyDate, dirtyStartDate, dirtyEndDate) {\n  var time = parse(dirtyDate).getTime();\n  var startTime = parse(dirtyStartDate).getTime();\n  var endTime = parse(dirtyEndDate).getTime();\n  if (startTime > endTime) {\n    throw new Error('The start of the range cannot be after the end of the range');\n  }\n  return time >= startTime && time <= endTime;\n}\nmodule.exports = isWithinRange;","map":{"version":3,"names":["parse","require","isWithinRange","dirtyDate","dirtyStartDate","dirtyEndDate","time","getTime","startTime","endTime","Error","module","exports"],"sources":["/home/marcucosmin3/bootcamp/w10/picasso/node_modules/simple-react-calendar/node_modules/date-fns/is_within_range/index.js"],"sourcesContent":["var parse = require('../parse/index.js')\n\n/**\n * @category Range Helpers\n * @summary Is the given date within the range?\n *\n * @description\n * Is the given date within the range?\n *\n * @param {Date|String|Number} date - the date to check\n * @param {Date|String|Number} startDate - the start of range\n * @param {Date|String|Number} endDate - the end of range\n * @returns {Boolean} the date is within the range\n * @throws {Error} startDate cannot be after endDate\n *\n * @example\n * // For the date within the range:\n * isWithinRange(\n *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)\n * )\n * //=> true\n *\n * @example\n * // For the date outside of the range:\n * isWithinRange(\n *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)\n * )\n * //=> false\n */\nfunction isWithinRange (dirtyDate, dirtyStartDate, dirtyEndDate) {\n  var time = parse(dirtyDate).getTime()\n  var startTime = parse(dirtyStartDate).getTime()\n  var endTime = parse(dirtyEndDate).getTime()\n\n  if (startTime > endTime) {\n    throw new Error('The start of the range cannot be after the end of the range')\n  }\n\n  return time >= startTime && time <= endTime\n}\n\nmodule.exports = isWithinRange\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAEC,SAAS,EAAEC,cAAc,EAAEC,YAAY,EAAE;EAC/D,IAAIC,IAAI,GAAGN,KAAK,CAACG,SAAS,CAAC,CAACI,OAAO,EAAE;EACrC,IAAIC,SAAS,GAAGR,KAAK,CAACI,cAAc,CAAC,CAACG,OAAO,EAAE;EAC/C,IAAIE,OAAO,GAAGT,KAAK,CAACK,YAAY,CAAC,CAACE,OAAO,EAAE;EAE3C,IAAIC,SAAS,GAAGC,OAAO,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC,6DAA6D,CAAC;EAChF;EAEA,OAAOJ,IAAI,IAAIE,SAAS,IAAIF,IAAI,IAAIG,OAAO;AAC7C;AAEAE,MAAM,CAACC,OAAO,GAAGV,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}