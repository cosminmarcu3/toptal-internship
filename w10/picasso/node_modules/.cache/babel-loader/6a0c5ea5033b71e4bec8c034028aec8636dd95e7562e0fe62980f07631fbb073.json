{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = zonedTimeToUtc;\nvar _index = _interopRequireDefault(require(\"date-fns/_lib/cloneObject/index.js\"));\nvar _index2 = _interopRequireDefault(require(\"../toDate/index.js\"));\nvar _index3 = _interopRequireDefault(require(\"../_lib/tzPattern/index.js\"));\nvar _index4 = _interopRequireDefault(require(\"../_lib/tzParseTimezone/index.js\"));\nvar _index5 = _interopRequireDefault(require(\"../_lib/newDateUTC/index.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * @name zonedTimeToUtc\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with values representing the local time\n * @param {String} timeZone - the time zone of this local time, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = zonedTimeToUtc(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\nfunction zonedTimeToUtc(date, timeZone, options) {\n  if (typeof date === 'string' && !date.match(_index3.default)) {\n    var extendedOptions = (0, _index.default)(options);\n    extendedOptions.timeZone = timeZone;\n    return (0, _index2.default)(date, extendedOptions);\n  }\n  var d = (0, _index2.default)(date, options);\n  var utc = (0, _index5.default)(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()).getTime();\n  var offsetMilliseconds = (0, _index4.default)(timeZone, new Date(utc));\n  return new Date(utc + offsetMilliseconds);\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","zonedTimeToUtc","_index","_interopRequireDefault","require","_index2","_index3","_index4","_index5","obj","__esModule","date","timeZone","options","match","extendedOptions","d","utc","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTime","offsetMilliseconds","Date","module"],"sources":["/home/marcucosmin3/bootcamp/w10/picasso/node_modules/date-fns-tz/zonedTimeToUtc/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = zonedTimeToUtc;\n\nvar _index = _interopRequireDefault(require(\"date-fns/_lib/cloneObject/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/tzPattern/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../_lib/tzParseTimezone/index.js\"));\n\nvar _index5 = _interopRequireDefault(require(\"../_lib/newDateUTC/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name zonedTimeToUtc\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with values representing the local time\n * @param {String} timeZone - the time zone of this local time, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = zonedTimeToUtc(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\nfunction zonedTimeToUtc(date, timeZone, options) {\n  if (typeof date === 'string' && !date.match(_index3.default)) {\n    var extendedOptions = (0, _index.default)(options);\n    extendedOptions.timeZone = timeZone;\n    return (0, _index2.default)(date, extendedOptions);\n  }\n\n  var d = (0, _index2.default)(date, options);\n  var utc = (0, _index5.default)(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()).getTime();\n  var offsetMilliseconds = (0, _index4.default)(timeZone, new Date(utc));\n  return new Date(utc + offsetMilliseconds);\n}\n\nmodule.exports = exports.default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,cAAc;AAEhC,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAAC,oCAAoC,CAAC,CAAC;AAElF,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAEnE,IAAIE,OAAO,GAAGH,sBAAsB,CAACC,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAE3E,IAAIG,OAAO,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,kCAAkC,CAAC,CAAC;AAEjF,IAAII,OAAO,GAAGL,sBAAsB,CAACC,OAAO,CAAC,6BAA6B,CAAC,CAAC;AAE5E,SAASD,sBAAsBA,CAACM,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAET,OAAO,EAAES;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASR,cAAcA,CAACU,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC/C,IAAI,OAAOF,IAAI,KAAK,QAAQ,IAAI,CAACA,IAAI,CAACG,KAAK,CAACR,OAAO,CAACN,OAAO,CAAC,EAAE;IAC5D,IAAIe,eAAe,GAAG,CAAC,CAAC,EAAEb,MAAM,CAACF,OAAO,EAAEa,OAAO,CAAC;IAClDE,eAAe,CAACH,QAAQ,GAAGA,QAAQ;IACnC,OAAO,CAAC,CAAC,EAAEP,OAAO,CAACL,OAAO,EAAEW,IAAI,EAAEI,eAAe,CAAC;EACpD;EAEA,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEX,OAAO,CAACL,OAAO,EAAEW,IAAI,EAAEE,OAAO,CAAC;EAC3C,IAAII,GAAG,GAAG,CAAC,CAAC,EAAET,OAAO,CAACR,OAAO,EAAEgB,CAAC,CAACE,WAAW,EAAE,EAAEF,CAAC,CAACG,QAAQ,EAAE,EAAEH,CAAC,CAACI,OAAO,EAAE,EAAEJ,CAAC,CAACK,QAAQ,EAAE,EAAEL,CAAC,CAACM,UAAU,EAAE,EAAEN,CAAC,CAACO,UAAU,EAAE,EAAEP,CAAC,CAACQ,eAAe,EAAE,CAAC,CAACC,OAAO,EAAE;EACvJ,IAAIC,kBAAkB,GAAG,CAAC,CAAC,EAAEnB,OAAO,CAACP,OAAO,EAAEY,QAAQ,EAAE,IAAIe,IAAI,CAACV,GAAG,CAAC,CAAC;EACtE,OAAO,IAAIU,IAAI,CAACV,GAAG,GAAGS,kBAAkB,CAAC;AAC3C;AAEAE,MAAM,CAAC9B,OAAO,GAAGA,OAAO,CAACE,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}