{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { forwardRef } from 'react';\nimport cx from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '../Container';\nimport Typography from '../Typography';\nimport styles from './styles';\nconst MIN_VALUE = 0;\nconst MAX_VALUE = 100;\nconst useStyles = makeStyles(styles, {\n  name: 'PicassoProgressBar'\n});\nconst normalizeValue = value => Math.min(Math.max(value, MIN_VALUE), MAX_VALUE);\nexport const ProgressBar = forwardRef(function ProgressBar(props, ref) {\n  const {\n      value,\n      showPercentage,\n      'data-testid': dataTestId\n    } = props,\n    restProps = __rest(props, [\"value\", \"showPercentage\", 'data-testid']);\n  const classes = useStyles(props);\n  const percentage = normalizeValue(value);\n  return React.createElement(Container, Object.assign({\n    flex: true,\n    direction: 'row',\n    alignItems: 'center',\n    \"data-testid\": dataTestId\n  }, restProps, {\n    ref: ref\n  }), React.createElement(\"div\", {\n    className: cx(classes.progressBar)\n  }, React.createElement(\"div\", {\n    className: cx(classes.progressIndicator),\n    style: {\n      width: `${props.value}%`\n    }\n  })), showPercentage && React.createElement(Container, {\n    left: 'xsmall'\n  }, React.createElement(Typography, {\n    variant: 'body',\n    size: 'xsmall',\n    weight: 'semibold',\n    className: cx(classes.percentageValue)\n  }, percentage, \"%\")));\n});\nProgressBar.defaultProps = {\n  showPercentage: false\n};\nexport default ProgressBar;","map":{"version":3,"names":["React","forwardRef","cx","makeStyles","Container","Typography","styles","MIN_VALUE","MAX_VALUE","useStyles","name","normalizeValue","value","Math","min","max","ProgressBar","props","ref","showPercentage","dataTestId","restProps","__rest","classes","percentage","createElement","Object","assign","flex","direction","alignItems","className","progressBar","progressIndicator","style","width","left","variant","size","weight","percentageValue","defaultProps"],"sources":["../../src/ProgressBar/ProgressBar.tsx"],"sourcesContent":[null],"mappings":";;;;;;;;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,UAAU,QAAe,0BAA0B;AAE5D,OAAOC,SAAS,MAAM,cAAc;AACpC,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,SAAS,GAAG,CAAC;AACnB,MAAMC,SAAS,GAAG,GAAG;AAUrB,MAAMC,SAAS,GAAGN,UAAU,CAAeG,MAAM,EAAE;EACjDI,IAAI,EAAE;CACP,CAAC;AAEF,MAAMC,cAAc,GAAIC,KAAa,IACnCC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACH,KAAK,EAAEL,SAAS,CAAC,EAAEC,SAAS,CAAC;AAEjD,OAAO,MAAMQ,WAAW,GAAGf,UAAU,CACnC,SAASe,WAAWA,CAACC,KAAK,EAAEC,GAAG;EAC7B,MAAM;MACJN,KAAK;MACLO,cAAc;MACd,aAAa,EAAEC;IAAU,IAEvBH,KAAK;IADJI,SAAS,GAAAC,MAAA,CACVL,KAAK,EALH,0CAKL,CAAQ;EACT,MAAMM,OAAO,GAAGd,SAAS,CAACQ,KAAK,CAAC;EAEhC,MAAMO,UAAU,GAAGb,cAAc,CAACC,KAAK,CAAC;EAExC,OACEZ,KAAA,CAAAyB,aAAA,CAACrB,SAAS,EAAAsB,MAAA,CAAAC,MAAA;IACRC,IAAI;IACJC,SAAS,EAAC,KAAK;IACfC,UAAU,EAAC,QAAQ;IAAA,eACNV;EAAU,GACnBC,SAAS;IACbH,GAAG,EAAEA;EAAG,IAERlB,KAAA,CAAAyB,aAAA;IAAKM,SAAS,EAAE7B,EAAE,CAACqB,OAAO,CAACS,WAAW;EAAC,GACrChC,KAAA,CAAAyB,aAAA;IACEM,SAAS,EAAE7B,EAAE,CAACqB,OAAO,CAACU,iBAAiB,CAAC;IACxCC,KAAK,EAAE;MACLC,KAAK,EAAE,GAAGlB,KAAK,CAACL,KAAK;;EACtB,EACD,CACE,EAELO,cAAc,IACbnB,KAAA,CAAAyB,aAAA,CAACrB,SAAS;IAACgC,IAAI,EAAC;EAAQ,GACtBpC,KAAA,CAAAyB,aAAA,CAACpB,UAAU;IACTgC,OAAO,EAAC,MAAM;IACdC,IAAI,EAAC,QAAQ;IACbC,MAAM,EAAC,UAAU;IACjBR,SAAS,EAAE7B,EAAE,CAACqB,OAAO,CAACiB,eAAe;EAAC,GAErChB,UAAU,E,IACA,CAEhB,CACS;AAEhB,CAAC,CACF;AAEDR,WAAW,CAACyB,YAAY,GAAG;EACzBtB,cAAc,EAAE;CACjB;AAED,eAAeH,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}