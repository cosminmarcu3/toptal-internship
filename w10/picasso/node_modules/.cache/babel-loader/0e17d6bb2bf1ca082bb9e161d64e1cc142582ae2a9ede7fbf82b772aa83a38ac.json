{"ast":null,"code":"/**\n * Pixel value of font render space correction.\n * It's individual for different fonts, so it won't work for 100% cases,\n * but it allows us to be much closer to actual overflow detection while calculating.\n * Tolerance of the render could be 0-2px depending on the font that is used,\n * and also affected by the right-padding added at Ellipsis component.\n */\nconst FONT_RENDER_CORRECTION = 0.475;\nconst isOverflown = element => {\n  const {\n    scrollWidth,\n    scrollHeight\n  } = element;\n  const {\n    width,\n    height\n  } = element.getBoundingClientRect();\n  return scrollWidth > width + FONT_RENDER_CORRECTION || scrollHeight > height + FONT_RENDER_CORRECTION;\n};\nexport default isOverflown;","map":{"version":3,"names":["FONT_RENDER_CORRECTION","isOverflown","element","scrollWidth","scrollHeight","width","height","getBoundingClientRect"],"sources":["../../src/utils/is-overflown.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;AAOA,MAAMA,sBAAsB,GAAG,KAAK;AAEpC,MAAMC,WAAW,GAAIC,OAAoB,IAAI;EAC3C,MAAM;IAAEC,WAAW;IAAEC;EAAY,CAAE,GAAGF,OAAO;EAC7C,MAAM;IAAEG,KAAK;IAAEC;EAAM,CAAE,GAAGJ,OAAO,CAACK,qBAAqB,EAAE;EAEzD,OACEJ,WAAW,GAAGE,KAAK,GAAGL,sBAAsB,IAC5CI,YAAY,GAAGE,MAAM,GAAGN,sBAAsB;AAElD,CAAC;AAED,eAAeC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}