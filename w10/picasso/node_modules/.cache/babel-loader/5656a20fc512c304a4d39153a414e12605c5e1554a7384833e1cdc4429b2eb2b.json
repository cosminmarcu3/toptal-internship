{"ast":null,"code":"import React, { useState, useMemo, useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from '../utils';\nimport { useTree, TreeViewPropsDefaults, TreeViewSvg, useFinalMargins } from '../TreeView/shared';\nimport { findExtremeNodes } from './utils/findExtremeNodes';\nconst StaticTreeView = props => {\n  var _a, _b, _c;\n  const {\n    data,\n    renderNode,\n    nodeWidth = StaticTreeView.defaultProps.nodeWidth,\n    nodeHeight = StaticTreeView.defaultProps.nodeHeight\n  } = props;\n  const {\n    direction = StaticTreeView.defaultProps.directionProps.direction,\n    variant = StaticTreeView.defaultProps.directionProps.variant\n  } = (_a = props.directionProps) !== null && _a !== void 0 ? _a : StaticTreeView.defaultProps.directionProps;\n  const [verticalMargin, horizontalMargin] = useFinalMargins(direction, (_b = props.directionProps) === null || _b === void 0 ? void 0 : _b.verticalMargin, (_c = props.directionProps) === null || _c === void 0 ? void 0 : _c.horizontalMargin);\n  const {\n    nodes,\n    links\n  } = useTree({\n    data,\n    direction,\n    verticalMargin,\n    horizontalMargin,\n    nodeWidth,\n    nodeHeight,\n    variant\n  });\n  const svgRef = useRef(null);\n  const [svgMeasurements, setSvgMeasurements] = useState({\n    width: 200,\n    height: 400,\n    topMostNodeY: 0,\n    leftMostNodeX: 0\n  });\n  useIsomorphicLayoutEffect(() => {\n    var _a, _b;\n    if (svgRef.current) {\n      const bbox = svgRef.current.getBBox();\n      const extremes = findExtremeNodes(nodes);\n      setSvgMeasurements({\n        width: bbox.width,\n        height: bbox.height,\n        topMostNodeY: (_a = extremes === null || extremes === void 0 ? void 0 : extremes.topMostNode.y) !== null && _a !== void 0 ? _a : 0,\n        leftMostNodeX: (_b = extremes === null || extremes === void 0 ? void 0 : extremes.leftMostNode.x) !== null && _b !== void 0 ? _b : 0\n      });\n    }\n  }, [svgRef, nodes]);\n  const transforms = useMemo(() => {\n    return {\n      svgViewBox: `0 0 ${svgMeasurements.width} ${svgMeasurements.height}`,\n      gTransform: direction === 'horizontal' ? `translate(0, ${-1 * svgMeasurements.topMostNodeY})` : `translate(${-1 * svgMeasurements.leftMostNodeX}, 0)`\n    };\n  }, [svgMeasurements, direction]);\n  return React.createElement(TreeViewSvg, {\n    ref: svgRef,\n    nodes: nodes,\n    links: links,\n    direction: direction,\n    verticalMargin: verticalMargin,\n    horizontalMargin: horizontalMargin,\n    renderNode: renderNode,\n    svgProps: {\n      viewBox: transforms.svgViewBox\n    },\n    graphProps: {\n      transform: transforms.gTransform\n    }\n  });\n};\nStaticTreeView.defaultProps = TreeViewPropsDefaults;\nStaticTreeView.displayName = 'StaticTreeView';\nexport default StaticTreeView;","map":{"version":3,"names":["React","useState","useMemo","useRef","useIsomorphicLayoutEffect","useTree","TreeViewPropsDefaults","TreeViewSvg","useFinalMargins","findExtremeNodes","StaticTreeView","props","data","renderNode","nodeWidth","defaultProps","nodeHeight","direction","directionProps","variant","_a","verticalMargin","horizontalMargin","_b","_c","nodes","links","svgRef","svgMeasurements","setSvgMeasurements","width","height","topMostNodeY","leftMostNodeX","current","bbox","getBBox","extremes","topMostNode","y","leftMostNode","x","transforms","svgViewBox","gTransform","createElement","ref","svgProps","viewBox","graphProps","transform","displayName"],"sources":["../../src/StaticTreeView/StaticTreeView.tsx"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AAExD,SAASC,yBAAyB,QAAQ,UAAU;AACpD,SAEEC,OAAO,EACPC,qBAAqB,EACrBC,WAAW,EACXC,eAAe,QACV,oBAAoB;AAC3B,SAASC,gBAAgB,QAAQ,0BAA0B;AAW3D,MAAMC,cAAc,GAAIC,KAAY,IAAI;;EACtC,MAAM;IACJC,IAAI;IACJC,UAAU;IACVC,SAAS,GAAGJ,cAAc,CAACK,YAAY,CAACD,SAAS;IACjDE,UAAU,GAAGN,cAAc,CAACK,YAAY,CAACC;EAAU,CACpD,GAAGL,KAAK;EAET,MAAM;IACJM,SAAS,GAAGP,cAAc,CAACK,YAAY,CAACG,cAAc,CAACD,SAAS;IAChEE,OAAO,GAAGT,cAAc,CAACK,YAAY,CAACG,cAAc,CAACC;EAAO,CAC7D,GAAG,CAAAC,EAAA,GAAAT,KAAK,CAACO,cAAc,cAAAE,EAAA,cAAAA,EAAA,GAAIV,cAAc,CAACK,YAAY,CAACG,cAAc;EAEtE,MAAM,CAACG,cAAc,EAAEC,gBAAgB,CAAC,GAAGd,eAAe,CACxDS,SAAS,EACT,CAAAM,EAAA,GAAAZ,KAAK,CAACO,cAAc,cAAAK,EAAA,uBAAAA,EAAA,CAAEF,cAAc,EACpC,CAAAG,EAAA,GAAAb,KAAK,CAACO,cAAc,cAAAM,EAAA,uBAAAA,EAAA,CAAEF,gBAAgB,CACvC;EAED,MAAM;IAAEG,KAAK;IAAEC;EAAK,CAAE,GAAGrB,OAAO,CAAC;IAC/BO,IAAI;IACJK,SAAS;IACTI,cAAc;IACdC,gBAAgB;IAChBR,SAAS;IACTE,UAAU;IACVG;GACD,CAAC;EAEF,MAAMQ,MAAM,GAAGxB,MAAM,CAAgB,IAAI,CAAC;EAC1C,MAAM,CAACyB,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAkB;IACtE6B,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,YAAY,EAAE,CAAC;IACfC,aAAa,EAAE;GAChB,CAAC;EAEF7B,yBAAyB,CAAC,MAAK;;IAC7B,IAAIuB,MAAM,CAACO,OAAO,EAAE;MAClB,MAAMC,IAAI,GAAGR,MAAM,CAACO,OAAO,CAACE,OAAO,EAAE;MACrC,MAAMC,QAAQ,GAAG5B,gBAAgB,CAACgB,KAAK,CAAC;MAExCI,kBAAkB,CAAC;QACjBC,KAAK,EAAEK,IAAI,CAACL,KAAK;QACjBC,MAAM,EAAEI,IAAI,CAACJ,MAAM;QACnBC,YAAY,EAAE,CAAAZ,EAAA,GAAAiB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,WAAW,CAACC,CAAC,cAAAnB,EAAA,cAAAA,EAAA,GAAI,CAAC;QAC1Ca,aAAa,EAAE,CAAAV,EAAA,GAAAc,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,YAAY,CAACC,CAAC,cAAAlB,EAAA,cAAAA,EAAA,GAAI;OAC5C,CAAC;;EAEN,CAAC,EAAE,CAACI,MAAM,EAAEF,KAAK,CAAC,CAAC;EAEnB,MAAMiB,UAAU,GAAGxC,OAAO,CAAC,MAAK;IAC9B,OAAO;MACLyC,UAAU,EAAE,OAAOf,eAAe,CAACE,KAAK,IAAIF,eAAe,CAACG,MAAM,EAAE;MACpEa,UAAU,EACR3B,SAAS,KAAK,YAAY,GACtB,gBAAgB,CAAC,CAAC,GAAGW,eAAe,CAACI,YAAY,GAAG,GACpD,aAAa,CAAC,CAAC,GAAGJ,eAAe,CAACK,aAAa;KACtD;EACH,CAAC,EAAE,CAACL,eAAe,EAAEX,SAAS,CAAC,CAAC;EAEhC,OACEjB,KAAA,CAAA6C,aAAA,CAACtC,WAAW;IACVuC,GAAG,EAAEnB,MAAM;IACXF,KAAK,EAAEA,KAAK;IACZC,KAAK,EAAEA,KAAK;IACZT,SAAS,EAAEA,SAAS;IACpBI,cAAc,EAAEA,cAAc;IAC9BC,gBAAgB,EAAEA,gBAAgB;IAClCT,UAAU,EAAEA,UAAU;IACtBkC,QAAQ,EAAE;MACRC,OAAO,EAAEN,UAAU,CAACC;KACrB;IACDM,UAAU,EAAE;MACVC,SAAS,EAAER,UAAU,CAACE;;EACvB,EACD;AAEN,CAAC;AAEDlC,cAAc,CAACK,YAAY,GAAGT,qBAAqB;AAEnDI,cAAc,CAACyC,WAAW,GAAG,gBAAgB;AAE7C,eAAezC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}