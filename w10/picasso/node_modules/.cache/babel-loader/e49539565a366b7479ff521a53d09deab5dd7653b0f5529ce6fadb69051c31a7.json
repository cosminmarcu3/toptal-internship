{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tzParseTimezone;\nvar _index = _interopRequireDefault(require(\"../tzTokenizeDate/index.js\"));\nvar _index2 = _interopRequireDefault(require(\"../newDateUTC/index.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar patterns = {\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-]\\d{2})$/,\n  timezoneHHMM: /^([+-]\\d{2}):?(\\d{2})$/\n}; // Parse various time zone offset formats to an offset in milliseconds\n\nfunction tzParseTimezone(timezoneString, date, isUtcDate) {\n  var token;\n  var absoluteOffset; // Empty string\n\n  if (!timezoneString) {\n    return 0;\n  } // Z\n\n  token = patterns.timezoneZ.exec(timezoneString);\n  if (token) {\n    return 0;\n  }\n  var hours; // ±hh\n\n  token = patterns.timezoneHH.exec(timezoneString);\n  if (token) {\n    hours = parseInt(token[1], 10);\n    if (!validateTimezone(hours)) {\n      return NaN;\n    }\n    return -(hours * MILLISECONDS_IN_HOUR);\n  } // ±hh:mm or ±hhmm\n\n  token = patterns.timezoneHHMM.exec(timezoneString);\n  if (token) {\n    hours = parseInt(token[1], 10);\n    var minutes = parseInt(token[2], 10);\n    if (!validateTimezone(hours, minutes)) {\n      return NaN;\n    }\n    absoluteOffset = Math.abs(hours) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    return hours > 0 ? -absoluteOffset : absoluteOffset;\n  } // IANA time zone\n\n  if (isValidTimezoneIANAString(timezoneString)) {\n    date = new Date(date || Date.now());\n    var utcDate = isUtcDate ? date : toUtcDate(date);\n    var offset = calcOffset(utcDate, timezoneString);\n    var fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\n    return -fixedOffset;\n  }\n  return NaN;\n}\nfunction toUtcDate(date) {\n  return (0, _index2.default)(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n}\nfunction calcOffset(date, timezoneString) {\n  var tokens = (0, _index.default)(date, timezoneString); // ms dropped because it's not provided by tzTokenizeDate\n\n  var asUTC = (0, _index2.default)(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5], 0).getTime();\n  var asTS = date.getTime();\n  var over = asTS % 1000;\n  asTS -= over >= 0 ? over : 1000 + over;\n  return asUTC - asTS;\n}\nfunction fixOffset(date, offset, timezoneString) {\n  var localTS = date.getTime(); // Our UTC time is just a guess because our offset is just a guess\n\n  var utcGuess = localTS - offset; // Test whether the zone matches the offset for this ts\n\n  var o2 = calcOffset(new Date(utcGuess), timezoneString); // If so, offset didn't change, and we're done\n\n  if (offset === o2) {\n    return offset;\n  } // If not, change the ts by the difference in the offset\n\n  utcGuess -= o2 - offset; // If that gives us the local time we want, we're done\n\n  var o3 = calcOffset(new Date(utcGuess), timezoneString);\n  if (o2 === o3) {\n    return o2;\n  } // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time\n\n  return Math.max(o2, o3);\n}\nfunction validateTimezone(hours, minutes) {\n  return -23 <= hours && hours <= 23 && (minutes == null || 0 <= minutes && minutes <= 59);\n}\nvar validIANATimezoneCache = {};\nfunction isValidTimezoneIANAString(timeZoneString) {\n  if (validIANATimezoneCache[timeZoneString]) return true;\n  try {\n    new Intl.DateTimeFormat(undefined, {\n      timeZone: timeZoneString\n    });\n    validIANATimezoneCache[timeZoneString] = true;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","tzParseTimezone","_index","_interopRequireDefault","require","_index2","obj","__esModule","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","patterns","timezone","timezoneZ","timezoneHH","timezoneHHMM","timezoneString","date","isUtcDate","token","absoluteOffset","exec","hours","parseInt","validateTimezone","NaN","minutes","Math","abs","isValidTimezoneIANAString","Date","now","utcDate","toUtcDate","offset","calcOffset","fixedOffset","fixOffset","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","tokens","asUTC","getTime","asTS","over","localTS","utcGuess","o2","o3","max","validIANATimezoneCache","timeZoneString","Intl","DateTimeFormat","undefined","timeZone","error","module"],"sources":["/home/marcucosmin3/bootcamp/w10/picasso/node_modules/date-fns-tz/_lib/tzParseTimezone/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tzParseTimezone;\n\nvar _index = _interopRequireDefault(require(\"../tzTokenizeDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../newDateUTC/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar patterns = {\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-]\\d{2})$/,\n  timezoneHHMM: /^([+-]\\d{2}):?(\\d{2})$/\n}; // Parse various time zone offset formats to an offset in milliseconds\n\nfunction tzParseTimezone(timezoneString, date, isUtcDate) {\n  var token;\n  var absoluteOffset; // Empty string\n\n  if (!timezoneString) {\n    return 0;\n  } // Z\n\n\n  token = patterns.timezoneZ.exec(timezoneString);\n\n  if (token) {\n    return 0;\n  }\n\n  var hours; // ±hh\n\n  token = patterns.timezoneHH.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n\n    if (!validateTimezone(hours)) {\n      return NaN;\n    }\n\n    return -(hours * MILLISECONDS_IN_HOUR);\n  } // ±hh:mm or ±hhmm\n\n\n  token = patterns.timezoneHHMM.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    var minutes = parseInt(token[2], 10);\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN;\n    }\n\n    absoluteOffset = Math.abs(hours) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    return hours > 0 ? -absoluteOffset : absoluteOffset;\n  } // IANA time zone\n\n\n  if (isValidTimezoneIANAString(timezoneString)) {\n    date = new Date(date || Date.now());\n    var utcDate = isUtcDate ? date : toUtcDate(date);\n    var offset = calcOffset(utcDate, timezoneString);\n    var fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\n    return -fixedOffset;\n  }\n\n  return NaN;\n}\n\nfunction toUtcDate(date) {\n  return (0, _index2.default)(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n}\n\nfunction calcOffset(date, timezoneString) {\n  var tokens = (0, _index.default)(date, timezoneString); // ms dropped because it's not provided by tzTokenizeDate\n\n  var asUTC = (0, _index2.default)(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5], 0).getTime();\n  var asTS = date.getTime();\n  var over = asTS % 1000;\n  asTS -= over >= 0 ? over : 1000 + over;\n  return asUTC - asTS;\n}\n\nfunction fixOffset(date, offset, timezoneString) {\n  var localTS = date.getTime(); // Our UTC time is just a guess because our offset is just a guess\n\n  var utcGuess = localTS - offset; // Test whether the zone matches the offset for this ts\n\n  var o2 = calcOffset(new Date(utcGuess), timezoneString); // If so, offset didn't change, and we're done\n\n  if (offset === o2) {\n    return offset;\n  } // If not, change the ts by the difference in the offset\n\n\n  utcGuess -= o2 - offset; // If that gives us the local time we want, we're done\n\n  var o3 = calcOffset(new Date(utcGuess), timezoneString);\n\n  if (o2 === o3) {\n    return o2;\n  } // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time\n\n\n  return Math.max(o2, o3);\n}\n\nfunction validateTimezone(hours, minutes) {\n  return -23 <= hours && hours <= 23 && (minutes == null || 0 <= minutes && minutes <= 59);\n}\n\nvar validIANATimezoneCache = {};\n\nfunction isValidTimezoneIANAString(timeZoneString) {\n  if (validIANATimezoneCache[timeZoneString]) return true;\n\n  try {\n    new Intl.DateTimeFormat(undefined, {\n      timeZone: timeZoneString\n    });\n    validIANATimezoneCache[timeZoneString] = true;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}