{"ast":null,"code":"import { useEffect, useState, useMemo } from 'react';\nconst useOnScreen = _ref => {\n  let {\n    ref,\n    root,\n    rootMargin,\n    threshold\n  } = _ref;\n  const [isIntersecting, setIntersecting] = useState(false);\n  const observer = useMemo(() => new IntersectionObserver(_ref2 => {\n    let [entry] = _ref2;\n    setIntersecting(entry.isIntersecting);\n  }, {\n    root: root === null || root === void 0 ? void 0 : root.current,\n    rootMargin,\n    threshold\n  }), [root, rootMargin, threshold]);\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) {\n      return;\n    }\n    observer.observe(element);\n    return () => {\n      observer.unobserve(element);\n    };\n  }, [observer, ref]);\n  return isIntersecting;\n};\nexport default useOnScreen;","map":{"version":3,"names":["useEffect","useState","useMemo","useOnScreen","_ref","ref","root","rootMargin","threshold","isIntersecting","setIntersecting","observer","IntersectionObserver","_ref2","entry","current","element","observe","unobserve"],"sources":["../../../src/utils/useOnScreen/use-on-screen.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AASpD,MAAMC,WAAW,GAAGC,IAAA,IAKG;EAAA,IALF;IACnBC,GAAG;IACHC,IAAI;IACJC,UAAU;IACVC;EAAS,CACQ,GAAAJ,IAAA;EACjB,MAAM,CAACK,cAAc,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMU,QAAQ,GAAGT,OAAO,CACtB,MACE,IAAIU,oBAAoB,CACtBC,KAAA,IAAY;IAAA,IAAX,CAACC,KAAK,CAAC,GAAAD,KAAA;IACNH,eAAe,CAACI,KAAK,CAACL,cAAc,CAAC;EACvC,CAAC,EACD;IACEH,IAAI,EAAEA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,OAAO;IACnBR,UAAU;IACVC;GACD,CACF,EACH,CAACF,IAAI,EAAEC,UAAU,EAAEC,SAAS,CAAC,CAC9B;EAEDR,SAAS,CAAC,MAAK;IACb,MAAMgB,OAAO,GAAGX,GAAG,CAACU,OAAO;IAE3B,IAAI,CAACC,OAAO,EAAE;MACZ;;IAGFL,QAAQ,CAACM,OAAO,CAACD,OAAO,CAAC;IAEzB,OAAO,MAAK;MACVL,QAAQ,CAACO,SAAS,CAACF,OAAO,CAAC;IAC7B,CAAC;EACH,CAAC,EAAE,CAACL,QAAQ,EAAEN,GAAG,CAAC,CAAC;EAEnB,OAAOI,cAAc;AACvB,CAAC;AAED,eAAeN,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}