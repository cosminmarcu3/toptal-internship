{"ast":null,"code":"import color from 'color';\n// darken calculates based on the absolute color value\n// https://github.com/Qix-/color/issues/53#issuecomment-487822576\nexport const darken = (inputColor, amount) => {\n  const colorValue = color(inputColor);\n  const lightness = colorValue.lightness();\n  return colorValue.lightness(lightness - lightness * amount).hex();\n};\n// lighten calculates based on the absolute color value\n// https://github.com/Qix-/color/issues/53#issuecomment-487822576\nexport const lighten = (inputColor, amount) => {\n  const colorValue = color(inputColor);\n  const lightness = colorValue.lightness();\n  return colorValue.lightness(lightness + (100 - lightness) * amount).hex();\n};\nexport const alpha = (inputColor, amount) => {\n  return color(inputColor).alpha(amount).toString();\n};\n// Approximate blending https://github.com/Qix-/color/issues/154\nexport const mix = (baseColor, mixColor, amount) => {\n  const baseColorValue = color(baseColor);\n  const mixColorValue = color(mixColor);\n  return baseColorValue.mix(mixColorValue, amount).hex();\n};\nexport const rem = function (pxValue) {\n  let baseFontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  return `${Number.parseFloat(pxValue) / baseFontSize}rem`;\n};\nexport const pxFromRem = function (remValue) {\n  let baseFontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  return `${Number.parseFloat(remValue) * baseFontSize}px`;\n};\nexport const outline = function (baseColor) {\n  let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  return {\n    boxShadow: `0 0 0 ${width}px ${alpha(baseColor, 0.48)}`\n  };\n};\nexport const remToNumber = value => Number.parseFloat(value);\nexport { default as addClassesToChildren } from './add-classes-to-children';\nexport * from './types';","map":{"version":3,"names":["color","darken","inputColor","amount","colorValue","lightness","hex","lighten","alpha","toString","mix","baseColor","mixColor","baseColorValue","mixColorValue","rem","pxValue","baseFontSize","arguments","length","undefined","Number","parseFloat","pxFromRem","remValue","outline","width","boxShadow","remToNumber","value","default","addClassesToChildren"],"sources":["../../src/styles/index.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB;AACA;AACA,OAAO,MAAMC,MAAM,GAAGA,CAACC,UAAkB,EAAEC,MAAc,KAAI;EAC3D,MAAMC,UAAU,GAAGJ,KAAK,CAACE,UAAU,CAAC;EACpC,MAAMG,SAAS,GAAGD,UAAU,CAACC,SAAS,EAAE;EAExC,OAAOD,UAAU,CAACC,SAAS,CAACA,SAAS,GAAGA,SAAS,GAAGF,MAAM,CAAC,CAACG,GAAG,EAAE;AACnE,CAAC;AAED;AACA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAACL,UAAkB,EAAEC,MAAc,KAAI;EAC5D,MAAMC,UAAU,GAAGJ,KAAK,CAACE,UAAU,CAAC;EACpC,MAAMG,SAAS,GAAGD,UAAU,CAACC,SAAS,EAAE;EAExC,OAAOD,UAAU,CAACC,SAAS,CAACA,SAAS,GAAG,CAAC,GAAG,GAAGA,SAAS,IAAIF,MAAM,CAAC,CAACG,GAAG,EAAE;AAC3E,CAAC;AAED,OAAO,MAAME,KAAK,GAAGA,CAACN,UAAkB,EAAEC,MAAc,KAAI;EAC1D,OAAOH,KAAK,CAACE,UAAU,CAAC,CAACM,KAAK,CAACL,MAAM,CAAC,CAACM,QAAQ,EAAE;AACnD,CAAC;AAED;AACA,OAAO,MAAMC,GAAG,GAAGA,CAACC,SAAiB,EAAEC,QAAgB,EAAET,MAAc,KAAI;EACzE,MAAMU,cAAc,GAAGb,KAAK,CAACW,SAAS,CAAC;EACvC,MAAMG,aAAa,GAAGd,KAAK,CAACY,QAAQ,CAAC;EAErC,OAAOC,cAAc,CAACH,GAAG,CAACI,aAAa,EAAEX,MAAM,CAAC,CAACG,GAAG,EAAE;AACxD,CAAC;AAED,OAAO,MAAMS,GAAG,GAAG,SAAAA,CAACC,OAAe;EAAA,IAAEC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,OACpD,GAAGG,MAAM,CAACC,UAAU,CAACN,OAAO,CAAC,GAAGC,YAAY,KAAK;AAAA;AAEnD,OAAO,MAAMM,SAAS,GAAG,SAAAA,CAACC,QAAgB;EAAA,IAAEP,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,OAC3D,GAAGG,MAAM,CAACC,UAAU,CAACE,QAAQ,CAAC,GAAGP,YAAY,IAAI;AAAA;AAEnD,OAAO,MAAMQ,OAAO,GAAG,SAAAA,CAACd,SAAiB;EAAA,IAAEe,KAAK,GAAAR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,OAAM;IACxDS,SAAS,EAAE,SAASD,KAAK,MAAMlB,KAAK,CAACG,SAAS,EAAE,IAAI,CAAC;GACtD;AAAA,CAAC;AAEF,OAAO,MAAMiB,WAAW,GAAIC,KAAa,IAAKR,MAAM,CAACC,UAAU,CAACO,KAAK,CAAC;AAEtE,SAASC,OAAO,IAAIC,oBAAoB,QAAQ,2BAA2B;AAE3E,cAAc,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}