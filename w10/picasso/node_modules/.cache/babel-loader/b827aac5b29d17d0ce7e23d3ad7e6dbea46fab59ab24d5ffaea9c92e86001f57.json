{"ast":null,"code":"/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int} cursor_pos Expected edit position in text1 (optional)\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  // Check cursor_pos within bounds\n  if (cursor_pos < 0 || text1.length < cursor_pos) {\n    cursor_pos = null;\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs);\n  if (cursor_pos != null) {\n    diffs = fix_cursor(diffs, cursor_pos);\n  }\n  diffs = fix_emoji(diffs);\n  return diffs;\n}\n;\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n  return diff_bisect_(text1, text2);\n}\n;\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = delta % 2 != 0;\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\n;\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n  return diffs.concat(diffsb);\n}\n;\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n}\n;\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n}\n;\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n}\n;\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n}\n;\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\nmodule.exports = diff;\n\n/*\n * Modify a diff such that the cursor position points to the start of a change:\n * E.g.\n *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n */\nfunction cursor_normalize_diff(diffs, cursor_pos) {\n  if (cursor_pos === 0) {\n    return [DIFF_EQUAL, diffs];\n  }\n  for (var current_pos = 0, i = 0; i < diffs.length; i++) {\n    var d = diffs[i];\n    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n      var next_pos = current_pos + d[1].length;\n      if (cursor_pos === next_pos) {\n        return [i + 1, diffs];\n      } else if (cursor_pos < next_pos) {\n        // copy to prevent side effects\n        diffs = diffs.slice();\n        // split d into two diff changes\n        var split_pos = cursor_pos - current_pos;\n        var d_left = [d[0], d[1].slice(0, split_pos)];\n        var d_right = [d[0], d[1].slice(split_pos)];\n        diffs.splice(i, 1, d_left, d_right);\n        return [i + 1, diffs];\n      } else {\n        current_pos = next_pos;\n      }\n    }\n  }\n  throw new Error('cursor_pos is out of bounds!');\n}\n\n/*\n * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n *\n * Case 1)\n *   Check if a naive shift is possible:\n *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n * Case 2)\n *   Check if the following shifts are possible:\n *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n *         ^            ^\n *         d          d_next\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} Array of diff tuples\n */\nfunction fix_cursor(diffs, cursor_pos) {\n  var norm = cursor_normalize_diff(diffs, cursor_pos);\n  var ndiffs = norm[1];\n  var cursor_pointer = norm[0];\n  var d = ndiffs[cursor_pointer];\n  var d_next = ndiffs[cursor_pointer + 1];\n  if (d == null) {\n    // Text was deleted from end of original string,\n    // cursor is now out of bounds in new string\n    return diffs;\n  } else if (d[0] !== DIFF_EQUAL) {\n    // A modification happened at the cursor location.\n    // This is the expected outcome, so we can return the original diff.\n    return diffs;\n  } else {\n    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n      // Case 1)\n      // It is possible to perform a naive shift\n      ndiffs.splice(cursor_pointer, 2, d_next, d);\n      return merge_tuples(ndiffs, cursor_pointer, 2);\n    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n      // Case 2)\n      // d[1] is a prefix of d_next[1]\n      // We can assume that d_next[0] !== 0, since d[0] === 0\n      // Shift edit locations..\n      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);\n      var suffix = d_next[1].slice(d[1].length);\n      if (suffix.length > 0) {\n        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);\n      }\n      return merge_tuples(ndiffs, cursor_pointer, 3);\n    } else {\n      // Not possible to perform any modification\n      return diffs;\n    }\n  }\n}\n\n/*\n * Check diff did not split surrogate pairs.\n * Ex. [0, '\\uD83D'], [-1, '\\uDC36'], [1, '\\uDC2F'] -> [-1, '\\uD83D\\uDC36'], [1, '\\uD83D\\uDC2F']\n *     '\\uD83D\\uDC36' === '🐶', '\\uD83D\\uDC2F' === '🐯'\n *\n * @param {Array} diffs Array of diff tuples\n * @return {Array} Array of diff tuples\n */\nfunction fix_emoji(diffs) {\n  var compact = false;\n  var starts_with_pair_end = function (str) {\n    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;\n  };\n  var ends_with_pair_start = function (str) {\n    return str.charCodeAt(str.length - 1) >= 0xD800 && str.charCodeAt(str.length - 1) <= 0xDBFF;\n  };\n  for (var i = 2; i < diffs.length; i += 1) {\n    if (diffs[i - 2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i - 2][1]) && diffs[i - 1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i - 1][1]) && diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {\n      compact = true;\n      diffs[i - 1][1] = diffs[i - 2][1].slice(-1) + diffs[i - 1][1];\n      diffs[i][1] = diffs[i - 2][1].slice(-1) + diffs[i][1];\n      diffs[i - 2][1] = diffs[i - 2][1].slice(0, -1);\n    }\n  }\n  if (!compact) {\n    return diffs;\n  }\n  var fixed_diffs = [];\n  for (var i = 0; i < diffs.length; i += 1) {\n    if (diffs[i][1].length > 0) {\n      fixed_diffs.push(diffs[i]);\n    }\n  }\n  return fixed_diffs;\n}\n\n/*\n * Try to merge tuples with their neigbors in a given range.\n * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n *\n * @param {Array} diffs Array of diff tuples.\n * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n * @param {Int} length Number of consecutive elements to check.\n * @return {Array} Array of merged diff tuples.\n */\nfunction merge_tuples(diffs, start, length) {\n  // Check from (start-1) to (start+length).\n  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {\n    if (i + 1 < diffs.length) {\n      var left_d = diffs[i];\n      var right_d = diffs[i + 1];\n      if (left_d[0] === right_d[1]) {\n        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);\n      }\n    }\n  }\n  return diffs;\n}","map":{"version":3,"names":["DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","diff_main","text1","text2","cursor_pos","length","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","fix_cursor","fix_emoji","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_bisect_","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_halfMatchI_","seed","j","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","pointer","count_delete","count_insert","text_delete","text_insert","splice","pop","changes","diff","INSERT","DELETE","EQUAL","module","exports","cursor_normalize_diff","current_pos","next_pos","slice","split_pos","d_left","d_right","Error","norm","ndiffs","cursor_pointer","d_next","merge_tuples","suffix","compact","starts_with_pair_end","str","charCodeAt","ends_with_pair_start","fixed_diffs","start","left_d","right_d"],"sources":["/home/marcucosmin3/bootcamp/w10/picasso/node_modules/fast-diff/diff.js"],"sourcesContent":["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int} cursor_pos Expected edit position in text1 (optional)\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  // Check cursor_pos within bounds\n  if (cursor_pos < 0 || text1.length < cursor_pos) {\n    cursor_pos = null;\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs);\n  if (cursor_pos != null) {\n    diffs = fix_cursor(diffs, cursor_pos);\n  }\n  diffs = fix_emoji(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i),\n                                           shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i),\n                                           shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n};\n\n\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n\n/*\n * Modify a diff such that the cursor position points to the start of a change:\n * E.g.\n *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n */\nfunction cursor_normalize_diff (diffs, cursor_pos) {\n  if (cursor_pos === 0) {\n    return [DIFF_EQUAL, diffs];\n  }\n  for (var current_pos = 0, i = 0; i < diffs.length; i++) {\n    var d = diffs[i];\n    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n      var next_pos = current_pos + d[1].length;\n      if (cursor_pos === next_pos) {\n        return [i + 1, diffs];\n      } else if (cursor_pos < next_pos) {\n        // copy to prevent side effects\n        diffs = diffs.slice();\n        // split d into two diff changes\n        var split_pos = cursor_pos - current_pos;\n        var d_left = [d[0], d[1].slice(0, split_pos)];\n        var d_right = [d[0], d[1].slice(split_pos)];\n        diffs.splice(i, 1, d_left, d_right);\n        return [i + 1, diffs];\n      } else {\n        current_pos = next_pos;\n      }\n    }\n  }\n  throw new Error('cursor_pos is out of bounds!')\n}\n\n/*\n * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n *\n * Case 1)\n *   Check if a naive shift is possible:\n *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n * Case 2)\n *   Check if the following shifts are possible:\n *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n *         ^            ^\n *         d          d_next\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} Array of diff tuples\n */\nfunction fix_cursor (diffs, cursor_pos) {\n  var norm = cursor_normalize_diff(diffs, cursor_pos);\n  var ndiffs = norm[1];\n  var cursor_pointer = norm[0];\n  var d = ndiffs[cursor_pointer];\n  var d_next = ndiffs[cursor_pointer + 1];\n\n  if (d == null) {\n    // Text was deleted from end of original string,\n    // cursor is now out of bounds in new string\n    return diffs;\n  } else if (d[0] !== DIFF_EQUAL) {\n    // A modification happened at the cursor location.\n    // This is the expected outcome, so we can return the original diff.\n    return diffs;\n  } else {\n    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n      // Case 1)\n      // It is possible to perform a naive shift\n      ndiffs.splice(cursor_pointer, 2, d_next, d)\n      return merge_tuples(ndiffs, cursor_pointer, 2)\n    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n      // Case 2)\n      // d[1] is a prefix of d_next[1]\n      // We can assume that d_next[0] !== 0, since d[0] === 0\n      // Shift edit locations..\n      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);\n      var suffix = d_next[1].slice(d[1].length);\n      if (suffix.length > 0) {\n        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);\n      }\n      return merge_tuples(ndiffs, cursor_pointer, 3)\n    } else {\n      // Not possible to perform any modification\n      return diffs;\n    }\n  }\n}\n\n/*\n * Check diff did not split surrogate pairs.\n * Ex. [0, '\\uD83D'], [-1, '\\uDC36'], [1, '\\uDC2F'] -> [-1, '\\uD83D\\uDC36'], [1, '\\uD83D\\uDC2F']\n *     '\\uD83D\\uDC36' === '🐶', '\\uD83D\\uDC2F' === '🐯'\n *\n * @param {Array} diffs Array of diff tuples\n * @return {Array} Array of diff tuples\n */\nfunction fix_emoji (diffs) {\n  var compact = false;\n  var starts_with_pair_end = function(str) {\n    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;\n  }\n  var ends_with_pair_start = function(str) {\n    return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;\n  }\n  for (var i = 2; i < diffs.length; i += 1) {\n    if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&\n        diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&\n        diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {\n      compact = true;\n\n      diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];\n      diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];\n\n      diffs[i-2][1] = diffs[i-2][1].slice(0, -1);\n    }\n  }\n  if (!compact) {\n    return diffs;\n  }\n  var fixed_diffs = [];\n  for (var i = 0; i < diffs.length; i += 1) {\n    if (diffs[i][1].length > 0) {\n      fixed_diffs.push(diffs[i]);\n    }\n  }\n  return fixed_diffs;\n}\n\n/*\n * Try to merge tuples with their neigbors in a given range.\n * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n *\n * @param {Array} diffs Array of diff tuples.\n * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n * @param {Int} length Number of consecutive elements to check.\n * @return {Array} Array of merged diff tuples.\n */\nfunction merge_tuples (diffs, start, length) {\n  // Check from (start-1) to (start+length).\n  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {\n    if (i + 1 < diffs.length) {\n      var left_d = diffs[i];\n      var right_d = diffs[i+1];\n      if (left_d[0] === right_d[1]) {\n        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);\n      }\n    }\n  }\n  return diffs;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}