{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport Quill from 'quill';\nimport 'quill-paste-smart';\nimport { useTypographyClasses, makeHeaderFormat, makeBoldFormat, makeLinkFormat } from '../../formats';\nexport const getModules = plugins => {\n  const allowLinks = plugins === null || plugins === void 0 ? void 0 : plugins.includes('link');\n  const allowedTags = ['b', 'strong', 'i', 'em', 'p', 'br', 'ul', 'ol', 'li', 'h3'];\n  const allowedAttributes = [];\n  if (allowLinks) {\n    allowedTags.push('a');\n    allowedAttributes.push('href');\n  }\n  return {\n    clipboard: {\n      matchVisual: false,\n      allowed: {\n        // unsupported tags will be also removed on BE side, so before extending\n        // make sure, that our API supports new type\n        tags: allowedTags,\n        attributes: allowedAttributes\n      },\n      keepSelection: true,\n      substituteBlockElements: true\n    },\n    keyboard: {\n      // we need to specify default bindings\n      // because Quill don't allow us to setup bindings via\n      // quill.keyboard.addBinding for default Quill\n      // key shortcuts otherwise\n      bindings: {\n        bold: {\n          key: 'B',\n          metaKey: true,\n          ctrlKey: true,\n          handler: function () {}\n        },\n        italic: {\n          key: 'I',\n          metaKey: true,\n          ctrlKey: true,\n          handler: function () {}\n        }\n      }\n    }\n  };\n};\n/**\n * Formats we allow to paste into editor\n *\n * This is separate from adding a control in the Toolbar.\n * For example, you can configure Quill to allow bolded\n * content to be pasted into an editor that has no bold\n * button in the toolbar. */\nconst formats = ['bold', 'italic', 'header', 'list'];\nconst Inline = Quill.import('blots/inline');\n// We need link to be wrapped by other inline HTML tags to keep proper styling\n// Lower index means deeper in the DOM tree, since not found (-1) is for embeds\nInline.order = ['cursor', 'link', 'inline', 'underline', 'strike', 'italic', 'bold', 'script', 'code' // Must be higher\n];\n\nconst useQuillInstance = _ref => {\n  let {\n    id,\n    placeholder,\n    plugins\n  } = _ref;\n  const [quill, setQuill] = useState();\n  const typographyClasses = useTypographyClasses();\n  useEffect(() => {\n    const extendedFormats = [...formats];\n    Quill.register(makeHeaderFormat(typographyClasses), true);\n    Quill.register(makeBoldFormat(typographyClasses), true);\n    const allowLinks = plugins === null || plugins === void 0 ? void 0 : plugins.includes('link');\n    if (allowLinks) {\n      Quill.register(makeLinkFormat(typographyClasses), true);\n      extendedFormats.push('link');\n    }\n    setQuill(new Quill(`#${id}`, {\n      modules: getModules(plugins),\n      formats: extendedFormats,\n      placeholder\n    }));\n  }, [typographyClasses, id, placeholder, plugins]);\n  return quill;\n};\nexport default useQuillInstance;","map":{"version":3,"names":["useEffect","useState","Quill","useTypographyClasses","makeHeaderFormat","makeBoldFormat","makeLinkFormat","getModules","plugins","allowLinks","includes","allowedTags","allowedAttributes","push","clipboard","matchVisual","allowed","tags","attributes","keepSelection","substituteBlockElements","keyboard","bindings","bold","key","metaKey","ctrlKey","handler","italic","formats","Inline","import","order","useQuillInstance","_ref","id","placeholder","quill","setQuill","typographyClasses","extendedFormats","register","modules"],"sources":["../../../../src/QuillEditor/hooks/useQuillInstance/useQuillInstance.tsx"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}