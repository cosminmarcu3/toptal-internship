{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from 'react';\nimport { OverviewBlockGroupContext } from './OverviewBlockGroupContext';\nimport OverviewBlockRow from '../OverviewBlockRow';\n// We need to inject a single row if there is none provided.\n// It allows to skip `OverviewBlock.Row` component for a single-row groups.\nconst shouldInjectRow = children => {\n  if (!children) {\n    return false;\n  }\n  return !React.Children.toArray(children).filter(el => React.isValidElement(el)).some(el => el.type.displayName === OverviewBlockRow.displayName);\n};\nconst OverviewBlockGroup = props => {\n  const {\n      children,\n      align = 'default',\n      blockWidth = 'regular'\n    } = props,\n    rest = __rest(props, [\"children\", \"align\", \"blockWidth\"]);\n  return React.createElement(\"section\", Object.assign({}, rest), React.createElement(OverviewBlockGroupContext.Provider, {\n    value: {\n      align,\n      blockWidth\n    }\n  }, shouldInjectRow(children) ? React.createElement(OverviewBlockRow, null, children) : children));\n};\nOverviewBlockGroup.displayName = 'OverviewBlockGroup';\nOverviewBlockGroup.defaultProps = {\n  align: 'default',\n  blockWidth: 'regular'\n};\nexport default OverviewBlockGroup;","map":{"version":3,"names":["React","OverviewBlockGroupContext","OverviewBlockRow","shouldInjectRow","children","Children","toArray","filter","el","isValidElement","some","type","displayName","OverviewBlockGroup","props","align","blockWidth","rest","__rest","createElement","Object","assign","Provider","value","defaultProps"],"sources":["../../src/OverviewBlockGroup/OverviewBlockGroup.tsx"],"sourcesContent":[null],"mappings":";;;;;;;;AAAA,OAAOA,KAA2D,MAAM,OAAO;AAG/E,SAASC,yBAAyB,QAAQ,6BAA6B;AACvE,OAAOC,gBAAgB,MAAM,qBAAqB;AASlD;AACA;AACA,MAAMC,eAAe,GAAIC,QAAoB,IAAI;EAC/C,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,KAAK;;EAGd,OAAO,CAACJ,KAAK,CAACK,QAAQ,CAACC,OAAO,CAACF,QAAQ,CAAC,CACrCG,MAAM,CAAEC,EAAE,IACTR,KAAK,CAACS,cAAc,CAACD,EAAE,CAAC,CACzB,CACAE,IAAI,CAACF,EAAE,IAAIA,EAAE,CAACG,IAAI,CAACC,WAAW,KAAKV,gBAAgB,CAACU,WAAW,CAAC;AACrE,CAAC;AAED,MAAMC,kBAAkB,GAAIC,KAAY,IAAI;EAC1C,MAAM;MAAEV,QAAQ;MAAEW,KAAK,GAAG,SAAS;MAAEC,UAAU,GAAG;IAAS,IAAcF,KAAK;IAAdG,IAAI,GAAAC,MAAA,CAAKJ,KAAK,EAAxE,mCAAgE,CAAQ;EAE9E,OACEd,KAAA,CAAAmB,aAAA,YAAAC,MAAA,CAAAC,MAAA,KAAaJ,IAAI,GACfjB,KAAA,CAAAmB,aAAA,CAAClB,yBAAyB,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAER,KAAK;MAAEC;IAAU;EAAE,GAC7Db,eAAe,CAACC,QAAQ,CAAC,GACxBJ,KAAA,CAAAmB,aAAA,CAACjB,gBAAgB,QAAEE,QAAQ,CAAoB,GAE/CA,QACD,CACkC,CAC7B;AAEd,CAAC;AAEDS,kBAAkB,CAACD,WAAW,GAAG,oBAAoB;AAErDC,kBAAkB,CAACW,YAAY,GAAG;EAChCT,KAAK,EAAE,SAAS;EAChBC,UAAU,EAAE;CACb;AAED,eAAeH,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}