{"ast":null,"code":"module.exports = formatPretty;\nvar toHexadecimal = require('./to-hexadecimal');\nvar toDecimal = require('./to-decimal');\nvar toNamed = require('./to-named');\n\n// Encode `character` according to `options`.\nfunction formatPretty(code, next, options) {\n  var named;\n  var numeric;\n  var decimal;\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(code, next, options.omitOptionalSemicolons, options.attribute);\n  }\n  if (options.useShortestReferences || !named) {\n    numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);\n\n    // Use the shortest numeric reference when requested.\n    // A simple algorithm would use decimal for all code points under 100, as\n    // those are shorter than hexadecimal:\n    //\n    // * `&#99;` vs `&#x63;` (decimal shorter)\n    // * `&#100;` vs `&#x64;` (equal)\n    //\n    // However, because we take `next` into consideration when `omit` is used,\n    // And it would be possible that decimals are shorter on bigger values as\n    // well if `next` is hexadecimal but not decimal, we instead compare both.\n    if (options.useShortestReferences) {\n      decimal = toDecimal(code, next, options.omitOptionalSemicolons);\n      if (decimal.length < numeric.length) {\n        numeric = decimal;\n      }\n    }\n  }\n  return named && (!options.useShortestReferences || named.length < numeric.length) ? named : numeric;\n}","map":{"version":3,"names":["module","exports","formatPretty","toHexadecimal","require","toDecimal","toNamed","code","next","options","named","numeric","decimal","useNamedReferences","useShortestReferences","omitOptionalSemicolons","attribute","length"],"sources":["/home/marcucosmin3/bootcamp/w10/picasso/node_modules/stringify-entities/lib/util/format-smart.js"],"sourcesContent":["module.exports = formatPretty\n\nvar toHexadecimal = require('./to-hexadecimal')\nvar toDecimal = require('./to-decimal')\nvar toNamed = require('./to-named')\n\n// Encode `character` according to `options`.\nfunction formatPretty(code, next, options) {\n  var named\n  var numeric\n  var decimal\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  if (options.useShortestReferences || !named) {\n    numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n\n    // Use the shortest numeric reference when requested.\n    // A simple algorithm would use decimal for all code points under 100, as\n    // those are shorter than hexadecimal:\n    //\n    // * `&#99;` vs `&#x63;` (decimal shorter)\n    // * `&#100;` vs `&#x64;` (equal)\n    //\n    // However, because we take `next` into consideration when `omit` is used,\n    // And it would be possible that decimals are shorter on bigger values as\n    // well if `next` is hexadecimal but not decimal, we instead compare both.\n    if (options.useShortestReferences) {\n      decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n      if (decimal.length < numeric.length) {\n        numeric = decimal\n      }\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,YAAY;AAE7B,IAAIC,aAAa,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC/C,IAAIC,SAAS,GAAGD,OAAO,CAAC,cAAc,CAAC;AACvC,IAAIE,OAAO,GAAGF,OAAO,CAAC,YAAY,CAAC;;AAEnC;AACA,SAASF,YAAYA,CAACK,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;EACzC,IAAIC,KAAK;EACT,IAAIC,OAAO;EACX,IAAIC,OAAO;EAEX,IAAIH,OAAO,CAACI,kBAAkB,IAAIJ,OAAO,CAACK,qBAAqB,EAAE;IAC/DJ,KAAK,GAAGJ,OAAO,CACbC,IAAI,EACJC,IAAI,EACJC,OAAO,CAACM,sBAAsB,EAC9BN,OAAO,CAACO,SAAS,CAClB;EACH;EAEA,IAAIP,OAAO,CAACK,qBAAqB,IAAI,CAACJ,KAAK,EAAE;IAC3CC,OAAO,GAAGR,aAAa,CAACI,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAACM,sBAAsB,CAAC;;IAEnE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIN,OAAO,CAACK,qBAAqB,EAAE;MACjCF,OAAO,GAAGP,SAAS,CAACE,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAACM,sBAAsB,CAAC;MAE/D,IAAIH,OAAO,CAACK,MAAM,GAAGN,OAAO,CAACM,MAAM,EAAE;QACnCN,OAAO,GAAGC,OAAO;MACnB;IACF;EACF;EAEA,OAAOF,KAAK,KACT,CAACD,OAAO,CAACK,qBAAqB,IAAIJ,KAAK,CAACO,MAAM,GAAGN,OAAO,CAACM,MAAM,CAAC,GAC/DP,KAAK,GACLC,OAAO;AACb"},"metadata":{},"sourceType":"script","externalDependencies":[]}