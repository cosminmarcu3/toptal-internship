{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\nvar svg = require('property-information/svg');\nvar find = require('property-information/find');\nvar spaces = require('space-separated-tokens');\nvar commas = require('comma-separated-tokens');\nvar entities = require('stringify-entities');\nvar ccount = require('ccount');\nvar all = require('./all');\nvar constants = require('./constants');\nmodule.exports = serializeElement;\nfunction serializeElement(ctx, node, index, parent) {\n  var schema = ctx.schema;\n  var omit = schema.space === 'svg' ? false : ctx.omit;\n  var parts = [];\n  var selfClosing = schema.space === 'svg' ? ctx.closeEmpty : ctx.voids.indexOf(node.tagName.toLowerCase()) > -1;\n  var attrs;\n  var content;\n  var last;\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    ctx.schema = svg;\n  }\n  attrs = serializeAttributes(ctx, node.properties);\n  content = all(ctx, schema.space === 'html' && node.tagName === 'template' ? node.content : node);\n  ctx.schema = schema;\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false;\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '');\n    if (selfClosing && (schema.space === 'svg' || ctx.close)) {\n      last = attrs.charAt(attrs.length - 1);\n      if (!ctx.tightClose || last === '/' || schema.space === 'svg' && last && last !== '\"' && last !== \"'\") {\n        parts.push(' ');\n      }\n      parts.push('/');\n    }\n    parts.push('>');\n  }\n  parts.push(content);\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n  return parts.join('');\n}\nfunction serializeAttributes(ctx, props) {\n  var values = [];\n  var index = -1;\n  var key;\n  var value;\n  var last;\n  for (key in props) {\n    if (props[key] != null) {\n      value = serializeAttribute(ctx, key, props[key]);\n      if (value) values.push(value);\n    }\n  }\n  while (++index < values.length) {\n    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null;\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n  return values.join('');\n}\nfunction serializeAttribute(ctx, key, value) {\n  var info = find(ctx.schema, key);\n  var quote = ctx.quote;\n  var result;\n  var name;\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if (info.boolean || info.overloadedBoolean && typeof value !== 'string') {\n    value = Boolean(value);\n  }\n  if (value == null || value === false || typeof value === 'number' && value !== value) {\n    return '';\n  }\n  name = entities(info.attribute, xtend(ctx.entities, {\n    // Always encode without parse errors in non-HTML.\n    subset: constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]\n  }));\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n  // test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name;\n  value = typeof value === 'object' && 'length' in value ?\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  (info.commaSeparated ? commas.stringify : spaces.stringify)(value, {\n    padLeft: !ctx.tightLists\n  }) : String(value);\n  if (ctx.collapseEmpty && !value) return name;\n\n  // Check unquoted value.\n  if (ctx.unquoted) {\n    result = entities(value, xtend(ctx.entities, {\n      subset: constants.unquoted[ctx.valid][ctx.safe],\n      attribute: true\n    }));\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (ctx.smart && ccount(value, quote) > ccount(value, ctx.alternative)) {\n      quote = ctx.alternative;\n    }\n    result = quote + entities(value, xtend(ctx.entities, {\n      // Always encode without parse errors in non-HTML.\n      subset: (quote === \"'\" ? constants.single : constants.double)[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe],\n      attribute: true\n    })) + quote;\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result);\n}","map":{"version":3,"names":["xtend","require","svg","find","spaces","commas","entities","ccount","all","constants","module","exports","serializeElement","ctx","node","index","parent","schema","omit","space","parts","selfClosing","closeEmpty","voids","indexOf","tagName","toLowerCase","attrs","content","last","serializeAttributes","properties","opening","push","close","charAt","length","tightClose","closing","join","props","values","key","value","serializeAttribute","tight","info","quote","result","name","overloadedBoolean","attribute","boolean","Boolean","subset","valid","safe","commaSeparated","stringify","padLeft","tightLists","String","collapseEmpty","unquoted","smart","alternative","single","double"],"sources":["/home/marcucosmin3/bootcamp/w10/picasso/node_modules/hast-util-to-html/lib/element.js"],"sourcesContent":["'use strict'\n\nvar xtend = require('xtend')\nvar svg = require('property-information/svg')\nvar find = require('property-information/find')\nvar spaces = require('space-separated-tokens')\nvar commas = require('comma-separated-tokens')\nvar entities = require('stringify-entities')\nvar ccount = require('ccount')\nvar all = require('./all')\nvar constants = require('./constants')\n\nmodule.exports = serializeElement\n\nfunction serializeElement(ctx, node, index, parent) {\n  var schema = ctx.schema\n  var omit = schema.space === 'svg' ? false : ctx.omit\n  var parts = []\n  var selfClosing =\n    schema.space === 'svg'\n      ? ctx.closeEmpty\n      : ctx.voids.indexOf(node.tagName.toLowerCase()) > -1\n  var attrs\n  var content\n  var last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    ctx.schema = svg\n  }\n\n  attrs = serializeAttributes(ctx, node.properties)\n\n  content = all(\n    ctx,\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  ctx.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (selfClosing && (schema.space === 'svg' || ctx.close)) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !ctx.tightClose ||\n        last === '/' ||\n        (schema.space === 'svg' && last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\nfunction serializeAttributes(ctx, props) {\n  var values = []\n  var index = -1\n  var key\n  var value\n  var last\n\n  for (key in props) {\n    if (props[key] != null) {\n      value = serializeAttribute(ctx, key, props[key])\n      if (value) values.push(value)\n    }\n  }\n\n  while (++index < values.length) {\n    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\nfunction serializeAttribute(ctx, key, value) {\n  var info = find(ctx.schema, key)\n  var quote = ctx.quote\n  var result\n  var name\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value == null ||\n    value === false ||\n    (typeof value === 'number' && value !== value)\n  ) {\n    return ''\n  }\n\n  name = entities(\n    info.attribute,\n    xtend(ctx.entities, {\n      // Always encode without parse errors in non-HTML.\n      subset:\n        constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n  // test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  value =\n    typeof value === 'object' && 'length' in value\n      ? // `spaces` doesn’t accept a second argument, but it’s given here just to\n        // keep the code cleaner.\n        (info.commaSeparated ? commas.stringify : spaces.stringify)(value, {\n          padLeft: !ctx.tightLists\n        })\n      : String(value)\n\n  if (ctx.collapseEmpty && !value) return name\n\n  // Check unquoted value.\n  if (ctx.unquoted) {\n    result = entities(\n      value,\n      xtend(ctx.entities, {\n        subset: constants.unquoted[ctx.valid][ctx.safe],\n        attribute: true\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (ctx.smart && ccount(value, quote) > ccount(value, ctx.alternative)) {\n      quote = ctx.alternative\n    }\n\n    result =\n      quote +\n      entities(\n        value,\n        xtend(ctx.entities, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[\n            ctx.schema.space === 'html' ? ctx.valid : 1\n          ][ctx.safe],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}