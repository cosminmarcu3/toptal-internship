export declare const FormCompound: {
    <T extends import("final-form").AnyObject = import("final-form").AnyObject>(props: import("../Form").Props<T>): JSX.Element;
    defaultProps: {};
    displayName: string;
} & {
    Autocomplete: {
        (props: import("../Autocomplete/Autocomplete").Props): JSX.Element;
        displayName: string;
    };
    Input: import("react").ForwardRefExoticComponent<Pick<import("../Input").Props, keyof import("react-final-form").FieldProps<string | undefined, import("react-final-form").FieldRenderProps<string | undefined, HTMLInputElement, string | undefined>, HTMLInputElement, string | undefined>> & import("react").RefAttributes<HTMLInputElement>>;
    Select: {
        <T_1 extends import("@toptal/picasso").SelectValueType, M extends boolean = false>(props: import("../Select/Select").Props<T_1, M>): JSX.Element;
        defaultProps: {};
        displayName: string;
    };
    Radio: ({ name, ...rest }: import("../Radio/Radio").Props) => JSX.Element;
    ButtonRadio: {
        ({ name, ...rest }: import("../ButtonRadio/ButtonRadio").Props): JSX.Element;
        displayName: string;
    };
    RadioGroup: {
        (props: import("../RadioGroup").Props): JSX.Element;
        defaultProps: {};
        displayName: string;
    };
    Checkbox: {
        ({ name, value, required, label, defaultValue, ...restProps }: import("../Checkbox/Checkbox").Props): JSX.Element;
        displayName: string;
    };
    ButtonCheckbox: {
        ({ name, value, required, ...restProps }: import("../ButtonCheckbox/ButtonCheckbox").Props): JSX.Element;
        displayName: string;
    };
    CheckboxGroup: {
        (props: import("../CheckboxGroup").Props): JSX.Element;
        displayName: string;
    };
    NumberInput: {
        (props: import("../NumberInput/NumberInput").Props): JSX.Element;
        defaultProps: {};
        displayName: string;
    };
    FileInput: {
        (props: import("../FileInput/FileInput").Props): JSX.Element;
        defaultProps: {};
        displayName: string;
    };
    DatePicker: {
        (props: import("../DatePicker/DatePicker").Props): JSX.Element;
        defaultProps: {};
        displayName: string;
    };
    TimePicker: {
        (props: import("../TimePicker/TimePicker").Props): JSX.Element;
        displayName: string;
    };
    TagSelector: {
        (props: import("../TagSelector/TagSelector").Props): JSX.Element;
        displayName: string;
    };
    SubmitButton: {
        ({ buttonType, variant, ...restOfProps }: import("../SubmitButton").Props): JSX.Element;
        defaultProps: {
            buttonType: string;
        };
        displayName: string;
    };
    ConfigProvider: import("react").Provider<import("../FormConfig").FormConfigProps>;
    Switch: {
        (props: import("../Switch/Switch").Props): JSX.Element;
        defaultProps: {};
        displayName: string;
    };
    Rating: {
        readonly Stars: (props: import("../Rating/Rating").RatingStarsProps) => JSX.Element;
        readonly Thumbs: (props: import("../Rating/Rating").RatingThumbsProps) => JSX.Element;
    };
    Dropzone: {
        ({ dropzoneHint, ...props }: import("../Dropzone/Dropzone").Props): JSX.Element;
        defaultProps: {};
        displayName: string;
    };
    PasswordInput: {
        ({ validate, hideRequirements, ...rest }: import("../PasswordInput/PasswordInput").Props): JSX.Element;
        displayName: string;
    };
    FieldRequirements: {
        <TValueType>({ value, description, open, error, timeout, requirements, className, style, testIds, }: import("@toptal/picasso/src/FieldRequirements/FieldRequirements").Props<TValueType>): JSX.Element;
        defaultProps: {
            open: boolean;
            timeout: number;
            value: string;
        };
        displayName: string;
    };
    RichTextEditor: (props: import("../RichTextEditor/RichTextEditor").Props) => JSX.Element;
    AvatarUpload: {
        (props: import("@toptal/picasso").AvatarUploadProps & import("react-final-form").FieldProps<import("@toptal/picasso").AvatarUploadFileUpload | undefined, import("react-final-form").FieldRenderProps<import("@toptal/picasso").AvatarUploadFileUpload | undefined, HTMLInputElement, import("@toptal/picasso").AvatarUploadFileUpload | undefined>, HTMLInputElement, import("@toptal/picasso").AvatarUploadFileUpload | undefined> & import("@toptal/picasso-shared/src").TextLabelProps): JSX.Element;
        defaultProps: {};
        displayName: string;
    };
};
