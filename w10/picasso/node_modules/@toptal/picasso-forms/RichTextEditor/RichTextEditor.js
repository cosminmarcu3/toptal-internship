var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { RichTextEditor as PicassoRichTextEditor, } from '@toptal/picasso';
import React, { useCallback, useState } from 'react';
import { useForm } from 'react-final-form';
import InputField from '../InputField';
import FieldLabel from '../FieldLabel';
export const RichTextEditor = (props) => {
    const { onChange, defaultValue, label, titleCase } = props, rest = __rest(props, ["onChange", "defaultValue", "label", "titleCase"]);
    const [value, setValue] = useState('');
    const { mutators: { setHasMultilineCounter }, } = useForm();
    // Because RichTextEditor doesn't have an value input we need to implement this
    // as an compatibility layer between final-form
    const handleOnChange = useCallback((newVal) => {
        setValue(newVal);
        onChange === null || onChange === void 0 ? void 0 : onChange(newVal);
    }, [onChange, setValue]);
    const hiddenInputId = `${props.id}-hidden-input`;
    return (React.createElement(InputField, Object.assign({ value: value, onChange: handleOnChange, label: label ? (React.createElement(FieldLabel, { name: hiddenInputId, required: props.required, label: label, titleCase: titleCase })) : null, setHasMultilineCounter: setHasMultilineCounter }, rest), (inputProps) => (React.createElement(PicassoRichTextEditor, Object.assign({ defaultValue: defaultValue, hiddenInputId: hiddenInputId }, inputProps)))));
};
export default RichTextEditor;
//# sourceMappingURL=RichTextEditor.js.map