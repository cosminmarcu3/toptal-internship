var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { AvatarUpload as PicassoAvatarUpload, } from '@toptal/picasso';
import FieldLabel from '../FieldLabel';
import InputField from '../InputField';
const AvatarUpload = (props) => {
    // dropping 'src' value here out from 'rest'. 'src' value should be provided via form context
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { label, titleCase, src } = props, rest = __rest(props, ["label", "titleCase", "src"]);
    const handleDropAccepted = ({ acceptedFile, finalFormOnChange, }) => __awaiter(void 0, void 0, void 0, function* () {
        const reader = new FileReader();
        reader.readAsDataURL(acceptedFile);
        reader.onload = () => {
            // setting form value to the new file
            finalFormOnChange({ file: acceptedFile, src: reader.result });
        };
    });
    return (React.createElement(InputField, Object.assign({}, rest, { label: label ? (React.createElement(FieldLabel, { name: props.name, required: props.required, label: label, titleCase: titleCase })) : null }), inputProps => {
        var _a;
        return (React.createElement(PicassoAvatarUpload, Object.assign({}, inputProps, { src: (_a = inputProps.value) === null || _a === void 0 ? void 0 : _a.src, onDropAccepted: acceptedFile => handleDropAccepted({
                acceptedFile,
                finalFormOnChange: inputProps.onChange,
            }) })));
    }));
};
AvatarUpload.defaultProps = {};
AvatarUpload.displayName = 'AvatarUpload';
export default AvatarUpload;
//# sourceMappingURL=AvatarUpload.js.map