var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { NumberInput as PicassoNumberInput, } from '@toptal/picasso';
import { validators } from '../utils';
import FieldLabel from '../FieldLabel';
import InputField from '../InputField';
const MIN = -2147483648;
const MAX = 2147483647;
const { composeValidators } = validators;
export const NumberInput = (props) => {
    const { min = MIN, max = MAX, validate, label, titleCase } = props, rest = __rest(props, ["min", "max", "validate", "label", "titleCase"]);
    const validateNumberLimits = value => {
        if (Number(value) > max) {
            return `Must be less than or equal to ${max}.`;
        }
        if (Number(value) < min) {
            return `Must be greater than or equal to ${min}.`;
        }
    };
    return (React.createElement(InputField, Object.assign({}, rest, { validate: composeValidators([validateNumberLimits, validate]), label: label ? (React.createElement(FieldLabel, { name: props.name, required: props.required, label: label, titleCase: titleCase })) : null }), (inputProps) => {
        return React.createElement(PicassoNumberInput, Object.assign({}, inputProps));
    }));
};
NumberInput.defaultProps = {};
NumberInput.displayName = 'NumberInput';
export default NumberInput;
//# sourceMappingURL=NumberInput.js.map