export const getChangedFields = (newValues, existingValues, subscribedFields) => {
    if (!existingValues) {
        return {};
    }
    const keysArray = subscribedFields !== null && subscribedFields !== void 0 ? subscribedFields : Object.keys(newValues);
    const result = keysArray.reduce((changedFields, field) => {
        if (newValues[field] !== existingValues[field]) {
            changedFields[field] = true;
        }
        return changedFields;
    }, {});
    return result;
};
let oldValues = {};
const createFormValuesChangeDecorator = ({ onChange, subscribedFields, }) => {
    return (form) => {
        const unsubscribe = form.subscribe(nextState => {
            const changedFields = getChangedFields(nextState.values, oldValues, subscribedFields);
            if (Object.keys(changedFields).length > 0) {
                onChange(changedFields, nextState.values);
                oldValues = nextState.values;
            }
        }, { values: true });
        return () => {
            unsubscribe();
        };
    };
};
export default createFormValuesChangeDecorator;
//# sourceMappingURL=form-values-change-decorator.js.map