import { AnyObject, FormApi } from 'final-form';
export declare type ChangedFields<T extends AnyObject> = Partial<Record<keyof T, boolean>>;
export declare const getChangedFields: <T extends AnyObject>(newValues: T, existingValues?: T | undefined, subscribedFields?: (keyof T)[] | undefined) => Partial<Record<keyof T, boolean>>;
interface Props<T extends AnyObject> {
    onChange: (changedFields: ChangedFields<T>, values: T) => void;
    subscribedFields?: (keyof T)[];
}
declare const createFormValuesChangeDecorator: <T extends AnyObject>({ onChange, subscribedFields, }: Props<T>) => (form: FormApi<T, Partial<T>>) => () => void;
export default createFormValuesChangeDecorator;
