import { useEffect } from 'react';
import { useFormContext } from '../../Form/FormContext';
export const getFieldError = (meta, shouldValidateOnSubmit) => {
    if (shouldValidateOnSubmit && meta.modifiedSinceLastSubmit) {
        return null;
    }
    if (!meta.error && !meta.submitError) {
        return null;
    }
    if (!meta.touched) {
        return null;
    }
    if (meta.error) {
        return meta.error;
    }
    if (meta.dirtySinceLastSubmit) {
        return null;
    }
    return meta.submitError;
};
const useFieldValidation = ({ name, meta, validators, shouldValidateOnSubmit, }) => {
    const { setValidators, clearValidators } = useFormContext();
    useEffect(() => {
        if (shouldValidateOnSubmit) {
            setValidators(name, validators);
        }
        return () => {
            clearValidators(name);
        };
    }, [setValidators, clearValidators, validators, shouldValidateOnSubmit, name]);
    return getFieldError(meta, shouldValidateOnSubmit);
};
export default useFieldValidation;
//# sourceMappingURL=use-field-validation.js.map