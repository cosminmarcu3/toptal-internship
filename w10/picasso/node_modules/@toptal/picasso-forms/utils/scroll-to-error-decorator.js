var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { scrollTo } from './scroll-to';
const getErrorField = () => document.querySelector('[data-field-has-error="true"]');
const getErrorFieldAfterNextPaint = () => new Promise(resolve => {
    const resolveField = () => resolve(getErrorField());
    if (typeof requestAnimationFrame === 'undefined') {
        setTimeout(resolveField, 16);
    }
    else {
        requestAnimationFrame(resolveField);
    }
});
const getErrorFieldWithRetries = () => __awaiter(void 0, void 0, void 0, function* () {
    for (let index = 0; index < 3; index++) {
        const field = yield getErrorFieldAfterNextPaint();
        if (field) {
            return field;
        }
    }
});
let state = {};
export default ({ disableScrollOnError } = {}) => (form) => {
    const originalSubmit = form.submit;
    const unsubscribe = form.subscribe(nextState => {
        state = nextState;
    }, { errors: true, submitErrors: true });
    const scrollOnErrors = () => __awaiter(void 0, void 0, void 0, function* () {
        const { errors = {}, submitErrors = {} } = state;
        if (Object.keys(errors).length || Object.keys(submitErrors).length) {
            const field = yield getErrorFieldWithRetries();
            if (field) {
                scrollTo(field);
            }
        }
    });
    // Rewrite submit function
    form.submit = () => {
        const result = originalSubmit.call(form);
        if (disableScrollOnError) {
            return result;
        }
        if (result && typeof result.then === 'function') {
            result.then(scrollOnErrors).catch(() => { });
        }
        else {
            scrollOnErrors();
        }
        return result;
    };
    return () => {
        state = {};
        unsubscribe();
        form.submit = originalSubmit;
    };
};
//# sourceMappingURL=scroll-to-error-decorator.js.map