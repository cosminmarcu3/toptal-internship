var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { useCallback, useMemo, useState } from 'react';
import { debounce } from 'debounce';
import createFormValuesChangeDecorator from '../form-values-change-decorator';
const useFormAutoSave = (props) => {
    const [savingFields, setSavingFields] = useState();
    const { onFormValuesChange, subscribedFields, debounceDelay: delay = 1000, } = props;
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const handleValueChange = useCallback(debounce((changedValues, debouncedValues) => __awaiter(void 0, void 0, void 0, function* () {
        yield onFormValuesChange(changedValues, debouncedValues);
        setSavingFields(undefined);
    }), delay), [delay, onFormValuesChange]);
    const handleFormValuesChange = useCallback((changedFields, values) => {
        setSavingFields(changedFields);
        handleValueChange(changedFields, values);
    }, [handleValueChange]);
    const autoSaveDecorator = useMemo(() => createFormValuesChangeDecorator({
        subscribedFields,
        onChange: handleFormValuesChange,
    }), [handleFormValuesChange, subscribedFields]);
    return {
        savingFields,
        autoSaveDecorator,
    };
};
export default useFormAutoSave;
//# sourceMappingURL=use-form-auto-save.js.map