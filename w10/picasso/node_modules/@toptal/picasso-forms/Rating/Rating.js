var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Rating as PicassoRating, } from '@toptal/picasso';
import PicassoField from '../Field';
import FieldLabel from '../FieldLabel';
import { validators } from '../utils';
const Stars = (props) => {
    const { label, titleCase } = props, rest = __rest(props, ["label", "titleCase"]);
    return (React.createElement(PicassoField, Object.assign({}, rest, { type: 'number', label: label ? (React.createElement(FieldLabel, { name: props.name, required: props.required, label: label, titleCase: titleCase })) : null }), inputProps => React.createElement(PicassoRating.Stars, Object.assign({}, inputProps))));
};
/*
 * The default required validator gives an error when the value is false, this
 * makes sense for checkboxes and similar controls, with the Thumbs component
 * however, it is expected to return false as the thumbs down option. We are
 * overriding the default required validation to only give an error on
 * null/undefined values.
 *
 * We still have an requiredPositive prop in case you need to have the default
 * behavior and requires a thumbs up for whatever reason.
 */
const thumbsRequired = (value) => value == null ? validators.required(null) : undefined;
const Thumbs = (props) => {
    const { required, validate, requirePositive, label, titleCase } = props, rest = __rest(props, ["required", "validate", "requirePositive", "label", "titleCase"]);
    const validateOverride = validators.composeValidators([
        required && !requirePositive ? thumbsRequired : undefined,
        validate,
    ]);
    return (React.createElement(PicassoField, Object.assign({ validate: validateOverride, required: requirePositive }, rest, { label: label ? (React.createElement(FieldLabel, { name: props.name, required: props.required, label: label, titleCase: titleCase })) : null }), inputProps => React.createElement(PicassoRating.Thumbs, Object.assign({}, inputProps))));
};
export const Rating = {
    Stars,
    Thumbs,
};
export default Rating;
//# sourceMappingURL=Rating.js.map