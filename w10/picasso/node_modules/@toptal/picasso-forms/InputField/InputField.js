var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { useField } from 'react-final-form';
import Field from '../Field';
import { useFormConfig } from '../FormConfig';
import useFormInputReset from '../utils/use-form-input-reset';
export const getInputStatus = (meta, formConfig) => {
    if (formConfig.validateOnSubmit && meta.modifiedSinceLastSubmit) {
        return 'default';
    }
    if (!meta.touched) {
        return 'default';
    }
    if (meta.error) {
        return 'error';
    }
    if (!meta.dirtySinceLastSubmit && meta.submitError) {
        return 'error';
    }
    return formConfig.showValidState ? 'success' : 'default';
};
const InputField = (props) => {
    const { name, children, enableReset, onResetClick } = props, rest = __rest(props, ["name", "children", "enableReset", "onResetClick"]);
    const { meta, input } = useField(name);
    const formConfig = useFormConfig();
    const status = getInputStatus(meta, formConfig);
    const onFormInputResetClick = useFormInputReset({
        input,
        enableReset,
        onResetClick,
    });
    return (React.createElement(Field, Object.assign({ status: status, name: name, onResetClick: onFormInputResetClick, enableReset: enableReset }, rest), children));
};
InputField.defaultProps = {};
InputField.displayName = 'InputField';
export default InputField;
//# sourceMappingURL=InputField.js.map