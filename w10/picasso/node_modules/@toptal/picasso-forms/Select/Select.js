var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Select as PicassoSelect, } from '@toptal/picasso';
import { generateRandomStringOrGetEmptyInTest } from '@toptal/picasso/utils';
import InputField from '../InputField';
import FieldLabel from '../FieldLabel';
export const Select = (props) => {
    const { name, id = name, label, titleCase } = props, rest = __rest(props, ["name", "id", "label", "titleCase"]);
    const randomizedId = id ? generateRandomStringOrGetEmptyInTest(id) : undefined;
    return (React.createElement(InputField, Object.assign({}, rest, { name: name, id: randomizedId, label: label ? (React.createElement(FieldLabel, { name: randomizedId, required: rest.required, label: label, titleCase: titleCase })) : null }), (selectProps) => {
        return (React.createElement(PicassoSelect, Object.assign({}, selectProps, { id: randomizedId, 
            // if `id` is specified, we have to provide a not correct value for autoComplete, e.g. `none` to trick google chrome
            autoComplete: id ? 'none' : rest.autoComplete || 'off' })));
    }));
};
Select.defaultProps = {};
Select.displayName = 'Select';
export default Select;
//# sourceMappingURL=Select.js.map