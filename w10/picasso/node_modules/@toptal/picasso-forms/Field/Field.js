var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _a;
import React, { useMemo } from 'react';
import { useField, } from 'react-final-form';
import { Form as PicassoForm } from '@toptal/picasso';
import { detect } from 'detect-browser';
import { useFormConfig } from '../FormConfig';
import { validators, useFieldValidation } from '../utils';
const { composeValidators, required: requiredValidator } = validators;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getValidators = (required, validate) => {
    if (required && validate) {
        return composeValidators([requiredValidator, validate]);
    }
    if (required && !validate) {
        return requiredValidator;
    }
    return validate;
};
const isFirefox = ((_a = detect()) === null || _a === void 0 ? void 0 : _a.name) === 'firefox';
const Field = (props) => {
    var _a;
    const { type, hint, label, required, 'data-testid': dataTestId, renderFieldRequirements, status, 
    // FieldProps - https://final-form.org/docs/react-final-form/types/FieldProps
    afterSubmit, allowNull, beforeSubmit, children, data, defaultValue, format, formatOnBlur, initialValue, isEqual, name, id = name, parse, subscription, validate, validateFields, value, autoSaveIndicator } = props, rest = __rest(props, ["type", "hint", "label", "required", 'data-testid', "renderFieldRequirements", "status", "afterSubmit", "allowNull", "beforeSubmit", "children", "data", "defaultValue", "format", "formatOnBlur", "initialValue", "isEqual", "name", "id", "parse", "subscription", "validate", "validateFields", "value", "autoSaveIndicator"]);
    const { validateOnSubmit: shouldValidateOnSubmit } = useFormConfig();
    const validators = useMemo(() => getValidators(required, validate), [required, validate]);
    const { meta, input } = useField(name, {
        validate: shouldValidateOnSubmit ? undefined : validators,
        type,
        afterSubmit,
        allowNull,
        beforeSubmit,
        data,
        defaultValue,
        format,
        formatOnBlur,
        initialValue,
        isEqual,
        parse,
        subscription,
        validateFields,
        value,
    });
    const error = useFieldValidation({
        name,
        meta,
        validators,
        shouldValidateOnSubmit,
    });
    const childProps = Object.assign(Object.assign(Object.assign({ id,
        status }, rest), input), { 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        onChange: (event) => {
            if (isFirefox && (event === null || event === void 0 ? void 0 : event.target)) {
                /**
                 * The fix for autofill in Firefox, it's taken from:
                 * https://github.com/facebook/react/issues/18986#issuecomment-636354428
                 * https://github.com/facebook/react/issues/15739
                 */
                Object.defineProperty(event.target, 'defaultValue', {
                    configurable: true,
                    get() {
                        return defaultValue !== null && defaultValue !== void 0 ? defaultValue : '';
                    },
                    set() { },
                });
            }
            input.onChange(event);
            if (rest.onChange) {
                rest.onChange(event);
            }
        }, onBlur: (event) => {
            input.onBlur(event);
            if (rest.onBlur) {
                rest.onBlur(event);
            }
        }, onFocus: (event) => {
            input.onFocus(event);
            if (rest.onFocus) {
                rest.onFocus(event);
            }
        } });
    return (React.createElement(PicassoForm.Field, { error: error, hint: hint, "data-testid": dataTestId, fieldRequirements: renderFieldRequirements === null || renderFieldRequirements === void 0 ? void 0 : renderFieldRequirements({
            value: input.value,
            error: status === 'error',
        }), autoSaveIndicator: autoSaveIndicator, hasMultilineCounter: (_a = meta.data) === null || _a === void 0 ? void 0 : _a.hasMultilineCounter },
        label,
        children(childProps)));
};
Field.defaultProps = {};
Field.displayName = 'Field';
export default Field;
//# sourceMappingURL=Field.js.map