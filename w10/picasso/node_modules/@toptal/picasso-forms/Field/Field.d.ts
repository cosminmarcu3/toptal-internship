import React from 'react';
import { FieldProps as FinalFieldProps, FieldRenderProps } from 'react-final-form';
import { OutlinedInputStatus } from '@toptal/picasso';
import { TextLabelProps } from '@toptal/picasso-shared';
import { ValueType, IFormComponentProps } from '../FieldBase';
export declare type FieldProps<TInputValue> = FinalFieldProps<TInputValue, FieldRenderProps<TInputValue, HTMLInputElement>, HTMLInputElement> & TextLabelProps;
export declare type Props<TWrappedComponentProps extends IFormComponentProps, TInputValue> = TWrappedComponentProps & FieldProps<TInputValue> & {
    name: string;
    type?: string;
    label?: React.ReactNode;
    status?: OutlinedInputStatus;
    children: (props: any) => React.ReactNode;
    renderFieldRequirements?: (props: {
        value?: TInputValue;
        error?: boolean;
    }) => React.ReactNode;
};
declare const Field: {
    <TWrappedComponentProps extends IFormComponentProps, TInputValue extends ValueType = TWrappedComponentProps["value"]>(props: Props<TWrappedComponentProps, TInputValue>): JSX.Element;
    defaultProps: {};
    displayName: string;
};
export default Field;
