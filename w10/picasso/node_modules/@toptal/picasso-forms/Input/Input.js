var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useEffect } from 'react';
import { Input as PicassoInput } from '@toptal/picasso';
import { useForm } from 'react-final-form';
import FieldLabel from '../FieldLabel';
import InputField from '../InputField';
const warnAutocompleteDisabledInput = (name) => {
    const autocompleteDisabled = name && /^(((field|input)(_|-)?\d+)|tan|otp|title|captcha)$/.test(name);
    if (autocompleteDisabled) {
        console.warn(`
In Chromium-based browsers, autocomplete might be disabled for input[name="${name}"].
Known bug: https://bugs.chromium.org/p/chromium/issues/detail?id=1255609
    `);
    }
};
export const Input = React.forwardRef((props, ref) => {
    useEffect(() => {
        // TODO: remove this console.warn completely when Chrome fixes autocomplete issue
        // Regex is taken from https://source.chromium.org/chromium/chromium/src/+/main:components/autofill/core/browser/autocomplete_history_manager.cc;l=53;drc=1d2260f9ed19c755db1631b7fb9b1ba216b323dc
        // according to https://bugs.chromium.org/p/chromium/issues/detail?id=1255609
        warnAutocompleteDisabledInput(props.name);
    }, [props.name]);
    const { mutators: { setHasMultilineCounter }, } = useForm();
    const { label, titleCase } = props, rest = __rest(props, ["label", "titleCase"]);
    return (React.createElement(InputField, Object.assign({}, rest, { setHasMultilineCounter: setHasMultilineCounter, label: label ? (React.createElement(FieldLabel, { name: props.name, required: props.required, label: label, titleCase: titleCase })) : null }), (inputProps) => React.createElement(PicassoInput, Object.assign({}, inputProps, { ref: ref }))));
});
Input.defaultProps = {};
Input.displayName = 'Input';
export default Input;
//# sourceMappingURL=Input.js.map