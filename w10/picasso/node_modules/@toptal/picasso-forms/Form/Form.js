var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useMemo, useRef } from 'react';
import { Form as FinalForm, } from 'react-final-form';
import { getIn, setIn } from 'final-form';
import { useNotifications } from '@toptal/picasso/utils';
import { createScrollToErrorDecorator } from '../utils';
import { FormContext, createFormContext, } from './FormContext';
import FormRenderer from './FormRenderer';
import { setActiveFieldTouched, setHasMultilineCounter } from './mutators';
const getValidationErrors = (validators, formValues, form) => {
    let errors;
    Object.entries(validators).forEach(([key, validator]) => {
        const fieldValue = getIn(formValues, key);
        const fieldMetaState = form.getFieldState(key);
        if (!validator) {
            return;
        }
        const error = validator(fieldValue, formValues, fieldMetaState);
        if (error) {
            errors = setIn(errors || {}, key, error);
        }
    });
    return errors;
};
export const Form = (props) => {
    const { autoComplete, children, disableScrollOnError, onSubmit, successSubmitMessage, failedSubmitMessage, decorators = [], mutators = {}, validateOnBlur, 'data-testid': dataTestId } = props, rest = __rest(props, ["autoComplete", "children", "disableScrollOnError", "onSubmit", "successSubmitMessage", "failedSubmitMessage", "decorators", "mutators", "validateOnBlur", 'data-testid']);
    const { showSuccess, showError } = useNotifications();
    const scrollToErrorDecorator = useMemo(() => createScrollToErrorDecorator({
        disableScrollOnError,
    }), [disableScrollOnError]);
    const validationObject = useRef(createFormContext());
    const showSuccessNotification = () => {
        if (!successSubmitMessage) {
            return;
        }
        showSuccess(successSubmitMessage);
    };
    const showErrorNotification = (errors) => {
        if (typeof errors === 'string') {
            showError(errors, undefined, { persist: true });
            return;
        }
        if (!failedSubmitMessage) {
            return;
        }
        showError(failedSubmitMessage, undefined, { persist: true });
    };
    const handleSubmit = (values, form, callback) => __awaiter(void 0, void 0, void 0, function* () {
        const validationErrors = getValidationErrors(validationObject.current.getValidators(), values, form);
        if (validationErrors) {
            return validationErrors;
        }
        const submissionErrors = yield onSubmit(values, form, callback);
        if (!submissionErrors) {
            showSuccessNotification();
        }
        else {
            showErrorNotification(submissionErrors);
        }
        return submissionErrors;
    });
    return (React.createElement(FormContext.Provider, { value: validationObject },
        React.createElement(FinalForm, Object.assign({ render: ({ form, handleSubmit: handleFormRendererSubmit }) => (React.createElement(FormRenderer, { autoComplete: autoComplete, "data-testid": dataTestId, onSubmit: handleFormRendererSubmit, validateOnBlur: validateOnBlur, setActiveFieldTouched: form.mutators.setActiveFieldTouched }, children)), onSubmit: handleSubmit, decorators: [...decorators, scrollToErrorDecorator], mutators: Object.assign(Object.assign({}, mutators), { setActiveFieldTouched,
                setHasMultilineCounter }), validateOnBlur: validateOnBlur }, rest))));
};
Form.defaultProps = {};
Form.displayName = 'Form';
export default Form;
//# sourceMappingURL=Form.js.map