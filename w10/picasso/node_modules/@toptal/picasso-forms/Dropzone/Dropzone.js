var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Dropzone as PicassoDropzone } from '@toptal/picasso';
import PicassoField from '../Field';
import FieldLabel from '../FieldLabel';
const Dropzone = (_a) => {
    var { dropzoneHint } = _a, props = __rest(_a, ["dropzoneHint"]);
    const handleDrop = ({ acceptedFiles, value = [], finalFormOnChange, }) => {
        if (!acceptedFiles.length) {
            return;
        }
        const newFiles = Array.from(acceptedFiles).map(file => ({
            file,
            uploading: false,
        }));
        finalFormOnChange([...value, ...newFiles]);
    };
    const handleRemove = ({ fileIndex, value = [], finalFormOnChange, }) => {
        const updatedFiles = value.filter((_, index) => index !== fileIndex);
        finalFormOnChange(updatedFiles);
    };
    return (React.createElement(PicassoField, Object.assign({ hideErrors: true }, props, { label: React.createElement(FieldLabel, { name: props.name, required: props.required, label: props.label, titleCase: props.titleCase }) }), inputProps => (React.createElement(PicassoDropzone, Object.assign({}, inputProps, { hint: dropzoneHint, onDropAccepted: acceptedFiles => {
            handleDrop({
                acceptedFiles,
                value: inputProps.value,
                finalFormOnChange: inputProps.onChange,
            });
        }, onRemove: (_fileName, index) => {
            handleRemove({
                fileIndex: index,
                value: inputProps.value,
                finalFormOnChange: inputProps.onChange,
            });
        } })))));
};
Dropzone.defaultProps = {};
Dropzone.displayName = 'Dropzone';
export default Dropzone;
//# sourceMappingURL=Dropzone.js.map