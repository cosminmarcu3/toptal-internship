import { CSSProperties, AnchorHTMLAttributes, ButtonHTMLAttributes, ElementType, ComponentPropsWithRef } from 'react';
import { Classes } from './styles';
export interface BaseProps {
    /** Classnames applied to root element */
    className?: string;
    /** Style applied to root element */
    style?: CSSProperties;
    'data-testid'?: string;
}
export interface JssProps {
    classes: Classes;
}
export interface TextLabelProps {
    /** Defines if the text should be transformed to title case */
    titleCase?: boolean;
}
export declare type StandardProps = BaseProps & Partial<JssProps>;
export declare type OmitInternalProps<T, K = ''> = Pick<T, Exclude<keyof T, keyof JssProps | K>>;
declare type PropsWithOverridableAs<T extends ElementType, P> = Omit<P, 'as'> & {
    as?: T;
} & ComponentPropsWithRef<T>;
interface NamedComponent<P> {
    defaultProps?: Partial<P>;
    displayName?: string;
}
export interface OverridableComponent<P = {}> extends NamedComponent<P> {
    <T extends ElementType = ElementType<Omit<P, 'as'>>>(props: PropsWithOverridableAs<T, P>): JSX.Element | null;
}
declare type Sizes = 'xxsmall' | 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
declare type BaseEnvironments = 'development' | 'staging' | 'production';
declare type Environments = BaseEnvironments | 'temploy' | 'test';
/** T parameter is needed to extend BaseEnvironments with 'temploy' or 'test' */
export declare type EnvironmentType<T extends Environments = BaseEnvironments> = T | BaseEnvironments;
export declare type SizeType<T extends Sizes> = T;
export declare type SpacingType = number | SizeType<'xsmall' | 'small' | 'medium' | 'large' | 'xlarge'>;
export declare enum SpacingEnum {
    xsmall = 0.5,
    small = 1,
    medium = 1.5,
    large = 2,
    xlarge = 2.5
}
export declare const spacingToRem: (spacing: SpacingType) => string;
export declare type ButtonOrAnchorProps = AnchorHTMLAttributes<HTMLAnchorElement> & ButtonHTMLAttributes<HTMLButtonElement>;
export declare type ColorType = 'green' | 'red' | 'yellow' | 'light-grey' | 'grey' | 'grey-main-2' | 'dark-grey' | 'black' | 'light-blue' | 'inherit';
export interface TransitionProps {
    onExited?: (node: HTMLElement) => void;
    timeout?: number | {
        enter?: number;
        exit?: number;
        appear?: number;
    };
}
export {};
