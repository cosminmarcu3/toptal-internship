import { BreakpointValues } from '@material-ui/core/styles/createBreakpoints';
declare type BreakpointKeys = 'small' | 'medium' | 'large' | 'extra-large';
declare type BreakpointsList = {
    [key: string]: number;
};
declare class BreakpointProvider {
    breakpoints: Record<'values', BreakpointValues>;
    mediaQueries: {
        [key: string]: string;
    };
    constructor();
    disableMobileBreakpoints(): void;
}
export declare const PicassoBreakpoints: BreakpointProvider;
export declare const breakpointsList: BreakpointsList;
export declare const screens: (...sizes: BreakpointKeys[]) => string;
export declare const isScreenSize: (size: keyof BreakpointsList, currentSize?: number) => boolean;
export declare const useScreenSize: () => number;
export declare const useBreakpoint: (sizes: BreakpointKeys[] | BreakpointKeys) => boolean;
/**
 * Returns a function that picks a value from a {screenSize=>anyValue} object map.
 *
 * The function returned accepts 2 arguments:
 * 1. An object mapping values to screen size nicknames, e.g.
 *   {small: 'secondary', large: 'positive'}
 * 2. A default value to use if no keys match in the object
 *
 * The function returns a value from the first argument that corresponds to the current
 * screen size, or the default value, if no corresponding key found.
 *
 * The returned function is memoized per screen size name.
 *
 * @example <caption>Varying both `variant` prop and button text with using the hook</caption>
 * const screens = useScreens()
 * <Button
 *   variant={screens(
 *     {
 *       small: 'secondary',
 *       large: 'positive'
 *     },
 *     'primary'
 *   )}
 * >
 * {screens(
 *   {
 *     small: 'small (secondary)',
 *     large: 'large (positive)'
 *   },
 *   'default (primary)'
 * )}
 * </Button>
 */
export declare const useScreens: <T = unknown>() => (valuesByScreen: Partial<Record<BreakpointKeys, T>>, defaultValue?: T | undefined) => T | undefined;
declare const _default: Record<"values", BreakpointValues>;
export default _default;
