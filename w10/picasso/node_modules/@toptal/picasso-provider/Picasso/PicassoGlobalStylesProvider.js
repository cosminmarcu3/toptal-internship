import React, { useRef, useState, useCallback, } from 'react';
import { RootContext } from './RootContext';
const PicassoGlobalStylesProvider = (props) => {
    const { children, RootComponent, environment, titleCase, disableTransitions, } = props;
    const [picassoRootMounted, setPicassoRootMounted] = useState(false);
    const rootRef = useRef(null);
    const [contextValue, setContextValue] = useState({
        rootRef,
        hasTopBar: false,
        setHasTopBar: (hasTopBar) => {
            setContextValue(Object.assign(Object.assign({}, contextValue), { hasTopBar }));
        },
        environment,
        titleCase,
        hasDrawer: false,
        setHasDrawer: (hasDrawer) => {
            setContextValue(Object.assign(Object.assign({}, contextValue), { hasDrawer }));
        },
        hasSidebar: false,
        setHasSidebar: (hasSidebar) => {
            setContextValue(Object.assign(Object.assign({}, contextValue), { hasSidebar }));
        },
        disableTransitions,
    });
    const setRootRef = useCallback((ref) => {
        rootRef.current = ref;
        setPicassoRootMounted(true);
    }, [setPicassoRootMounted]);
    return (React.createElement(RootComponent, { ref: setRootRef },
        React.createElement(RootContext.Provider, { value: contextValue }, picassoRootMounted && children)));
};
export default PicassoGlobalStylesProvider;
//# sourceMappingURL=PicassoGlobalStylesProvider.js.map