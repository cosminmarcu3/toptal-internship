import { MuiThemeProvider, StylesProvider, createGenerateClassName, } from '@material-ui/core/styles';
import React from 'react';
import CssBaseline from '../../CssBaseline';
import { generateRandomStringOrGetEmptyInTest } from '../utils';
import { PicassoBreakpoints } from '../config';
import PicassoProvider from '../PicassoProvider';
import PicassoRootNode from '../PicassoRootNode';
import PicassoGlobalStylesProvider from '../PicassoGlobalStylesProvider';
const PicassoLight = ({ reset, responsive, environment = 'development', children, RootComponent = PicassoRootNode, titleCase, theme, disableTransitions, disableClassNamePrefix, injectFirst, }) => {
    if (theme) {
        PicassoProvider.extendTheme(theme);
    }
    if (!responsive) {
        PicassoProvider.disableResponsiveStyle();
        PicassoBreakpoints.disableMobileBreakpoints();
    }
    const generateClassName = createGenerateClassName({
        // if there are multiples instances of Picasso
        // on the page we want each set of styles to be unique
        seed: disableClassNamePrefix ? '' : generateRandomStringOrGetEmptyInTest(),
    });
    return (React.createElement(StylesProvider, { generateClassName: generateClassName, injectFirst: injectFirst },
        React.createElement(MuiThemeProvider, { theme: PicassoProvider.theme },
            React.createElement(PicassoGlobalStylesProvider, { RootComponent: RootComponent, environment: environment, titleCase: titleCase, disableTransitions: disableTransitions },
                reset && React.createElement(CssBaseline, null),
                children))));
};
PicassoLight.defaultProps = {
    environment: 'development',
    responsive: true,
    reset: true,
    injectFirst: undefined,
    RootComponent: PicassoRootNode,
};
export default PicassoLight;
//# sourceMappingURL=PicassoLight.js.map