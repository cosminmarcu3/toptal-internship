import { MuiThemeProvider, StylesProvider, createGenerateClassName, } from '@material-ui/core/styles';
import React from 'react';
import CssBaseline from '../CssBaseline';
import FontsLoader from './FontsLoader';
import HelmetProvider from './HelmetProvider';
import NotificationsProvider from './NotificationsProvider';
import Favicon from '../Favicon';
import { generateRandomStringOrGetEmptyInTest } from './utils';
import { PicassoBreakpoints } from './config';
import PicassoProvider from './PicassoProvider';
import FixViewport from './FixViewport';
import PicassoGlobalStylesProvider from './PicassoGlobalStylesProvider';
import PicassoRootNode from './PicassoRootNode';
const Picasso = ({ loadFonts, loadFavicon, reset, responsive, environment = 'development', children, fixViewport, notificationContainer, RootComponent = PicassoRootNode, titleCase, theme, disableHelmet, disableTransitions, disableClassNamePrefix, injectFirst, }) => {
    if (theme) {
        PicassoProvider.extendTheme(theme);
    }
    if (!responsive) {
        PicassoProvider.disableResponsiveStyle();
        PicassoBreakpoints.disableMobileBreakpoints();
    }
    const generateClassName = createGenerateClassName({
        // if there are multiples instances of Picasso
        // on the page we want each set of styles to be unique
        seed: disableClassNamePrefix ? '' : generateRandomStringOrGetEmptyInTest(),
    });
    return (React.createElement(StylesProvider, { generateClassName: generateClassName, injectFirst: injectFirst },
        React.createElement(MuiThemeProvider, { theme: PicassoProvider.theme },
            React.createElement(PicassoGlobalStylesProvider, { RootComponent: RootComponent, environment: environment, titleCase: titleCase, disableTransitions: disableTransitions },
                React.createElement(HelmetProvider, { disabled: disableHelmet },
                    fixViewport && React.createElement(FixViewport, null),
                    loadFonts && React.createElement(FontsLoader, null),
                    reset && React.createElement(CssBaseline, null),
                    loadFavicon && React.createElement(Favicon, { environment: environment }),
                    React.createElement(NotificationsProvider, { container: notificationContainer }, children))))));
};
Picasso.defaultProps = {
    environment: 'development',
    loadFonts: true,
    loadFavicon: true,
    responsive: true,
    reset: true,
    fixViewport: true,
    injectFirst: undefined,
    RootComponent: PicassoRootNode,
};
export default Picasso;
//# sourceMappingURL=Picasso.js.map