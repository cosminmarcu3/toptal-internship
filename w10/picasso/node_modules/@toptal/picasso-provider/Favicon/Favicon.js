var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React, { useEffect } from 'react';
// we could use Page.Head instead, but it required PicassoProvider to be initialized
// so it led to cross dependencies and error
import { Helmet } from 'react-helmet-async';
import useSafeState from '@toptal/picasso/utils/use-safe-state';
import unsafeErrorLog from '@toptal/picasso/utils/unsafe-error-log';
import { getIcons } from './icons';
import { useAppConfig } from '../Picasso/RootContext';
export const Favicon = ({ environment }) => {
    const [icons, setIcons] = useSafeState({});
    const { environment: configEnvironment } = useAppConfig();
    const resolvedEnvironment = environment || configEnvironment;
    useEffect(() => {
        if (resolvedEnvironment === 'test') {
            return;
        }
        const loadIcons = () => __awaiter(void 0, void 0, void 0, function* () {
            try {
                const loadedIcons = yield getIcons(resolvedEnvironment);
                setIcons(loadedIcons);
            }
            catch (_a) {
                unsafeErrorLog('favicons were not loaded properly for environment' +
                    resolvedEnvironment);
            }
        });
        loadIcons();
    }, [resolvedEnvironment, setIcons]);
    if (resolvedEnvironment === 'test') {
        // do not load favicons in tests (e.g. in e2e)
        return null;
    }
    const { icon16, icon32, icon180 } = icons;
    // favicon.ico will be loaded automatically by browser from "public" folder
    // if it exists there. It's needed only for old browsers
    // we don't have to specify it in the head
    return (React.createElement(Helmet, null,
        React.createElement("link", { rel: 'apple-touch-icon', sizes: '180x180', href: icon180 }),
        React.createElement("link", { rel: 'icon', type: 'image/png', sizes: '32x32', href: icon32 }),
        React.createElement("link", { rel: 'icon', type: 'image/png', sizes: '16x16', href: icon16 })));
};
Favicon.defaultProps = {};
Favicon.displayName = 'Favicon';
export default Favicon;
//# sourceMappingURL=Favicon.js.map