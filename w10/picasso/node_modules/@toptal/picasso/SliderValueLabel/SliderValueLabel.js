import React, { useRef } from 'react';
import Tooltip from '../Tooltip';
import { useSliderContext } from '../Slider/SliderContext';
const SliderValueLabel = ({ tooltip, disablePortal, compact, children, open, value, valueLabelDisplay, index, }) => {
    const thumbRef = useRef(null);
    const { registerValueLabel, hasTooltipOverlow } = useSliderContext();
    const isTooltipAlwaysVisible = tooltip === 'on';
    if (valueLabelDisplay === 'off') {
        return children;
    }
    const getPlacement = () => {
        if (hasTooltipOverlow) {
            return index === 0 ? 'top-end' : 'top-start';
        }
        return 'top';
    };
    const handleTooltipRef = (tooltipElement) => {
        // At this moment, both thumb and tooltip refs are set so we can register them in the context
        const thumbElement = thumbRef.current;
        if (tooltipElement && thumbElement) {
            registerValueLabel(index, tooltipElement, thumbElement);
        }
    };
    return (React.createElement(Tooltip, { ref: thumbRef, tooltipRef: handleTooltipRef, content: value, open: open || valueLabelDisplay === 'on', placement: getPlacement(), preventOverflow: isTooltipAlwaysVisible, disablePortal: disablePortal, compact: compact }, children));
};
export default SliderValueLabel;
//# sourceMappingURL=SliderValueLabel.js.map