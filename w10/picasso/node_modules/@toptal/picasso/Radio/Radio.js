var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { Radio as MUIRadio } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import FormControlLabel from '../FormControlLabel';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'Radio',
});
// eslint-disable-next-line react/display-name
export const Radio = forwardRef(function Radio(props, ref) {
    const { className, style, label, checked, disabled, value, onChange, titleCase } = props, rest = __rest(props, ["className", "style", "label", "checked", "disabled", "value", "onChange", "titleCase"]);
    const classes = useStyles(props);
    const rootClasses = {
        root: classes.root,
        disabled: classes.disabled,
    };
    const muiRadio = (React.createElement(MUIRadio, Object.assign({}, rest, { ref: label ? undefined : ref, checked: checked, disabled: disabled, onChange: onChange, value: value, icon: React.createElement("div", { className: classes.uncheckedIcon }), checkedIcon: React.createElement("div", { className: classes.checkedIcon }), color: 'default', classes: rootClasses, className: cx(className, {
            [classes.withLabel]: Boolean(label),
        }), style: style, focusVisibleClassName: classes.focused })));
    if (!label) {
        return muiRadio;
    }
    const externalEventListeners = {
        onMouseLeave: rest.onMouseLeave,
        onMouseOver: rest.onMouseOver,
    };
    return (React.createElement(FormControlLabel, Object.assign({}, externalEventListeners, { ref: ref, control: muiRadio, className: classes.labelWithRightSpacing, classes: Object.assign(Object.assign({}, rootClasses), { label: classes.label }), style: style, label: label, disabled: disabled, titleCase: titleCase })));
});
Radio.defaultProps = {
    disabled: false,
};
Radio.displayName = 'Radio';
export default Radio;
//# sourceMappingURL=Radio.js.map