var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Switch as MUISwitch } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import React, { forwardRef } from 'react';
import FormControlLabel from '../FormControlLabel';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'PicassoSwitch' });
export const Switch = forwardRef(function Switch(props, ref) {
    const { label, id, className, style, disabled, onChange, value, checked, titleCase, color, // eslint-disable-line
    'data-testid': dataTestId } = props, rest = __rest(props, ["label", "id", "className", "style", "disabled", "onChange", "value", "checked", "titleCase", "color", 'data-testid']);
    const classes = useStyles();
    const switchElement = (React.createElement(MUISwitch, Object.assign({}, rest, { color: 'primary', ref: ref, checked: checked, className: className, style: style, disabled: disabled, id: id, onChange: onChange, value: value, "data-testid": label ? undefined : dataTestId })));
    if (!label) {
        return switchElement;
    }
    return (React.createElement(FormControlLabel, { classes: {
            root: classes.root,
            label: classes.label,
        }, control: switchElement, disabled: disabled, label: label, titleCase: titleCase, "data-testid": dataTestId }));
});
Switch.defaultProps = {
    disabled: false,
    onChange: () => { },
};
Switch.displayName = 'Switch';
export default Switch;
//# sourceMappingURL=Switch.js.map