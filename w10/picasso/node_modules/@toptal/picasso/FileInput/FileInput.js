import React, { forwardRef, useRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import FileList from '../FileList';
import Container from '../Container';
import Button from '../Button';
import FormHint from '../FormHint';
import { useCombinedRefs } from '../utils';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'FileInputContent' });
export const FileInput = forwardRef(function FileInput(props, ref) {
    const { accept, disabled, value, buttonLabel, hint, maxFiles = 1, onChange, onRemove, onFocus, onBlur, } = props;
    const classes = useStyles();
    const isUnlimitedFiles = maxFiles === null;
    const preventAddingNewFiles = !isUnlimitedFiles && value && value.length === maxFiles;
    // if `ref` is null then we need a ref to control the input
    // so we create another ref manually if needed and merge both of them
    const inputRef = useCombinedRefs(ref, useRef(null));
    return (React.createElement(Container, { onFocus: onFocus, onBlur: onBlur, className: classes.root },
        React.createElement(Button, { size: 'small', variant: 'secondary', disabled: Boolean(disabled || preventAddingNewFiles), onClick: () => inputRef.current && inputRef.current.click() }, buttonLabel),
        React.createElement("input", { type: 'file', className: classes.nativeInput, ref: inputRef, accept: accept, onChange: onChange, multiple: isUnlimitedFiles }),
        hint && React.createElement(FormHint, { className: classes.hint }, hint),
        value && value.length > 0 && (React.createElement(Container, { top: 'xsmall' },
            React.createElement(FileList, { files: value, disabled: disabled, onItemRemove: onRemove })))));
});
FileInput.defaultProps = {
    maxFiles: 1,
    buttonLabel: 'Choose File',
};
FileInput.displayName = 'FileInput';
export default FileInput;
//# sourceMappingURL=FileInput.js.map