var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import { ArrowDownMinor24, ArrowDownMinor16 } from '../Icon';
import Button from '../Button';
import ButtonGroup from '../ButtonGroup';
import Dropdown from '../Dropdown';
import styles from './styles';
// Using { index: -1 } to inject CSS link to the bottom of the head
// in order to prevent Button's styles to override ButtonSplit's ones
// Related Jira issue: https://toptal-core.atlassian.net/browse/FX-1520
const useStyles = makeStyles(styles, {
    name: 'PicassoButtonSplit',
    index: -1,
});
const DropdownIcon = ({ size, className, }) => {
    if (size === 'large') {
        return React.createElement(ArrowDownMinor24, { className: className });
    }
    return React.createElement(ArrowDownMinor16, { className: className });
};
const EventStopPropagation = ({ children }) => {
    const handleClick = (event) => {
        event.stopPropagation();
    };
    return React.createElement("span", { onClick: handleClick }, children);
};
export const ButtonSplit = forwardRef(function ButtonSplit(props, ref) {
    const { size = 'medium', menu, children, variant = 'primary', disabled, style, className, onClick, menuButtonProps, actionButtonProps, testIds = {} } = props, rest = __rest(props, ["size", "menu", "children", "variant", "disabled", "style", "className", "onClick", "menuButtonProps", "actionButtonProps", "testIds"]);
    const classes = useStyles();
    const commonClasses = cx(classes.button, {
        [classes.primaryVariant]: variant === 'primary',
        [classes.disabled]: disabled,
    });
    const renderMenuButton = ({ isOpen, disabled, }) => {
        const menuButton = (React.createElement(Button, Object.assign({}, menuButtonProps, { variant: variant, className: `${commonClasses} ${classes.menuButton} ${classes[`${size}Size`]}`, size: size, disabled: disabled, "data-testid": testIds.menuButton }),
            React.createElement(DropdownIcon, { className: cx({
                    [classes.rotated]: isOpen,
                }), size: size })));
        return disabled ? (React.createElement(EventStopPropagation, null, menuButton)) : (menuButton);
    };
    return (React.createElement(ButtonGroup, Object.assign({}, rest, { ref: ref, style: style, className: className }),
        React.createElement(Button, Object.assign({}, actionButtonProps, { className: `${commonClasses} ${classes.actionButton}`, size: size, variant: variant, disabled: disabled, onClick: onClick, "data-testid": testIds.actionButton }), children),
        React.createElement(Dropdown, { content: menu, className: cx(classes.dropdown, {
                [classes.disabled]: disabled,
            }) }, ({ isOpen }) => renderMenuButton({ isOpen, disabled }))));
});
ButtonSplit.defaultProps = {
    size: 'medium',
    variant: 'primary',
};
ButtonSplit.displayName = 'ButtonSplit';
export default ButtonSplit;
//# sourceMappingURL=ButtonSplit.js.map