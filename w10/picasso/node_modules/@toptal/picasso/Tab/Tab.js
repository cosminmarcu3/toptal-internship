var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useContext, } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { Tab as MUITab } from '@material-ui/core';
import { useTitleCase } from '@toptal/picasso-shared';
import UserBadge from '../UserBadge';
import styles from './styles';
import { TabsOrientationContext } from '../Tabs/Tabs';
import TabLabel from '../TabLabel';
import TabDescription from '../TabDescription';
const useStyles = makeStyles(styles, { name: 'PicassoTab' });
export const Tab = forwardRef(function Tab(props, ref) {
    const { disabled, value, label, icon, selected, onChange, onClick, titleCase: propsTitleCase, description, avatar } = props, rest = __rest(props, ["disabled", "value", "label", "icon", "selected", "onChange", "onClick", "titleCase", "description", "avatar"]);
    const classes = useStyles();
    const titleCase = useTitleCase(propsTitleCase);
    const orientation = useContext(TabsOrientationContext);
    const labelComponent = getLabelComponent({
        avatar,
        description,
        disabled,
        label,
        orientation,
        titleCase,
    });
    return (React.createElement(MUITab, Object.assign({}, rest, { ref: ref, tabIndex: 0, disabled: disabled, label: labelComponent, icon: icon, value: value, selected: selected, onChange: onChange, onClick: onClick, classes: {
            root: classes[orientation],
            selected: classes.selected,
            wrapper: classes.wrapper,
        } })));
});
Tab.defaultProps = {};
Tab.displayName = 'Tab';
const getLabelComponent = ({ avatar, description, disabled, label, orientation, titleCase, }) => {
    if (!label) {
        return null;
    }
    const isHorizontal = orientation === 'horizontal';
    const isCustomLabel = typeof label !== 'string';
    const Label = () => (React.createElement(TabLabel, { titleCase: titleCase, label: label, orientation: orientation }));
    if (isHorizontal || isCustomLabel) {
        return React.createElement(Label, null);
    }
    if (typeof avatar === 'undefined') {
        return (React.createElement(React.Fragment, null,
            React.createElement(Label, null),
            description && (React.createElement(TabDescription, { disabled: disabled }, description))));
    }
    return (React.createElement(UserBadge, { renderName: Label, name: label, avatar: avatar }, description && (React.createElement(TabDescription, { disabled: disabled }, description))));
};
export default Tab;
//# sourceMappingURL=Tab.js.map