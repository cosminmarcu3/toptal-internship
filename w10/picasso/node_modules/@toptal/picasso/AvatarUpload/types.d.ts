export interface FileUpload {
    file?: File;
    src?: string;
}
export declare type AvatarUploadOptions = {
    accept?: string | string[];
    onDrop?: <T extends File>(acceptedFile: T | null, fileRejection: FileRejection | null, event: DropEvent) => void;
    onDropAccepted?: <T extends File>(files: T, event: DropEvent) => void;
    onDropRejected?: (fileRejection: FileRejection, event: DropEvent) => void;
    onEdit?: (event: React.MouseEvent) => void;
    validator?: <T extends File>(file: T) => FileError | null;
};
export declare type DropEvent = React.DragEvent<HTMLElement> | React.ChangeEvent<HTMLInputElement> | DragEvent | Event;
export declare const ErrorCode: {
    readonly FileInvalidType: "file-invalid-type";
    readonly FileTooLarge: "file-too-large";
    readonly FileTooSmall: "file-too-small";
    readonly TooManyFiles: "too-many-files";
};
export declare type ErrorCodeType = typeof ErrorCode[keyof typeof ErrorCode];
export interface FileError {
    message: string;
    code: ErrorCodeType | string;
}
export interface FileRejection {
    file: File;
    errors: FileError[];
}
