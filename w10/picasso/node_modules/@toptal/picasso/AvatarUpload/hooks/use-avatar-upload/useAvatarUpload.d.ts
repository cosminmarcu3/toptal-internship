import { DropzoneRootProps } from 'react-dropzone';
import { AvatarUploadOptions } from '../../types';
interface Props {
    /** Set accepted file types. See https://github.com/okonet/attr-accept for more information. */
    accept?: AvatarUploadOptions['accept'];
    /** Image URL */
    src?: string;
    /** Enable/disable the dropzone */
    disabled?: boolean;
    /** Maximum file size (in bytes) */
    maxSize?: number;
    /** Minimum file size (in bytes) */
    minSize?: number;
    /** Indicate whether the selected file is being uploaded */
    uploading?: boolean;
    /** Callback for when there is already a source and user clicks on the avatar. */
    onEdit?: AvatarUploadOptions['onEdit'];
    /**
     * Callback for when the drop event occurs. Note that if file is not accepted, this callback is not invoked.,
     * @type <T extends File>(files: T, event: DropEvent) => void
     */
    onDropAccepted?: AvatarUploadOptions['onDropAccepted'];
    /**
     * Callback for when the drop event occurs. Note that if file is not rejected, this callback is not invoked.
     * @type (fileRejection: FileRejection, event: DropEvent) => void
     */
    onDropRejected?: AvatarUploadOptions['onDropRejected'];
    /**
     * Callback for when the drop event occurs. Note that the onDrop callback will always be invoked regardless if the dropped file was accepted or rejected.
     * @type <T extends File>(acceptedFile: T | null, fileRejection: FileRejection | null, event: DropEvent) => void
     */
    onDrop?: AvatarUploadOptions['onDrop'];
    /**
     * Custom validation function
     * (file: File) => FileError | FileError[] | null
     */
    validator?: AvatarUploadOptions['validator'];
}
interface ReturnValue {
    /** Ref to be attached to the root element */
    rootRef: React.RefObject<HTMLElement>;
    /** Whether to show the upload icon */
    showUploadIcon: boolean;
    /** Whether to show the avatar */
    showAvatar: boolean;
    /** Whether the dropzone is currently being dragged over */
    isDropzoneDragActive: boolean;
    /** Whether the dropzone is currently focused */
    isDropzoneFocused: boolean;
    /** Props to be attached to the input element */
    getInputProps: () => React.InputHTMLAttributes<HTMLInputElement>;
    /** Props to be attached to the root element */
    getRootProps: <T extends DropzoneRootProps>(props?: T | undefined) => T;
    /** Callback for when the edit button is clicked */
    handleEdit: (event: React.MouseEvent) => void;
}
declare const useAvatarUpload: (props: Props) => ReturnValue;
export default useAvatarUpload;
