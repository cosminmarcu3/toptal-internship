import { useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
const useAvatarUpload = (props) => {
    const { accept, minSize, maxSize, disabled, uploading, src, validator, onDrop, onEdit, onDropAccepted, onDropRejected, } = props;
    // callback overrides to return only one file to the parent component
    const handleDrop = useCallback((acceptedFiles, fileRejections, event) => {
        var _a, _b;
        if (onDrop) {
            onDrop((_a = acceptedFiles[0]) !== null && _a !== void 0 ? _a : null, (_b = fileRejections[0]) !== null && _b !== void 0 ? _b : null, event);
        }
    }, [onDrop]);
    const handleDropAccepted = useCallback((files, event) => {
        if (onDropAccepted) {
            onDropAccepted(files[0], event);
        }
    }, [onDropAccepted]);
    const handleDropRejected = useCallback((fileRejections, event) => {
        if (onDropRejected) {
            onDropRejected(fileRejections[0], event);
        }
    }, [onDropRejected]);
    const handleEdit = (event) => {
        // to avoid dropzone to be triggered
        event.stopPropagation();
        if (onEdit) {
            onEdit(event);
        }
    };
    const showAvatar = !uploading && Boolean(src);
    const showUploadIcon = !uploading && !src;
    // after showing avatar, only way to change the file selection is to use 'onEdit' by clicking
    const disableDropzoneClick = (showAvatar && !onEdit) || uploading;
    const disableKeyboardAndDragging = showAvatar || uploading;
    const { getInputProps, getRootProps, isDragActive, isFocused, rootRef } = useDropzone({
        accept,
        minSize,
        maxSize,
        disabled,
        multiple: false,
        onDrop: handleDrop,
        onDropAccepted: handleDropAccepted,
        onDropRejected: handleDropRejected,
        validator,
        noClick: disableDropzoneClick,
        noDrag: disableKeyboardAndDragging,
        noKeyboard: disableKeyboardAndDragging,
    });
    return {
        rootRef,
        showUploadIcon,
        showAvatar,
        isDropzoneDragActive: isDragActive,
        isDropzoneFocused: isFocused,
        getInputProps,
        getRootProps,
        handleEdit,
    };
};
export default useAvatarUpload;
//# sourceMappingURL=useAvatarUpload.js.map