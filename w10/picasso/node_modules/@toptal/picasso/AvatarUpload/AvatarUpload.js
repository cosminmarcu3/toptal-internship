import { capitalize, makeStyles } from '@material-ui/core';
import cx from 'classnames';
import React, { forwardRef, useImperativeHandle, } from 'react';
import Avatar from '../Avatar';
import AvatarDropzoneSvg from '../AvatarDropzoneSvg';
import { Upload16, Upload24 } from '../Icon';
import Loader from '../Loader';
import styles from './styles';
import useAvatarUpload from './hooks/use-avatar-upload';
import useAvatarStates from './hooks/use-avatar-states';
const useStyles = makeStyles(styles, {
    name: 'PicassoAvatarUpload',
});
export const AvatarUpload = forwardRef(function AvatarUpload(props, ref) {
    const { autoFocus, autoHover, defaultActive, uploading = false, size = 'small', onEdit, onFocus, onBlur, status, 'data-testid': dataTestId, testIds, src, alt, style, avatarStyle, 
    // dropzoneOptions
    accept, minSize, maxSize, disabled, onDrop, onDropAccepted, onDropRejected, validator, } = props;
    const classes = useStyles();
    const { rootRef, showUploadIcon, showAvatar, isDropzoneDragActive, isDropzoneFocused, getInputProps, getRootProps, handleEdit, } = useAvatarUpload({
        accept,
        minSize,
        maxSize,
        disabled,
        uploading,
        src,
        validator,
        onDrop,
        onEdit,
        onDropAccepted,
        onDropRejected,
    });
    const { hovered, onMouseEnter, onMouseLeave, isDragActive, isFocused } = useAvatarStates({
        autoHover,
        autoFocus,
        defaultActive,
        isDropzoneFocused,
        isDropzoneDragActive,
    });
    const loadingIcon = uploading && (React.createElement(Loader, { className: cx(classes.icon, {
            [classes.hovered]: hovered,
            [classes.error]: status === 'error',
        }), size: 'small', variant: 'inherit', "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.loader }));
    const UploadIconComponent = size === 'xxsmall' || size === 'xsmall' ? Upload16 : Upload24;
    const uploadIcon = showUploadIcon && (React.createElement(UploadIconComponent, { className: cx(classes.icon, {
            [classes.hovered]: hovered,
            [classes.error]: status === 'error',
        }), "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.uploadIcon }));
    // exposing the rootRef from react-dropzone to the parent component
    useImperativeHandle(ref, () => { var _a; return (_a = rootRef.current) !== null && _a !== void 0 ? _a : {}; }, [
        rootRef,
    ]);
    return (React.createElement("div", Object.assign({ style: style }, getRootProps({
        className: cx(classes.root, classes[`size${capitalize(size)}`], {
            [classes.disabled]: disabled,
            [classes.readonlyAvatar]: showAvatar,
        }),
        'data-testid': dataTestId,
        onMouseEnter,
        onMouseLeave,
        onFocus,
        onBlur,
    })),
        React.createElement("input", Object.assign({}, getInputProps())),
        showAvatar ? (React.createElement(Avatar, { style: avatarStyle, size: size, onEdit: onEdit ? handleEdit : undefined, 
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            src: src, alt: alt, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.avatar, variant: 'square' })) : (React.createElement(React.Fragment, null,
            React.createElement(AvatarDropzoneSvg, { disabled: disabled, error: status === 'error', size: size, hovered: hovered, focused: isFocused, isDragActive: isDragActive, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.dropzoneSvg }),
            loadingIcon,
            uploadIcon))));
});
AvatarUpload.displayName = 'AvatarUpload';
AvatarUpload.defaultProps = {
    size: 'small',
    disabled: false,
    uploading: false,
    maxSize: 104857600,
    minSize: 0,
    accept: 'image/*',
};
export default AvatarUpload;
//# sourceMappingURL=AvatarUpload.js.map