import { BaseProps, SizeType } from '@toptal/picasso-shared';
import React, { CSSProperties, FocusEvent } from 'react';
import { Status } from '../OutlinedInput';
import { AvatarUploadOptions, FileUpload } from './types';
export interface Props extends BaseProps {
    /** Set accepted file types. See https://github.com/okonet/attr-accept for more information. */
    accept?: AvatarUploadOptions['accept'];
    /** Alt text */
    alt?: string;
    /** Image URL */
    src?: string;
    /** Size of the avatar */
    size?: SizeType<'xxsmall' | 'xsmall' | 'small' | 'medium' | 'large'>;
    /** Avatar style */
    avatarStyle?: CSSProperties;
    /** Enable/disable the dropzone */
    disabled?: boolean;
    /** Maximum file size (in bytes) */
    maxSize?: number;
    /** Minimum file size (in bytes) */
    minSize?: number;
    /** Callback for when there is already a source and user clicks on the avatar. */
    onEdit?: AvatarUploadOptions['onEdit'];
    /** Callback for focusing */
    onFocus?: (event: FocusEvent<HTMLElement, Element>) => void;
    /** Callback for losing focus */
    onBlur?: (event: FocusEvent<HTMLElement, Element>) => void;
    /**
     * Callback for when the drop event occurs. Note that if file is not accepted, this callback is not invoked.,
     * @type <T extends File>(files: T, event: DropEvent) => void
     */
    onDropAccepted?: AvatarUploadOptions['onDropAccepted'];
    /**
     * Callback for when the drop event occurs. Note that if file is not rejected, this callback is not invoked.
     * @type (fileRejection: FileRejection, event: DropEvent) => void
     */
    onDropRejected?: AvatarUploadOptions['onDropRejected'];
    /**
     * Callback for when the drop event occurs. Note that the onDrop callback will always be invoked regardless if the dropped file was accepted or rejected.
     * @type <T extends File>(acceptedFile: T | null, fileRejection: FileRejection | null, event: DropEvent) => void
     */
    onDrop?: AvatarUploadOptions['onDrop'];
    /**
     * Custom validation function
     * (file: File) => FileError | FileError[] | null
     */
    validator?: AvatarUploadOptions['validator'];
    /** Value to be used for forms */
    value?: FileUpload;
    /** Indicate `AvatarUpload` is in `error` or `default` state */
    status?: Extract<Status, 'error' | 'default'>;
    /** Indicate whether the selected file is being uploaded */
    uploading?: boolean;
    /** Indicate whether component has focused state as default */
    autoFocus?: boolean;
    autoHover?: boolean;
    defaultActive?: boolean;
    testIds?: {
        avatar?: string;
        dropzoneSvg?: string;
        uploadIcon?: string;
        loader?: string;
    };
}
export declare const AvatarUpload: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLElement>>;
export default AvatarUpload;
