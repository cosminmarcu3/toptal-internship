var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import { SnackbarContent } from '@material-ui/core';
import Typography from '../Typography';
import Container from '../Container';
import Button from '../Button';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'ApplicationUpdateNotification',
});
export const ApplicationUpdateNotification = forwardRef(function ApplicationUpdateNotification(props, ref) {
    const { title, description, onReloadClick, onClose, testIds } = props, rest = __rest(props, ["title", "description", "onReloadClick", "onClose", "testIds"]);
    const classes = useStyles();
    const notification = (React.createElement(React.Fragment, null,
        React.createElement("svg", { className: classes.icon, viewBox: '0 0 105 105', width: '105', height: '105' },
            React.createElement("path", { d: 'M8.364 72.364h32v8h-21.47c.829.99 1.701 1.942 2.614 2.855C29.641 91.353 40.63 96 52.364 96 76.464 96 96 76.463 96 52.364h8.727c0 28.92-23.444 52.363-52.363 52.363A52.192 52.192 0 0116.363 90.39v13.975h-8v-32zM52.364 0a52.192 52.192 0 0136 14.338V.364h8v32h-32v-8l21.469-.001a43.924 43.924 0 00-2.614-2.855c-8.133-8.133-19.12-12.78-30.855-12.78-24.1 0-43.637 19.536-43.637 43.636H0C0 23.444 23.444 0 52.364 0z' })),
        React.createElement(Typography, { variant: 'heading', size: 'medium', color: 'inherit', className: classes.positionRelative }, title),
        React.createElement(Container, { top: 'xsmall', className: classes.positionRelative },
            React.createElement(Typography, { size: 'medium', color: 'inherit' }, description)),
        React.createElement(Container, { top: 'small' },
            React.createElement(Button, { variant: 'secondary', onClick: onReloadClick, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.reloadNowButton }, "Reload Now"),
            React.createElement(Button, { variant: 'transparent', onClick: onClose, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.updateLaterButton }, "Update Later"))));
    return (React.createElement(SnackbarContent, Object.assign({}, rest, { classes: {
            root: cx([classes.root, classes.positionRelative]),
            message: classes.message,
        }, message: notification, ref: ref })));
});
ApplicationUpdateNotification.defaultProps = {
    title: (React.createElement(React.Fragment, null,
        "A newer version of this application is available.",
        React.createElement("br", null),
        "Please reload to update.")),
    description: 'IMPORTANT: On reload, any unsaved data (e.g., filled-out forms) will be lost.',
    onReloadClick: () => { },
    onClose: () => { },
};
ApplicationUpdateNotification.displayName = 'ApplicationUpdateNotification';
export default ApplicationUpdateNotification;
//# sourceMappingURL=ApplicationUpdateNotification.js.map