var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable react/no-array-index-key */
import React from 'react';
import { FormGroup } from '@material-ui/core';
import { makeStyles, useTheme } from '@material-ui/core/styles';
import cx from 'classnames';
import { GridCompound as Grid } from '../GridCompound';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoCheckboxGroup',
});
const CheckboxGroup = (props) => {
    const { horizontal, spacing, small, medium, large, className } = props, rest = __rest(props, ["horizontal", "spacing", "small", "medium", "large", "className"]);
    const _a = useStyles(), { grid: gridClass, gridItem: gridItemClass } = _a, classes = __rest(_a, ["grid", "gridItem"]);
    const { spacing: themeSpacing } = useTheme();
    const direction = horizontal ? 'row' : 'column';
    const gridSpacing = (spacing !== null && spacing !== void 0 ? spacing : horizontal) ? themeSpacing(2) : 0;
    const children = React.Children.toArray(rest.children);
    return (React.createElement(FormGroup, Object.assign({}, rest, { classes: classes, className: cx(classes.root, className) }),
        React.createElement(Grid, { direction: direction, spacing: gridSpacing, className: gridClass }, children.map((child, index) => (React.createElement(Grid.Item, { key: index, className: gridItemClass, small: small, medium: medium, large: large }, child))))));
};
CheckboxGroup.defaultProps = {
    horizontal: false,
};
export default CheckboxGroup;
//# sourceMappingURL=CheckboxGroup.js.map