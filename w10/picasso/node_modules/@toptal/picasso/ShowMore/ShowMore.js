var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useMemo, useCallback, useState, } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import Truncate from 'react-truncate';
import ChevronRightIcon16 from '../Icon/ChevronRight16';
import Typography from '../Typography';
import styles from './styles';
import ButtonAction from '../ButtonAction';
import { replaceLineBreaksWithTags } from './utils';
const useStyles = makeStyles(styles, { name: 'PicassoShowMore' });
export const ShowMore = forwardRef(function ShowMore(props, ref) {
    const { children, rows = 4, initialExpanded = false, disableToggle = false, moreText = 'Show more', lessText = 'Show less', onToggle = () => { }, className, style, testIds } = props, rest = __rest(props, ["children", "rows", "initialExpanded", "disableToggle", "moreText", "lessText", "onToggle", "className", "style", "testIds"]);
    const classes = useStyles();
    const [shownMore, setShownMore] = useState(initialExpanded);
    const [needsTruncation, setNeedsTruncation] = useState(true);
    const content = useMemo(() => typeof children === 'string'
        ? replaceLineBreaksWithTags(children)
        : children, [children]);
    const handleNeedsTruncation = useCallback((truncated) => setNeedsTruncation(truncated), [setNeedsTruncation]);
    const isContentVisible = rows !== 0 || shownMore;
    const formattedContent = shownMore ? (content) : (React.createElement(Truncate, { onTruncate: handleNeedsTruncation, lines: rows }, content));
    return (React.createElement(React.Fragment, null,
        React.createElement(Typography, Object.assign({}, rest, { ref: ref, size: 'medium', color: 'dark-grey', className: className, style: style, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.contentWrapper }), isContentVisible && formattedContent),
        !disableToggle && needsTruncation && (React.createElement(ButtonAction, { onClick: () => {
                const nextState = !shownMore;
                setShownMore(nextState);
                onToggle(nextState);
            }, className: classes.toggleText, icon: React.createElement("div", { className: classes.iconWrapper },
                React.createElement(ChevronRightIcon16, { className: cx(classes.icon, {
                        [classes.expandedIcon]: shownMore,
                    }) })), iconPosition: 'right', "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.toggleButton }, shownMore ? lessText : moreText))));
});
ShowMore.displayName = 'ShowMore';
export default ShowMore;
//# sourceMappingURL=ShowMore.js.map