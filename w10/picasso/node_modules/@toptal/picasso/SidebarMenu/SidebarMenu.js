var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import React, { forwardRef, useCallback, useEffect, } from 'react';
import Menu from '../Menu';
import { useSidebarContext } from '../PageSidebar/SidebarContextProvider';
import { useSubMenuContext } from '../SidebarItem';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoSidebarMenu',
});
export const SidebarMenu = forwardRef(function SidebarMenu(props, ref) {
    const { bottom, style, className, children } = props, rest = __rest(props, ["bottom", "style", "className", "children"]);
    const { parentSidebarItemIndex, isSubMenu, parentMenu } = useSubMenuContext();
    const classes = useStyles();
    const { variant, expandedItemKey, setExpandedItemKey, isCollapsed: isSidebarCollapsed, } = useSidebarContext();
    const expandSidebarItem = useCallback(setExpandedItemKey, [
        setExpandedItemKey,
    ]);
    useEffect(() => {
        const hasSelectedItem = React.Children.toArray(children).some(child => React.isValidElement(child) && child.props.selected);
        if (hasSelectedItem && parentSidebarItemIndex !== undefined) {
            setExpandedItemKey(parentSidebarItemIndex);
        }
    }, [parentSidebarItemIndex, setExpandedItemKey, children]);
    const items = React.Children.map(children, (child, index) => {
        if (React.isValidElement(child)) {
            const itemProps = {
                variant,
                isSubMenu,
                compact: isSidebarCollapsed && !isSubMenu,
            };
            const expandibleProps = {
                index,
                expand: expandSidebarItem,
                isExpanded: expandedItemKey === index,
            };
            const newProps = Object.assign(Object.assign({}, itemProps), (child.props.collapsible ? expandibleProps : {}));
            return React.cloneElement(child, newProps);
        }
        return child;
    });
    return (React.createElement(Menu, Object.assign({}, rest, { allowNestedNavigation: false, ref: ref, style: style, className: cx(classes.root, {
            [classes.bottom]: bottom,
            [classes.compactParent]: parentMenu === null || parentMenu === void 0 ? void 0 : parentMenu.compact,
        }, className) }), items));
});
SidebarMenu.defaultProps = {
    bottom: false,
};
SidebarMenu.displayName = 'SidebarMenu';
export default SidebarMenu;
//# sourceMappingURL=SidebarMenu.js.map