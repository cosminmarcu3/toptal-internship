var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useMemo, } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import { addClassesToChildren, } from '@toptal/picasso-shared';
import Button from '../Button';
import ButtonGroupItem from '../ButtonGroupItem';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoButtonGroup',
});
const getChildrenClassesConfig = (classes) => [
    [
        Button,
        {
            root: classes.button,
            active: classes.active,
            focused: classes.focused,
            hovered: classes.hovered,
        },
    ],
];
export const ButtonGroup = forwardRef(function ButtonGroup(props, ref) {
    const { children, className, style } = props, rest = __rest(props, ["children", "className", "style"]);
    const classes = useStyles();
    const childrenWithClasses = useMemo(() => addClassesToChildren({
        children,
        classes,
        config: getChildrenClassesConfig,
    }), [children, classes]);
    return (React.createElement("div", Object.assign({}, rest, { ref: ref, className: cx(classes.root, className), style: style }), childrenWithClasses));
});
ButtonGroup.defaultProps = {};
ButtonGroup.displayName = 'ButtonGroup';
export default Object.assign(ButtonGroup, { Item: ButtonGroupItem });
//# sourceMappingURL=ButtonGroup.js.map