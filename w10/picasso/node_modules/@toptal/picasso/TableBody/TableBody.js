var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useContext } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { TableBody as MUITableBody } from '@material-ui/core';
import styles from './styles';
import { TableSectionContext, TableSection, TableContext } from '../Table';
const stripeRows = (children) => {
    let stripeIndex = -1;
    return React.Children.map(children, child => {
        if (!React.isValidElement(child)) {
            return child;
        }
        stripeIndex++;
        if (stripeIndex % 2 !== 0) {
            return React.cloneElement(child, { stripeEven: true });
        }
        return child;
    });
};
const useStyles = makeStyles(styles, { name: 'PicassoTableBody' });
export const TableBody = forwardRef(function TableBody(props, ref) {
    const { className, style, children } = props, rest = __rest(props, ["className", "style", "children"]);
    const classes = useStyles();
    const { variant } = useContext(TableContext);
    return (React.createElement(TableSectionContext.Provider, { value: TableSection.BODY },
        React.createElement(MUITableBody, Object.assign({}, rest, { ref: ref, classes: classes, className: className, style: style }), variant === 'striped' ? stripeRows(children) : children)));
});
TableBody.defaultProps = {};
TableBody.displayName = 'TableBody';
export default TableBody;
//# sourceMappingURL=TableBody.js.map