var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import InputMask from 'react-input-mask';
import { detect } from 'detect-browser';
import cx from 'classnames';
import Input from '../Input';
import { Time16 } from '../Icon';
import styles from './styles';
import { usePropDeprecationWarning } from '../utils/use-deprecation-warnings';
const useStyles = makeStyles(styles, {
    name: 'PicassoTimePicker',
});
export const TimePicker = (props) => {
    const { onChange, value, width, className, error, status } = props, rest = __rest(props, ["onChange", "value", "width", "className", "error", "status"]);
    usePropDeprecationWarning({
        props,
        name: 'error',
        componentName: 'TimePicker',
        description: 'Use the `status` prop instead. `error` is deprecated and will be removed in the next major release.',
    });
    const classes = useStyles();
    const browser = detect();
    const isSafari = (browser === null || browser === void 0 ? void 0 : browser.name) === 'safari';
    const startsWithTwo = value && value[0] === '2';
    const inputMask = [
        /[0-2]/,
        startsWithTwo ? /[0-3]/ : /[0-9]/,
        ':',
        /[0-5]/,
        /[0-9]/,
    ];
    const icon = React.createElement(Time16, { classes: { root: classes.icon } });
    if (isSafari) {
        return (React.createElement(Input, { type: 'text', readOnly: true, iconPosition: 'end', icon: icon, width: width, status: error ? 'error' : status, className: cx(classes.root, className), inputProps: Object.assign({ className: classes.inputBase }, rest), startAdornment: React.createElement(InputMask, { mask: inputMask, alwaysShowMask: true, 
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                maskPlaceholder: '-', value: value, onChange: onChange, className: classes.inputMask }) }));
    }
    return (React.createElement(Input, { type: 'time', value: value, className: cx(classes.root, className), onChange: onChange, iconPosition: 'end', icon: icon, width: width, status: error ? 'error' : status, inputProps: Object.assign({ className: classes.inputBase, step: 60 }, rest) }));
};
TimePicker.defaultProps = {
    status: 'default',
};
TimePicker.displayName = 'TimePicker';
export default TimePicker;
//# sourceMappingURL=TimePicker.js.map