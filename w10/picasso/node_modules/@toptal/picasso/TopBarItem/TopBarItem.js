var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, memo } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import MenuItem from '../MenuItem';
import SidebarItem from '../SidebarItem';
import Typography from '../Typography';
import { useBreakpoint, noop } from '../utils';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'PicassoTopBarMenuItem' });
export const TopBarItem = memo(forwardRef(function TopBarItem(props, ref) {
    const { className, icon, children } = props, rest = __rest(props, ["className", "icon", "children"]);
    const classes = useStyles();
    const isCompactLayout = useBreakpoint(['small', 'medium']);
    return isCompactLayout ? (React.createElement(SidebarItem, Object.assign({}, props, { ref: ref }))) : (React.createElement(MenuItem, Object.assign({}, rest, { className: cx(classes.root, className, classes.dark, {
            [classes.selected]: props.selected,
        }), ref: ref }),
        icon && React.createElement("div", { className: classes.icon }, icon),
        React.createElement(Typography, { size: 'small', color: 'inherit' }, children)));
}));
TopBarItem.defaultProps = {
    onClick: noop,
    selected: false,
};
TopBarItem.displayName = 'TopBarItem';
export default TopBarItem;
//# sourceMappingURL=TopBarItem.js.map