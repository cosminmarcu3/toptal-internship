var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import Container from '../Container';
import FileListItem from '../FileListItem';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'FileList',
});
export const FileList = forwardRef(function FileList(props, ref) {
    const { files, disabled, onItemRemove } = props, rest = __rest(props, ["files", "disabled", "onItemRemove"]);
    const classes = useStyles();
    return (React.createElement(Container, Object.assign({}, rest, { ref: ref, flex: true, direction: 'column', className: cx(classes.root) }), files.map((fileUpload, index) => {
        const { file: { name, size, lastModified }, } = fileUpload;
        return (React.createElement(FileListItem, { file: fileUpload, index: index, onRemove: onItemRemove, disabled: disabled, key: `${name}-${size}-${lastModified}-${String(index)}` }));
    })));
});
FileList.defaultProps = {};
FileList.displayName = 'FileList';
export default FileList;
//# sourceMappingURL=FileList.js.map