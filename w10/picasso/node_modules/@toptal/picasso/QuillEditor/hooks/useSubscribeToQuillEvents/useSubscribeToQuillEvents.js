import { useMemo, useEffect } from 'react';
import getTextChangeHandler from '../../utils/getTextChangeHandler';
import getSelectionChangeHandler from '../../utils/getSelectionChangeHandler';
import getEditorChangeHandler from '../../utils/getEditorChangeHandler';
import getTextLengthChangeHandler from '../../utils/getTextLengthChangeHandler';
import getCleanupOnAllContentRemovalHandler from '../../utils/getCleanupOnAllContentRemovalHandler';
const useSubscribeToQuillEvents = ({ quill, onTextChange, onSelectionChange, onTextLengthChange, }) => {
    const textLengthChangeHandler = useMemo(() => {
        if (!quill) {
            return () => { };
        }
        return getTextLengthChangeHandler(quill, onTextLengthChange);
    }, [quill, onTextLengthChange]);
    const textChangeHandler = useMemo(() => {
        if (!quill) {
            return () => { };
        }
        return getTextChangeHandler(quill, onTextChange);
    }, [quill, onTextChange]);
    const selectionChangeHandler = useMemo(() => {
        if (!quill) {
            return () => { };
        }
        return getSelectionChangeHandler(quill, onSelectionChange);
    }, [quill, onSelectionChange]);
    const editorChangeHandler = useMemo(() => {
        if (!quill) {
            return () => { };
        }
        return getEditorChangeHandler(quill, onSelectionChange);
    }, [quill, onSelectionChange]);
    const cleanupOnAllContentRemovalHandler = useMemo(() => {
        if (!quill) {
            return () => { };
        }
        return getCleanupOnAllContentRemovalHandler(quill);
    }, [quill]);
    useEffect(() => {
        if (!quill) {
            return;
        }
        quill.on('selection-change', selectionChangeHandler);
        quill.on('text-change', textChangeHandler);
        quill.on('text-change', textLengthChangeHandler);
        quill.on('text-change', cleanupOnAllContentRemovalHandler);
        quill.on('editor-change', editorChangeHandler);
        return () => {
            quill.off('selection-change', selectionChangeHandler);
            quill.off('text-change', textChangeHandler);
            quill.off('text-change', textLengthChangeHandler);
            quill.off('text-change', cleanupOnAllContentRemovalHandler);
            quill.off('editor-change', editorChangeHandler);
        };
    }, [
        quill,
        textChangeHandler,
        selectionChangeHandler,
        editorChangeHandler,
        textLengthChangeHandler,
        cleanupOnAllContentRemovalHandler,
    ]);
};
export default useSubscribeToQuillEvents;
//# sourceMappingURL=useSubscribeToQuillEvents.js.map