var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useState, useCallback } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import OutlinedInput from '../OutlinedInput';
import InputAdornment from '../InputAdornment';
import styles from './styles';
import SvgEye16 from '../Icon/Eye16';
import SvgEyeHidden16 from '../Icon/EyeHidden16';
import ButtonCircular from '../ButtonCircular';
import { usePropDeprecationWarning } from '../utils/use-deprecation-warnings';
const useStyles = makeStyles(styles, {
    name: 'PicassoPasswordInput',
});
export const PasswordInput = forwardRef(function PasswordInput(props, ref) {
    const { value, onChange, disabled, error, status, width, style, className, testIds, enableReset, onResetClick } = props, rest = __rest(props, ["value", "onChange", "disabled", "error", "status", "width", "style", "className", "testIds", "enableReset", "onResetClick"]);
    usePropDeprecationWarning({
        props,
        name: 'error',
        componentName: 'PasswordInput',
        description: 'Use the `status` prop instead. `error` is deprecated and will be removed in the next major release.',
    });
    const [showPassword, setShowPassword] = useState(false);
    const classes = useStyles();
    const handleToggleVisibilityClick = useCallback(() => {
        setShowPassword(previousState => !previousState);
    }, []);
    const endAdornment = (React.createElement(InputAdornment, { position: 'end' },
        React.createElement(ButtonCircular, { className: classes.toggle, variant: 'flat', icon: showPassword ? React.createElement(SvgEye16, null) : React.createElement(SvgEyeHidden16, null), onClick: handleToggleVisibilityClick, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.toggle, disabled: disabled })));
    return (React.createElement(OutlinedInput, { style: style, className: cx(classes.root, className), classes: {
            input: classes.input,
        }, inputProps: Object.assign(Object.assign({}, rest), { 'data-testid': testIds === null || testIds === void 0 ? void 0 : testIds.input }), width: width, status: error ? 'error' : status, inputRef: ref, type: showPassword ? 'text' : 'password', value: value, disabled: disabled, onChange: onChange, endAdornment: endAdornment, testIds: testIds, onResetClick: onResetClick, enableReset: enableReset }));
});
PasswordInput.defaultProps = {
    onChange: () => { },
    value: '',
    status: 'default',
};
PasswordInput.displayName = 'PasswordInput';
export default PasswordInput;
//# sourceMappingURL=PasswordInput.js.map