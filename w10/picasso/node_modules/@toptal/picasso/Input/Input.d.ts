import React, { ReactNode, ChangeEvent, InputHTMLAttributes, MouseEvent } from 'react';
import { BaseProps, SizeType } from '@toptal/picasso-shared';
import { BaseInputProps, Status } from '../OutlinedInput';
import { InputLimitAdornmentProps } from '../InputLimitAdornment';
import { InputIconAdornmentProps } from '../InputIconAdornment';
export interface Props extends BaseProps, Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {
    /** The id of the `input` element. */
    id?: string;
    /** Name attribute of the input element */
    name?: string;
    /** The default `input` element value. Use when the component is not controlled. */
    defaultValue?: string;
    /** The value of the `input` element, required for a controlled component. */
    value?: string;
    /** Placeholder for value */
    placeholder?: string;
    /**
     * @deprecated Use the `status` prop instead to both support success and error states
     * Indicate whether `Input` is in error state
     */
    error?: boolean;
    /** Indicate `Input` status */
    status?: Status;
    /** If true, the `Input` will be disabled */
    disabled?: boolean;
    /** Width of the component */
    width?: 'full' | 'shrink' | 'auto';
    /** Whether icon should be placed at the beginning or end of the `Input` */
    iconPosition?: InputIconAdornmentProps['position'];
    /** Specify icon which should be rendered inside Input */
    icon?: InputIconAdornmentProps['icon'];
    inputProps?: BaseInputProps;
    /** Whether `Input` should be rendered as `TextArea` or not */
    multiline?: boolean;
    /** Whether a multiline can be manually resized by the user, requires multiline prop to be set to true */
    multilineResizable?: boolean;
    /** If true, the input element will be focused during the first mount */
    autoFocus?: boolean;
    /** Specify rows amount for `TextArea` */
    rows?: string | number;
    /** Maximum number of rows to display when multiline option is set to true. */
    rowsMax?: string | number;
    /** Type attribute of the Input element. It should be a valid HTML5 input type */
    type?: string;
    /** Adds element at the start of the input - can't be used in combination with `iconPosition: start` */
    startAdornment?: ReactNode;
    /** Adds element at the end of the input - can't be used in combination with `iconPosition: end` */
    endAdornment?: ReactNode;
    /**  Callback invoked when `Input` changes its state */
    onChange?: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement | HTMLSelectElement>) => void;
    /** Adds a counter of characters (ignored in combination with `counter: entered`) */
    limit?: InputLimitAdornmentProps['limit'];
    /** Type of the counter of characters */
    counter?: InputLimitAdornmentProps['counter'];
    /** Component size */
    size?: SizeType<'small' | 'medium' | 'large'>;
    /** Whether to render reset icon when there is a value in the input */
    enableReset?: boolean;
    /** Callback invoked when reset button was clicked */
    onResetClick?: (event: MouseEvent<HTMLButtonElement & HTMLAnchorElement>) => void;
    /** Ref of the input outline */
    outlineRef?: React.Ref<HTMLElement>;
    testIds?: {
        inputAdornment?: string;
        resetButton?: string;
        validIcon?: string;
    };
    setHasMultilineCounter?: (name: string, hasCounter: boolean) => void;
    highlightAutofill?: boolean;
}
export declare const Input: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLInputElement>>;
export default Input;
