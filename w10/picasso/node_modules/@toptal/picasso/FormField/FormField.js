var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import Container from '../Container';
import FormHint from '../FormHint';
import FormError from '../FormError';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'PicassoFormField' });
const FormFieldAdornments = ({ autoSaveIndicator, children, hasMultilineCounter, }) => {
    const classes = useStyles();
    if (!autoSaveIndicator) {
        return React.createElement(React.Fragment, null, children);
    }
    return (React.createElement(Container, { flex: true, direction: 'column', className: classes.adornment },
        children,
        React.createElement(Container, { className: cx(classes.autoSaveIndicator, {
                [classes.hasMultilineCounter]: hasMultilineCounter,
            }) }, autoSaveIndicator)));
};
export const FormField = forwardRef(function FormField(props, ref) {
    const { autoSaveIndicator, className, style, hint, children, error, fieldRequirements, hasMultilineCounter } = props, rest = __rest(props, ["autoSaveIndicator", "className", "style", "hint", "children", "error", "fieldRequirements", "hasMultilineCounter"]);
    const classes = useStyles();
    return (React.createElement("div", Object.assign({}, rest, { ref: ref, className: cx(classes.root, className), style: style, "data-field-has-error": Boolean(error) }),
        children,
        React.createElement(FormFieldAdornments, { autoSaveIndicator: autoSaveIndicator, hasMultilineCounter: hasMultilineCounter },
            error && React.createElement(FormError, { className: classes.error }, error),
            hint && React.createElement(FormHint, { className: classes.hint }, hint),
            fieldRequirements)));
});
FormField.defaultProps = {};
FormField.displayName = 'FormField';
export default FormField;
//# sourceMappingURL=FormField.js.map