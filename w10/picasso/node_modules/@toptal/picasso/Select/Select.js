var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import NativeSelect from '../NativeSelect';
import NonNativeSelect from '../NonNativeSelect';
import disableUnsupportedProps from '../utils/disable-unsupported-props';
import noop from '../utils/noop';
import { usePropDeprecationWarning } from '../utils/use-deprecation-warnings';
import { DEFAULT_LIMIT, DEFAULT_SEARCH_THRESHOLD, getOptionText, renderOption, } from '../SelectBase';
import { documentable, forwardRef } from '../utils';
const purifyProps = (props) => {
    const sizeOptions = {
        featureProps: {
            size: 'small',
        },
        unsupportedProps: {
            icon: undefined,
            loading: false,
        },
    };
    return disableUnsupportedProps('Select', props, sizeOptions);
};
export const Select = documentable(forwardRef((_a, ref) => {
    var { native } = _a, props = __rest(_a, ["native"]);
    usePropDeprecationWarning({
        props,
        name: 'error',
        componentName: 'Select',
        description: 'Use the `status` prop instead. `error` is deprecated and will be removed in the next major release.',
    });
    return native ? (
    // eslint-disable-next-line react/jsx-props-no-spreading
    React.createElement(NativeSelect, Object.assign({}, purifyProps(props), { ref: ref }))) : (
    // eslint-disable-next-line react/jsx-props-no-spreading
    React.createElement(NonNativeSelect, Object.assign({}, purifyProps(props), { ref: ref })));
}));
Select.defaultProps = {
    disabled: false,
    getDisplayValue: getOptionText,
    iconPosition: 'start',
    loading: false,
    noOptionsText: 'No matches found',
    onChange: noop,
    onBlur: noop,
    renderOption: renderOption,
    size: 'medium',
    width: 'full',
    searchThreshold: DEFAULT_SEARCH_THRESHOLD,
    limit: DEFAULT_LIMIT,
    enableAutofill: false,
    searchPlaceholder: 'Search',
    native: false,
    status: 'default',
};
export default Select;
//# sourceMappingURL=Select.js.map