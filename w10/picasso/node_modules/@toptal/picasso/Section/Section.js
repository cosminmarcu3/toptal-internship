var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cx from 'classnames';
import React, { forwardRef, useState } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { Collapse } from '@material-ui/core';
import styles from './styles';
import ButtonCircular from '../ButtonCircular';
import Container from '../Container';
import Typography from '../Typography';
import { isString } from '../utils';
import { Rotate180 } from '../utils/Transitions';
import { ArrowDownMinor16 } from '../Icon';
const useStyles = makeStyles(styles, {
    name: 'PicassoSection',
});
export const Section = forwardRef(function Section(props, ref) {
    const { className, style, title, subtitle, actions, children, testIds, collapsible = false, defaultCollapsed = true, variant = 'default', titleSize = 'medium' } = props, rest = __rest(props, ["className", "style", "title", "subtitle", "actions", "children", "testIds", "collapsible", "defaultCollapsed", "variant", "titleSize"]);
    const classes = useStyles();
    const [collapsed, setCollapsed] = useState(collapsible ? defaultCollapsed : false);
    const toggleCollapse = () => setCollapsed(!collapsed);
    const renderTitle = () => title ? (React.createElement(Typography, { as: isString(title) ? undefined : 'div', className: classes.title, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.title, variant: 'heading', size: titleSize }, title)) : null;
    const renderSubtitle = () => subtitle ? (React.createElement(Typography, { as: isString(title) ? undefined : 'div', className: classes.subtitle, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.subtitle, size: 'medium', color: 'dark-grey' }, subtitle)) : null;
    const renderCollapse = () => collapsible ? (React.createElement(ButtonCircular, { onClick: toggleCollapse, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.collapse, variant: 'flat', icon: React.createElement(Rotate180, { on: !collapsed },
            React.createElement(ArrowDownMinor16, null)) })) : null;
    const hasActions = actions || collapsible;
    const renderActions = () => hasActions ? (React.createElement(Container, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.actions, className: classes.actions },
        actions,
        renderCollapse())) : null;
    const hasHeader = title || subtitle || hasActions;
    return (React.createElement(Container, Object.assign({ ref: ref, className: cx({
            [classes[variant]]: true,
            [classes.collapsed]: variant === 'default' && collapsed,
        }, classes.root, className), variant: ['bordered', 'withHeaderBar'].includes(variant) ? 'white' : undefined, style: style }, rest),
        hasHeader && (React.createElement(Container, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.header, className: cx({
                [classes[`${variant}Header`]]: true,
                [classes[`${variant}CollapsedHeader`]]: collapsed,
            }) },
            renderTitle(),
            renderSubtitle(),
            renderActions())),
        React.createElement(Collapse, { in: !collapsed, unmountOnExit: true },
            React.createElement(Container, { className: classes[`${variant}SectionContent`] }, children))));
});
Section.displayName = 'Section';
Section.defaultProps = {
    collapsible: false,
    defaultCollapsed: true,
    titleSize: 'medium',
};
export default Section;
//# sourceMappingURL=Section.js.map