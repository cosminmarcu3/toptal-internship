var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from 'react';
import cx from 'classnames';
import { useTitleCase, } from '@toptal/picasso-shared';
import { makeStyles, ButtonBase } from '@material-ui/core';
import styles from './styles';
import Loader from '../Loader';
import Container from '../Container';
import noop from '../utils/noop';
import toTitleCase from '../utils/to-title-case';
const useStyles = makeStyles(styles, {
    name: 'PicassoButton',
});
const getClickHandler = (loading, handler) => loading ? noop : handler;
const getIcon = (classes, children, icon, iconPosition) => {
    if (!icon) {
        return null;
    }
    const { icon: iconClass, iconLeft: iconLeftClass, iconRight: iconRightClass, } = classes;
    return React.cloneElement(icon, {
        className: cx(iconClass, icon.props.className, {
            [iconLeftClass]: children && iconPosition === 'left',
            [iconRightClass]: children && iconPosition === 'right',
        }),
        key: 'button-icon',
    });
};
export const Button = forwardRef(function Button(props, ref) {
    const { icon, iconPosition, loading, children, className, style, fullWidth, variant = 'primary', size = 'medium', focused, hovered, disabled, active, onClick, title, value, type, as = 'button', titleCase: propsTitleCase } = props, rest = __rest(props, ["icon", "iconPosition", "loading", "children", "className", "style", "fullWidth", "variant", "size", "focused", "hovered", "disabled", "active", "onClick", "title", "value", "type", "as", "titleCase"]);
    const classes = useStyles(props);
    const { root: rootClass, hidden: hiddenClass, loader: loaderClass, content: contentClass, } = classes;
    const titleCase = useTitleCase(propsTitleCase);
    const finalChildren = [titleCase ? toTitleCase(children) : children];
    if (icon) {
        const iconComponent = getIcon(classes, children, icon, iconPosition);
        if (iconPosition === 'left') {
            finalChildren.unshift(iconComponent);
        }
        else {
            finalChildren.push(iconComponent);
        }
    }
    const variantClassName = classes[variant];
    const sizeClassName = classes[size];
    const rootClassName = cx({
        [classes.fullWidth]: fullWidth,
        [classes.active]: active,
        [classes.focused]: focused,
        [classes.hovered]: hovered,
        [classes.disabled]: disabled,
    }, sizeClassName, variantClassName, rootClass);
    return (React.createElement(ButtonBase, Object.assign({}, rest, { ref: ref, classes: {
            root: rootClassName,
            focusVisible: cx(classes.focusVisible),
        }, onClick: getClickHandler(loading, onClick), className: className, style: style, disabled: disabled, title: title, value: value, type: type, component: as, "data-component-type": 'button' }),
        React.createElement(Container, { as: 'span', inline: true, flex: true, direction: 'row', alignItems: 'center', className: cx({ [hiddenClass]: loading }, contentClass) }, finalChildren),
        loading && (React.createElement(Loader, { variant: 'inherit', className: loaderClass, inline: true, size: 'small' }))));
});
Button.defaultProps = {
    active: false,
    as: 'button',
    children: null,
    disabled: false,
    focused: false,
    fullWidth: false,
    hovered: false,
    iconPosition: 'left',
    loading: false,
    onClick: noop,
    size: 'medium',
    type: 'button',
    variant: 'primary',
};
Button.displayName = 'Button';
export default Button;
//# sourceMappingURL=Button.js.map