/* eslint-disable complexity */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import { spacingToRem, } from '@toptal/picasso-shared';
import styles from './styles';
import kebabToCamelCase from '../utils/kebab-to-camel-case';
import { forwardRef, documentable } from '../utils/forward-ref';
const useStyles = makeStyles(styles, {
    name: 'PicassoContainer',
});
/**
 * Container component used for spacing 2 elements
 */
export const Container = documentable(forwardRef((props, ref) => {
    const { children, className, top, bottom, left, right, padded, inline, flex, direction, alignItems, justifyContent, style, bordered = false, rounded = false, variant, align, gap, as: Component = inline ? 'span' : 'div', 
    // Avoid passing external classes inside the rest props
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    classes: externalClasses } = props, rest = __rest(props, ["children", "className", "top", "bottom", "left", "right", "padded", "inline", "flex", "direction", "alignItems", "justifyContent", "style", "bordered", "rounded", "variant", "align", "gap", "as", "classes"]);
    const classes = useStyles(props);
    const margins = Object.assign(Object.assign(Object.assign(Object.assign({}, (typeof top === 'number' && { marginTop: spacingToRem(top) })), (typeof bottom === 'number' && {
        marginBottom: spacingToRem(bottom),
    })), (typeof left === 'number' && { marginLeft: spacingToRem(left) })), (typeof right === 'number' && { marginRight: spacingToRem(right) }));
    return (React.createElement(Component, Object.assign({}, rest, { ref: ref, className: cx(classes[`${variant}Variant`], {
            [classes[`${padded}Padding`]]: typeof padded === 'string',
            [classes[`${gap}Gap`]]: typeof gap === 'string',
            [classes[`top${top}Margin`]]: typeof top === 'string',
            [classes[`bottom${bottom}Margin`]]: typeof bottom === 'string',
            [classes[`left${left}Margin`]]: typeof left === 'string',
            [classes[`right${right}Margin`]]: typeof right === 'string',
            [classes[`${align}TextAlign`]]: typeof align === 'string',
            [classes[`${kebabToCamelCase(alignItems || '')}AlignItems`]]: alignItems,
            [classes[`${kebabToCamelCase(justifyContent || '')}JustifyContent`]]: justifyContent,
            [classes.bordered]: bordered,
            [classes.rounded]: rounded,
            [classes.flex]: flex,
            [classes.inline]: inline,
            [classes[kebabToCamelCase(direction || '')]]: direction && direction !== 'row',
        }, className), style: Object.assign(Object.assign(Object.assign(Object.assign({}, margins), (typeof padded === 'number' && {
            padding: spacingToRem(padded),
        })), (typeof gap === 'number' && { gap: spacingToRem(gap) })), style) }), children));
}));
Container.displayName = 'Container';
Container.defaultProps = {
    as: 'div',
    inline: false,
};
export default Container;
//# sourceMappingURL=Container.js.map