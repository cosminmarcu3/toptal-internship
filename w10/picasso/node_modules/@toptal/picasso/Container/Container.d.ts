import React, { ReactNode, HTMLAttributes } from 'react';
import { PropTypes } from '@material-ui/core';
import { StandardProps, SpacingType } from '@toptal/picasso-shared';
import { AlignItemsType, JustifyContentType, VariantType } from './styles';
declare type ContainerType = 'div' | 'span';
declare type DirectionType = 'row' | 'column' | 'row-reverse' | 'column-reverse';
declare type BorderableType = 'transparent' | 'white';
export interface Props<V extends VariantType = VariantType> extends StandardProps, HTMLAttributes<HTMLDivElement | HTMLSpanElement> {
    /** Content of Container */
    children: ReactNode;
    /** margin-top for the container transformed to `rem` */
    top?: SpacingType;
    /** margin-bottom for the container transformed to `rem` */
    bottom?: SpacingType;
    /** margin-left for the container transformed to `rem` */
    left?: SpacingType;
    /** margin-right for the container transformed to `rem` */
    right?: SpacingType;
    /** padding for the container transformed to `rem` */
    padded?: SpacingType;
    /** Whether container should act as inline element `display: inline-block` */
    inline?: boolean;
    /** Use flexbox */
    flex?: boolean;
    /** Set flex direction */
    direction?: DirectionType;
    /** Defines the align-items style property */
    alignItems?: AlignItemsType;
    /** Defines the justify-content style property */
    justifyContent?: JustifyContentType;
    /** Whether (`white`, `transparent`) container has border or not */
    bordered?: V extends BorderableType ? boolean : never;
    /** Whether container has 8px border-radius applied or not */
    rounded?: boolean;
    /** Style variant of Notification */
    variant?: V;
    /** Gap between elements for a flex container */
    gap?: SpacingType;
    /** Component used for the root node */
    as?: ContainerType;
    /** Text align of the inner text */
    align?: PropTypes.Alignment;
}
/**
 * Container component used for spacing 2 elements
 */
export declare const Container: import("../utils/forward-ref").Component<(<V extends "blue" | "green" | "grey" | "red" | "transparent" | "white" | "yellow">(props: Props<V> & {
    ref?: React.Ref<HTMLDivElement> | undefined;
}) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null), unknown>;
export default Container;
export type { VariantType };
