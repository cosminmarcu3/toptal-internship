import capitalize from '@material-ui/core/utils/capitalize';
import { createStyles } from '@material-ui/core/styles';
import { spacingToRem } from '@toptal/picasso-shared';
import kebabToCamelCase from '../utils/kebab-to-camel-case';
const textAlignVariants = [
    'inherit',
    'left',
    'center',
    'right',
    'justify',
];
const alignItemsVariants = [
    'flex-start',
    'flex-end',
    'center',
    'stretch',
    'baseline',
];
const justifyContentVariants = [
    'flex-start',
    'flex-end',
    'center',
    'space-between',
    'space-around',
    'space-evenly',
];
const directionVariants = ['top', 'left', 'bottom', 'right'];
const spacingVariants = [
    'xsmall',
    'small',
    'medium',
    'large',
    'xlarge',
];
const containerVariants = [
    'transparent',
    'red',
    'green',
    'white',
    'yellow',
    'blue',
    'grey',
];
const paddings = spacingVariants.reduce((acc, variant) => {
    acc[`${variant}Padding`] = {
        padding: spacingToRem(variant),
    };
    return acc;
}, Object.create(null));
const gaps = spacingVariants.reduce((acc, variant) => {
    acc[`${variant}Gap`] = {
        gap: spacingToRem(variant),
    };
    return acc;
}, Object.create(null));
const colorVariant = (colorOptions) => {
    var _a;
    if (!colorOptions) {
        return {};
    }
    return {
        backgroundColor: (_a = colorOptions.lighter2) !== null && _a !== void 0 ? _a : colorOptions.lighter,
    };
};
const marginClassDef = (direction, spacing) => ({
    [`margin${capitalize(direction)}`]: spacingToRem(spacing),
});
const marginClasses = (direction) => {
    return {
        [`${direction}${'xsmall'}Margin`]: marginClassDef(direction, 'xsmall'),
        [`${direction}${'small'}Margin`]: marginClassDef(direction, 'small'),
        [`${direction}${'medium'}Margin`]: marginClassDef(direction, 'medium'),
        [`${direction}${'large'}Margin`]: marginClassDef(direction, 'large'),
        [`${direction}${'xlarge'}Margin`]: marginClassDef(direction, 'xlarge'),
    };
};
const margins = Object.assign(Object.assign(Object.assign(Object.assign({}, marginClasses('top')), marginClasses('left')), marginClasses('bottom')), marginClasses('right'));
const alignItems = {};
alignItemsVariants.forEach(variant => {
    alignItems[`${kebabToCamelCase(variant)}AlignItems`] = {
        alignItems: variant,
    };
});
const textAlignItems = {};
textAlignVariants.forEach(variant => {
    textAlignItems[`${variant}TextAlign`] = {
        textAlign: variant,
    };
});
const justifyContent = {};
justifyContentVariants.forEach(variant => {
    justifyContent[`${kebabToCamelCase(variant)}JustifyContent`] = {
        justifyContent: variant,
    };
});
export default ({ palette, sizes: { borderRadius } }) => createStyles(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ bordered: {
        border: `1px solid ${palette.grey.lighter2}`,
    }, rounded: {
        borderRadius: borderRadius.medium,
    }, flex: {
        display: 'flex',
        '&$inline': {
            display: 'inline-flex',
        },
    }, column: {
        flexDirection: 'column',
    }, rowReverse: {
        flexDirection: 'row-reverse',
    }, columnReverse: {
        flexDirection: 'column-reverse',
    }, inline: {
        display: 'inline-block',
    }, whiteVariant: {
        backgroundColor: palette.common.white,
    }, redVariant: colorVariant(palette.red), greenVariant: colorVariant(palette.green), yellowVariant: colorVariant(palette.yellow), blueVariant: colorVariant(palette.blue), greyVariant: colorVariant(palette.grey) }, paddings), margins), alignItems), justifyContent), textAlignItems), gaps));
//# sourceMappingURL=styles.js.map