import { useState, useEffect, useCallback, useMemo } from 'react';
const useHighlightedIndex = ({ flatOptions, isOpen, selection }) => {
    const [highlightedIndex, setHighlightedIndex] = useState(0);
    const selectedIndicies = useMemo(() => flatOptions.reduce((acc, option, index) => selection.isOptionSelected(option) ? [...acc, index] : acc, []), [selection, flatOptions]);
    const nonDisabledIndicies = useMemo(() => flatOptions.reduce((acc, option, index) => (!option.disabled ? [...acc, index] : acc), []), [flatOptions]);
    const handleChange = useCallback((nextIndex) => !flatOptions[nextIndex].disabled && setHighlightedIndex(nextIndex), [flatOptions]);
    // Reset index on close/options change
    useEffect(() => {
        const hasSelectedAndNonDisabledOption = selectedIndicies.length === 1 &&
            !flatOptions[selectedIndicies[0]].disabled;
        const nextHighlightedIndex = hasSelectedAndNonDisabledOption
            ? selectedIndicies[0]
            : nonDisabledIndicies[0];
        setHighlightedIndex(nextHighlightedIndex);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isOpen, flatOptions]);
    return [highlightedIndex, handleChange];
};
export default useHighlightedIndex;
//# sourceMappingURL=use-highlighted-index.js.map