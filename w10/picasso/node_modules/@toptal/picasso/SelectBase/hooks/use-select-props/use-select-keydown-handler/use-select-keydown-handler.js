import { useCallback } from 'react';
import { normalizeArrowKey, focusRef } from '../../../utils';
const useSelectKeyDownHandler = ({ selectProps: { onKeyDown, native }, searchInputRef, selectState: { isOpen, showSearch }, handleArrowsKeyDown, handleEnterOrSpaceKeyDown, handleEscapeKeyDown, }) => 
// eslint-disable-next-line complexity
useCallback(
// eslint-disable-next-line complexity
(event) => {
    if (native) {
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);
        // for the native select we don't want to prevent defaults for the event
        // and don't need any manual operations for keydown event
        return;
    }
    const key = normalizeArrowKey(event);
    const isCharacterKey = key.length === 1;
    if (key === 'ArrowUp' || key === 'ArrowDown') {
        handleArrowsKeyDown(key, event);
    }
    else if (key === 'Enter' || key === ' ') {
        handleEnterOrSpaceKeyDown(event);
    }
    else if (key === 'Escape') {
        handleEscapeKeyDown(event);
    }
    else if (key === 'Tab' && isOpen && showSearch) {
        event.preventDefault();
        focusRef(searchInputRef);
    }
    else if (isCharacterKey || key === 'Backspace') {
        focusRef(searchInputRef);
    }
    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);
}, [
    native,
    onKeyDown,
    searchInputRef,
    isOpen,
    showSearch,
    handleArrowsKeyDown,
    handleEnterOrSpaceKeyDown,
    handleEscapeKeyDown,
]);
export default useSelectKeyDownHandler;
//# sourceMappingURL=use-select-keydown-handler.js.map