import React, { ReactNode, HTMLAttributes } from 'react';
import { PaperProps } from '@material-ui/core/Paper';
import { StandardProps, SizeType, TransitionProps } from '@toptal/picasso-shared';
declare type ContainerValue = HTMLElement | (() => HTMLElement);
declare type Alignment = 'top' | 'centered';
export interface Props extends StandardProps, HTMLAttributes<HTMLDivElement> {
    /** Content of Modal component */
    children: ReactNode;
    /** Whether modal should be displayed */
    open: boolean;
    /** Width of modal */
    size?: SizeType<'small' | 'medium' | 'large'> | 'full-screen';
    /** Callback executed when backdrop was clicked */
    onBackdropClick?: () => void;
    /** If `true`, clicking the backdrop will not fire `onClose` or `onBackdropClick` */
    disableBackdropClick?: boolean;
    /** Callback executed when attempting to close modal */
    onClose?: () => void;
    /** Callback executed when modal is being opened */
    onOpen?: () => void;
    /** A node, or a function that returns node. The container will have the portal children appended to it. */
    container?: ContainerValue;
    /** If `true`, the backdrop is not rendered */
    hideBackdrop?: boolean;
    /** Position of the modal relative to the browser's viewport */
    align?: Alignment;
    /** Animation lifecycle callbacks. Backed by [react-transition-group/Transition](https://reactcommunity.org/react-transition-group/transition#Transition-props) */
    transitionProps?: TransitionProps;
    transitionDuration?: number;
    paperProps?: PaperProps;
    testIds?: {
        closeButton?: string;
    };
}
export declare const Modal: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLElement>>;
export default Modal;
