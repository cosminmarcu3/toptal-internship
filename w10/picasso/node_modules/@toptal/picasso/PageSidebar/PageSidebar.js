import { makeStyles } from '@material-ui/core/styles';
import { useSidebar } from '@toptal/picasso-provider';
import cx from 'classnames';
import React, { forwardRef, useCallback, useEffect, useState, } from 'react';
import ButtonCircular from '../ButtonCircular';
import Container from '../Container';
import { BackMinor16, ChevronRight16 } from '../Icon';
import { PageHamburgerPortal, usePortalToHamburger } from '../PageHamburger';
import SidebarItem from '../SidebarItem';
import SidebarLogo from '../SidebarLogo';
import SidebarMenu from '../SidebarMenu';
import { noop, useBreakpoint } from '../utils';
import { SidebarContextProvider } from './SidebarContextProvider';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PageSidebar',
});
export const PageSidebar = forwardRef(function Sidebar(props, ref) {
    const { children, variant = 'light', className, style, collapsible, defaultCollapsed, testIds, size = 'medium', wrapperMaxHeight, disableSticky, onCollapse } = props;
    const classes = useStyles();
    const { setHasSidebar } = useSidebar();
    const [isCollapsed, setIsCollapsed] = useState(!!defaultCollapsed);
    const [isHovered, setIsHovered] = useState(false);
    const [expandedItemKey, setExpandedItemKey] = useState(null);
    useEffect(() => {
        // Clear expanded submenu on sidebar collapse
        if (isCollapsed) {
            setExpandedItemKey(null);
        }
    }, [isCollapsed]);
    useEffect(() => {
        setHasSidebar(true);
        return function cleanup() {
            setHasSidebar(false);
        };
    }, [setHasSidebar]);
    usePortalToHamburger();
    const isCompactLayout = useBreakpoint(['small', 'medium']);
    const handleCollapseButtonClick = useCallback(() => {
        setIsCollapsed(previousState => !previousState);
        onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse();
    }, [setIsCollapsed]);
    const sidebar = (React.createElement(Container, { ref: ref, flex: true, direction: 'column', style: style, className: cx(classes.root, className, classes[variant], classes[size], {
            [classes.rootCollapsed]: collapsible && isCollapsed,
        }), "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.container, onMouseEnter: collapsible ? () => setIsHovered(true) : noop, onMouseLeave: collapsible ? () => setIsHovered(false) : noop },
        React.createElement("div", { style: {
                maxHeight: wrapperMaxHeight,
            }, className: cx(classes.wrapper, {
                [classes.sticky]: !disableSticky,
            }) },
            React.createElement(Container, { flex: true, direction: 'column', className: classes.scrollableContent, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.scrollableContainer },
                collapsible && (React.createElement(ButtonCircular, { className: cx(classes.collapseButton, {
                        [classes.buttonVisible]: isHovered,
                    }), onClick: handleCollapseButtonClick, icon: isCollapsed ? React.createElement(ChevronRight16, null) : React.createElement(BackMinor16, null), "aria-label": 'collapse sidebar', variant: 'primary', "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.collapseButton })),
                React.createElement("div", { className: classes.spacer }),
                React.createElement(SidebarContextProvider, { isCollapsed: isCollapsed, isHovered: isHovered, variant: variant, expandedItemKey: expandedItemKey, setExpandedItemKey: setExpandedItemKey }, children)))));
    return isCompactLayout ? (React.createElement(PageHamburgerPortal, null, children)) : (sidebar);
});
PageSidebar.defaultProps = {
    variant: 'light',
    size: 'medium',
};
PageSidebar.displayName = 'PageSidebar';
export default Object.assign(PageSidebar, {
    Menu: SidebarMenu,
    Item: SidebarItem,
    Logo: SidebarLogo,
});
//# sourceMappingURL=PageSidebar.js.map