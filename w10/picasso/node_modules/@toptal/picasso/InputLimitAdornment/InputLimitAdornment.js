import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import { InputAdornment } from '@material-ui/core';
import styles from './styles';
import InputMultilineAdornment from '../InputMultilineAdornment';
const useStyles = makeStyles(styles, {
    name: 'PicassoInputLimitAdornment',
});
const hasRemainingCounter = (counter) => counter === 'remaining';
const formatCharacters = (count) => count === 1 ? 'character' : 'characters';
const getCharsTillLimit = (charsLength, counter, limit) => (hasRemainingCounter(counter) ? limit - charsLength : charsLength);
const getMultilineLabel = ({ multiline, charsTillLimit, counter, }) => {
    if (!multiline) {
        return null;
    }
    if (hasRemainingCounter(counter)) {
        return charsTillLimit >= 0
            ? `${formatCharacters(charsTillLimit)} left`
            : 'over the limit';
    }
    return `${formatCharacters(charsTillLimit)} entered`;
};
const InputLimitAdornment = (props) => {
    const classes = useStyles();
    const { multiline, charsLength, counter, limit, testIds } = props;
    const charsTillLimit = getCharsTillLimit(charsLength, counter, limit);
    const multilineLabel = getMultilineLabel({
        multiline,
        charsTillLimit,
        counter,
    });
    const error = charsTillLimit <= 0;
    if (multiline) {
        return (React.createElement(InputMultilineAdornment, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.inputAdornment, error: error },
            React.createElement("span", { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.message },
                React.createElement("span", { translate: 'no' }, Math.abs(charsTillLimit)),
                ' ',
                React.createElement("span", null, multilineLabel))));
    }
    return (React.createElement(InputAdornment, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.inputAdornment, position: 'end', disablePointerEvents: true, className: cx(classes.limiterLabel, {
            [classes.limiterLabelError]: error,
        }) },
        React.createElement("span", { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.message },
            React.createElement("span", { translate: 'no' }, charsTillLimit),
            ' ',
            React.createElement("span", null, multilineLabel))));
};
export default InputLimitAdornment;
//# sourceMappingURL=InputLimitAdornment.js.map