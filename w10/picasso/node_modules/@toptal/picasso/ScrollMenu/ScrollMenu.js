var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import { useIsomorphicLayoutEffect } from '../utils';
import Menu from '../Menu';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoScrollMenu',
});
const getMenuSelectedNode = (menuRef, selectedIndex) => {
    var _a;
    return typeof selectedIndex === 'number'
        ? (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.children[selectedIndex]
        : undefined;
};
export const scrollToSelection = (menuRef, selectedIndex) => {
    const menuNode = menuRef.current;
    const selectedNode = getMenuSelectedNode(menuRef, selectedIndex);
    if (!menuNode || !selectedNode) {
        return;
    }
    const menuRect = menuNode.getBoundingClientRect();
    const selectedRect = selectedNode.getBoundingClientRect();
    if (selectedRect.top < menuRect.top) {
        menuNode.scrollTop -= menuRect.top - selectedRect.top;
    }
    else if (selectedRect.bottom > menuRect.bottom) {
        menuNode.scrollTop += selectedRect.bottom - menuRect.bottom;
    }
};
const preventClick = (e) => {
    // ScrollMenu is used in dropdowns.
    // When clicking on the scrollView, the dropdown should not close.
    e.preventDefault();
};
const ScrollMenu = (props) => {
    const { selectedIndex, onBlur, children, style, fixedHeader, fixedFooter, className, role, testIds, 'data-testid': dataTestId } = props, rest = __rest(props, ["selectedIndex", "onBlur", "children", "style", "fixedHeader", "fixedFooter", "className", "role", "testIds", 'data-testid']);
    const classes = useStyles();
    const menuRef = useRef(null);
    useIsomorphicLayoutEffect(() => scrollToSelection(menuRef, selectedIndex), [selectedIndex]);
    return (React.createElement(Menu, Object.assign({ className: cx(classes.menu, className), style: style, role: role, "data-testid": dataTestId || (testIds === null || testIds === void 0 ? void 0 : testIds.root) }, rest),
        fixedHeader,
        React.createElement("div", { onMouseDown: preventClick },
            React.createElement("div", { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.list, ref: menuRef, className: classes.scrollView, onBlur: onBlur }, children),
            fixedFooter)));
};
ScrollMenu.defaultProps = {
    role: 'menu',
};
ScrollMenu.displayName = 'ScrollMenu';
export default ScrollMenu;
//# sourceMappingURL=ScrollMenu.js.map