import React, { useState } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import ButtonCircular from '../ButtonCircular';
import { useHamburgerContext } from './PageHamburgerContext';
import Dropdown from '../Dropdown';
import { Close16, Overview16 } from '../Icon';
import { useBreakpoint } from '../utils';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PageHamburger',
});
const PageHamburger = ({ id }) => {
    const { isHamburgerVisible } = useHamburgerContext();
    const [showContent, setShowContent] = useState(false);
    const classes = useStyles();
    const isCompactLayout = useBreakpoint(['small', 'medium']);
    const handleShowContent = () => setShowContent(true);
    const handleHideContent = () => setShowContent(false);
    return (React.createElement(Dropdown, { content: React.createElement("div", { id: id }), className: cx(classes.responsiveWrapper, {
            [classes.hidden]: !isCompactLayout || !isHamburgerVisible,
        }), classes: { content: classes.responsiveWrapperContent }, offset: { top: 0.4 }, popperOptions: {
            modifiers: {
                flip: { enabled: false },
                preventOverflow: {
                    padding: 0,
                },
            },
        }, popperProps: {
            role: 'navigation',
        }, onOpen: handleShowContent, onClose: handleHideContent, keepMounted: true },
        React.createElement(ButtonCircular, { icon: showContent ? (React.createElement(Close16, null)) : (React.createElement(Overview16, { className: classes.hamburger })), variant: 'transparent' })));
};
export default PageHamburger;
//# sourceMappingURL=PageHamburger.js.map