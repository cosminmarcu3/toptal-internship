var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import { Stepper as MUIStepper } from '@material-ui/core';
import Step from '../Step';
import StepLabel from '../StepLabel';
import '../StepIcon';
import StepConnector from '../StepConnector';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'PicassoStepper' });
const Stepper = forwardRef((props, ref) => {
    const { active = 0, steps = [], hideLabels = false, className, style, titleCase, direction = 'horizontal', overflowEllipsis = false } = props, rest = __rest(props, ["active", "steps", "hideLabels", "className", "style", "titleCase", "direction", "overflowEllipsis"]);
    const classes = useStyles();
    return (React.createElement(MUIStepper, Object.assign({}, rest, { ref: ref, activeStep: active, connector: React.createElement(StepConnector, { direction: direction }), className: cx(classes.root, className), style: style, orientation: direction }), steps.map((label, stepIndex) => (React.createElement(Step, { key: label },
        React.createElement(StepLabel, { active: stepIndex === active, hideLabel: hideLabels, titleCase: titleCase, overflowEllipsis: overflowEllipsis }, label))))));
});
Stepper.defaultProps = {
    active: 0,
    hideLabels: false,
    direction: 'horizontal',
    overflowEllipsis: false,
    steps: [],
};
Stepper.displayName = 'Stepper';
export default Stepper;
//# sourceMappingURL=Stepper.js.map