var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable complexity */
import React, { useContext, forwardRef, } from 'react';
import cx from 'classnames';
import { usePageTopBar } from '@toptal/picasso-provider';
import { makeStyles } from '@material-ui/core/styles';
import Logo from '../Logo';
import Container from '../Container';
import PageHamburger, { PageHamburgerPortal, useHamburgerContext, } from '../PageHamburger';
import Typography from '../Typography';
import { PageContext } from '../Page';
import { useBreakpoint, useIsomorphicLayoutEffect } from '../utils';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoTopBar',
});
export const PageTopBar = forwardRef(function PageTopBar(props, ref) {
    const { className, style, title, logoLink, logo, centerContent, leftContent, rightContent, actionItems, variant = 'dark' } = props, rest = __rest(props, ["className", "style", "title", "logoLink", "logo", "centerContent", "leftContent", "rightContent", "actionItems", "variant"]);
    const classes = useStyles();
    const isCompactLayout = useBreakpoint(['small', 'medium']);
    const { setHasTopBar } = usePageTopBar();
    useIsomorphicLayoutEffect(() => {
        setHasTopBar(true);
        return function cleanup() {
            setHasTopBar(false);
        };
    }, [setHasTopBar]);
    const { width, fullWidth } = useContext(PageContext);
    const { hamburgerId } = useHamburgerContext();
    const isDark = ['dark', 'grey'].includes(variant);
    const logoDefault = (React.createElement(Logo, { variant: isDark ? 'white' : 'default', emblem: isCompactLayout, className: classes.logo }));
    const logoComponent = logo || logoDefault;
    const titleComponent = title && (React.createElement(Container, { left: 'small', flex: true, alignItems: 'center' },
        React.createElement("div", { className: cx(classes.divider, { [classes.dividerBlue]: !isDark }) }),
        React.createElement(Container, { left: 'small' },
            React.createElement(Typography, { invert: isDark }, title))));
    const responsiveCenterContent = isCompactLayout ? (React.createElement(PageHamburgerPortal, null, centerContent)) : (React.createElement(Container, { flex: true, alignItems: 'center' }, centerContent));
    const innerClassName = cx({
        [classes.fullWidth]: fullWidth || width === 'full',
        [classes.wide]: width === 'wide',
    }, classes.content);
    return (React.createElement("div", { className: classes.wrapper },
        React.createElement("header", Object.assign({}, rest, { ref: ref, className: cx('mui-fixed', classes.root, classes[variant], className), style: style }),
            React.createElement("div", { className: innerClassName },
                React.createElement("div", { className: classes.left },
                    React.createElement(Container, { className: classes.logoContainer, flex: true, alignItems: 'center' }, logoLink
                        ? React.cloneElement(logoLink, {}, logoComponent)
                        : logoComponent),
                    !isCompactLayout && titleComponent,
                    leftContent),
                centerContent && responsiveCenterContent,
                React.createElement("div", { className: classes.right },
                    !isCompactLayout && actionItems,
                    rightContent))),
        React.createElement(PageHamburger, { id: hamburgerId })));
});
PageTopBar.defaultProps = {
    variant: 'dark',
};
PageTopBar.displayName = 'PageTopBar';
export default PageTopBar;
//# sourceMappingURL=PageTopBar.js.map