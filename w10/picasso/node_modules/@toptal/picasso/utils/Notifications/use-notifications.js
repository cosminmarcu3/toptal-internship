import React, { forwardRef, useMemo, useCallback, } from 'react';
import cx from 'classnames';
import { useSnackbar } from 'notistack';
import { makeStyles } from '@material-ui/core/styles';
import { Notification as PicassoNotification, } from '../../Notification';
import styles from './styles';
const defaultPosition = {
    vertical: 'top',
    horizontal: 'right',
};
const useStyles = makeStyles(styles, {
    name: 'PicassoNotification',
});
const StyledNotification = 
// eslint-disable-next-line react/display-name
forwardRef(function Notification(props, ref) {
    const { content, icon, key, onClose, variant = 'white' } = props;
    const classes = useStyles();
    return (React.createElement(PicassoNotification, { variant: variant, elevated: true, icon: icon, key: key, onClose: onClose, className: cx({
            [classes.generalNotification]: variant === 'white',
            [classes.formNotification]: variant !== 'white',
        }), ref: ref }, content));
});
export const useNotifications = () => {
    const { enqueueSnackbar, closeSnackbar } = useSnackbar();
    const getNotification = useCallback(() => (notificationElement, options) => {
        const closeNotification = () => {
            if (!notificationId) {
                return;
            }
            closeSnackbar(notificationId);
            if (notificationElement.props.onClose) {
                notificationElement.props.onClose();
            }
        };
        const notificationId = enqueueSnackbar('', Object.assign({ anchorOrigin: defaultPosition, content: (key) => React.cloneElement(notificationElement, {
                key,
                onClose: closeNotification,
            }) }, options));
        return notificationId;
    }, [closeSnackbar, enqueueSnackbar]);
    const getPicassoNotification = useCallback((variant) => (content, icon, options) => {
        const notificationComponent = (React.createElement(StyledNotification, { content: content, icon: icon, variant: variant }));
        const showNotificaiton = getNotification();
        const notificationId = showNotificaiton(notificationComponent, options);
        return notificationId;
    }, [getNotification]);
    return {
        showError: useMemo(() => getPicassoNotification('red'), [getPicassoNotification]),
        showInfo: useMemo(() => getPicassoNotification(), [getPicassoNotification]),
        showSuccess: useMemo(() => getPicassoNotification('green'), [getPicassoNotification]),
        showCustom: useMemo(() => getNotification(), [getNotification]),
        closeNotification: closeSnackbar,
    };
};
//# sourceMappingURL=use-notifications.js.map