var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable react/no-array-index-key */
import React, { forwardRef, useMemo } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Button from '../Button';
import Container from '../Container';
import Typography from '../Typography';
import { getRange, ELLIPSIS } from './utils';
import styles from './styles';
import PaginationButton from '../PaginationButton';
const useStyles = makeStyles(styles, {
    name: 'PicassoPagination',
});
export const Pagination = forwardRef(function Pagination(props, ref) {
    const { activePage, disabled, totalPages, onPageChange, siblingCount = 2, variant } = props, rest = __rest(props, ["activePage", "disabled", "totalPages", "onPageChange", "siblingCount", "variant"]);
    const classes = useStyles();
    const pages = useMemo(() => getRange({ activePage, totalPages, siblingCount }), [activePage, totalPages, siblingCount]);
    if (pages.length <= 1) {
        return null;
    }
    const isFirstActive = activePage === 1;
    const isLastActive = activePage === totalPages;
    const handlePrevClick = () => onPageChange(activePage - 1);
    const handleNextClick = () => onPageChange(activePage + 1);
    const pageButtons = pages.map((page, index) => {
        if (page === ELLIPSIS) {
            return (React.createElement(Container, { key: index, className: classes.ellipsis },
                React.createElement(Typography, { size: 'xsmall', weight: 'semibold', color: 'black' }, ELLIPSIS)));
        }
        return (React.createElement(PaginationButton, { key: index, className: classes.button, page: Number(page), activePage: activePage, disabled: disabled, onClick: onPageChange }));
    });
    return (React.createElement(Container, Object.assign({}, rest, { ref: ref, flex: true, inline: true, alignItems: 'center' }),
        React.createElement(Button, { className: classes.button, disabled: isFirstActive || disabled, onClick: handlePrevClick, variant: 'secondary', size: 'small' }, "Prev"),
        variant === 'compact' ? null : pageButtons,
        React.createElement(Button, { className: classes.button, disabled: isLastActive || disabled, onClick: handleNextClick, variant: 'secondary', size: 'small' }, "Next")));
});
Pagination.defaultProps = {
    disabled: false,
    siblingCount: 2,
    variant: 'default',
};
Pagination.displayName = 'Pagination';
export default Pagination;
//# sourceMappingURL=Pagination.js.map