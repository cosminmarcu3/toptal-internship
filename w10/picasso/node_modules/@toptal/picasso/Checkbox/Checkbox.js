var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Checkbox as MUICheckbox } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import React, { forwardRef } from 'react';
import Container from '../Container';
import FormControlLabel from '../FormControlLabel';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'PicassoCheckbox' });
export const Checkbox = forwardRef(function Checkbox(props, ref) {
    const { label, id, className, style, disabled, requiredDecoration, onChange, value, checked, indeterminate, titleCase } = props, rest = __rest(props, ["label", "id", "className", "style", "disabled", "requiredDecoration", "onChange", "value", "checked", "indeterminate", "titleCase"]);
    const classes = useStyles();
    const rootClasses = {
        root: classes.root,
        disabled: classes.disabled,
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { color } = rest, checkboxAttributes = __rest(rest, ["color"]);
    const muiCheckbox = (React.createElement(Container, { as: 'span', flex: true, inline: true, className: classes.checkboxWrapper },
        React.createElement(MUICheckbox, Object.assign({}, checkboxAttributes, { ref: label ? undefined : ref, checked: checked, icon: React.createElement("div", { className: classes.uncheckedIcon }), checkedIcon: React.createElement("div", { className: classes.checkedIcon }), indeterminateIcon: React.createElement("div", { className: classes.indeterminateIcon }), classes: rootClasses, className: cx(className, {
                [classes.withLabel]: Boolean(label),
            }), style: style, disabled: disabled, id: id, indeterminate: indeterminate, onChange: onChange, value: value, focusVisibleClassName: classes.focused }))));
    if (!label) {
        return muiCheckbox;
    }
    const externalEventListeners = {
        onMouseLeave: rest.onMouseLeave,
        onMouseOver: rest.onMouseOver,
    };
    return (React.createElement(FormControlLabel, Object.assign({}, externalEventListeners, { ref: ref, classes: Object.assign(Object.assign({}, rootClasses), { label: classes.label }), control: muiCheckbox, requiredDecoration: requiredDecoration, disabled: disabled, label: label, titleCase: titleCase, className: 'picasso-checkbox' })));
});
Checkbox.defaultProps = {
    disabled: false,
    indeterminate: false,
    onChange: () => { },
};
Checkbox.displayName = 'Checkbox';
export default Checkbox;
//# sourceMappingURL=Checkbox.js.map