var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useRef } from 'react';
import cx from 'classnames';
import { NativeSelect as MUINativeSelect } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import capitalize from '@material-ui/core/utils/capitalize';
import OutlinedInput from '../OutlinedInput';
import SelectCaret from '../SelectCaret';
import { getOptionText, useAdornments, useSelectState, useSelectProps, renderOption as defaultRenderOption, } from '../SelectBase';
import NativeSelectOptions from '../NativeSelectOptions';
import NativeSelectPlaceholder from '../NativeSelectPlaceholder';
import { documentable, forwardRef, noop, useCombinedRefs } from '../utils';
import styles from './styles';
const useStyles = makeStyles(styles);
const DEFAULT_EMPTY_ARRAY_VALUE = [];
export const NativeSelect = documentable(forwardRef((props, ref) => {
    const { className, style, width = 'full', loading, id, icon, iconPosition = 'start', name, renderOption = defaultRenderOption, placeholder, disabled, error, status, multiple, value = multiple ? DEFAULT_EMPTY_ARRAY_VALUE : '', size, enableReset, onChange, options, getDisplayValue = getOptionText, 
    /* eslint-disable @typescript-eslint/no-unused-vars */
    menuWidth, noOptionsText, popperContainer, enableAutofill, autoComplete, searchPlaceholder, searchThreshold, limit, native, testIds } = props, 
    /* eslint-enable @typescript-eslint/no-unused-vars */
    rest = __rest(props, ["className", "style", "width", "loading", "id", "icon", "iconPosition", "name", "renderOption", "placeholder", "disabled", "error", "status", "multiple", "value", "size", "enableReset", "onChange", "options", "getDisplayValue", "menuWidth", "noOptionsText", "popperContainer", "enableAutofill", "autoComplete", "searchPlaceholder", "searchThreshold", "limit", "native", "testIds"]);
    const classes = useStyles();
    const selectRef = useCombinedRefs(ref, useRef(null));
    const inputWrapperRef = useRef(null);
    const selectState = useSelectState({
        getDisplayValue,
        options,
        disabled,
        multiple,
        value,
        limit,
    });
    const { selection, emptySelectValue } = selectState;
    const { getItemProps, getInputProps } = useSelectProps({
        selectRef,
        selectProps: props,
        selectState,
    });
    const [selectStartAdornment, selectEndAdornment] = useAdornments({
        position: iconPosition,
        icon,
        loading,
        disabled,
    });
    const startAdornment = selectStartAdornment && (React.createElement("div", { className: classes.startAdornment }, selectStartAdornment));
    const endAdornment = selectEndAdornment && (React.createElement("div", { className: classes.endAdornment }, selectEndAdornment));
    const nativeSelectComponent = (React.createElement(MUINativeSelect
    // eslint-disable-next-line react/jsx-props-no-spreading
    , Object.assign({}, rest, { ref: selectRef, disabled: disabled, name: name, id: id, startAdornment: startAdornment, endAdornment: endAdornment, input: React.createElement(OutlinedInput, Object.assign({ width: width, inputProps: { multiple }, size: size, className: classes.nativeInput, testIds: testIds, status: error ? 'error' : status }, getInputProps())), value: value, onChange: onChange, IconComponent: () => React.createElement(SelectCaret, { disabled: disabled }), classes: {
            root: cx(classes.select, {
                [classes.placeholder]: !selection.isSelected(),
            }),
            select: cx({
                [classes.startAdornmentPadding]: React.isValidElement(startAdornment),
                [classes.endAdornmentPadding]: React.isValidElement(endAdornment),
            }),
        } }),
        React.createElement(NativeSelectPlaceholder, { emptySelectValue: emptySelectValue, disabled: !enableReset }, placeholder),
        React.createElement(NativeSelectOptions, { options: options, selection: selection, renderOption: renderOption, getItemProps: getItemProps })));
    return (React.createElement("div", { className: cx(classes.root, className, classes[`root${capitalize(width)}`], {
            [classes.rootDisabled]: disabled,
        }), style: style, ref: inputWrapperRef }, nativeSelectComponent));
}));
NativeSelect.defaultProps = {
    disabled: false,
    getDisplayValue: getOptionText,
    iconPosition: 'start',
    loading: false,
    noOptionsText: 'No matches found',
    onChange: noop,
    onBlur: noop,
    renderOption: defaultRenderOption,
    size: 'medium',
    width: 'full',
    searchThreshold: 10,
    enableAutofill: false,
    searchPlaceholder: 'Search',
    status: 'default',
};
NativeSelect.displayName = 'NativeSelect';
export default NativeSelect;
//# sourceMappingURL=NativeSelect.js.map