import React, { useState, useMemo, useRef } from 'react';
import { useIsomorphicLayoutEffect } from '../utils';
import { useTree, TreeViewPropsDefaults, TreeViewSvg, useFinalMargins, } from '../TreeView/shared';
import { findExtremeNodes } from './utils/findExtremeNodes';
const StaticTreeView = (props) => {
    var _a, _b, _c;
    const { data, renderNode, nodeWidth = StaticTreeView.defaultProps.nodeWidth, nodeHeight = StaticTreeView.defaultProps.nodeHeight, } = props;
    const { direction = StaticTreeView.defaultProps.directionProps.direction, variant = StaticTreeView.defaultProps.directionProps.variant, } = (_a = props.directionProps) !== null && _a !== void 0 ? _a : StaticTreeView.defaultProps.directionProps;
    const [verticalMargin, horizontalMargin] = useFinalMargins(direction, (_b = props.directionProps) === null || _b === void 0 ? void 0 : _b.verticalMargin, (_c = props.directionProps) === null || _c === void 0 ? void 0 : _c.horizontalMargin);
    const { nodes, links } = useTree({
        data,
        direction,
        verticalMargin,
        horizontalMargin,
        nodeWidth,
        nodeHeight,
        variant,
    });
    const svgRef = useRef(null);
    const [svgMeasurements, setSvgMeasurements] = useState({
        width: 200,
        height: 400,
        topMostNodeY: 0,
        leftMostNodeX: 0,
    });
    useIsomorphicLayoutEffect(() => {
        var _a, _b;
        if (svgRef.current) {
            const bbox = svgRef.current.getBBox();
            const extremes = findExtremeNodes(nodes);
            setSvgMeasurements({
                width: bbox.width,
                height: bbox.height,
                topMostNodeY: (_a = extremes === null || extremes === void 0 ? void 0 : extremes.topMostNode.y) !== null && _a !== void 0 ? _a : 0,
                leftMostNodeX: (_b = extremes === null || extremes === void 0 ? void 0 : extremes.leftMostNode.x) !== null && _b !== void 0 ? _b : 0,
            });
        }
    }, [svgRef, nodes]);
    const transforms = useMemo(() => {
        return {
            svgViewBox: `0 0 ${svgMeasurements.width} ${svgMeasurements.height}`,
            gTransform: direction === 'horizontal'
                ? `translate(0, ${-1 * svgMeasurements.topMostNodeY})`
                : `translate(${-1 * svgMeasurements.leftMostNodeX}, 0)`,
        };
    }, [svgMeasurements, direction]);
    return (React.createElement(TreeViewSvg, { ref: svgRef, nodes: nodes, links: links, direction: direction, verticalMargin: verticalMargin, horizontalMargin: horizontalMargin, renderNode: renderNode, svgProps: {
            viewBox: transforms.svgViewBox,
        }, graphProps: {
            transform: transforms.gTransform,
        } }));
};
StaticTreeView.defaultProps = TreeViewPropsDefaults;
StaticTreeView.displayName = 'StaticTreeView';
export default StaticTreeView;
//# sourceMappingURL=StaticTreeView.js.map