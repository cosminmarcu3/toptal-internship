import { useRef, useCallback, useState, useEffect } from 'react';
import Glider from 'glider-js';
import isOnLastPage from '../../utils/isOnLastPage';
import useAutoplay from '../useAutoplay';
const useCarousel = ({ autoplay, autoplayDelay, onSlide, rewind, slidesToScroll, slidesToShow, slidesCount, hasDots, }) => {
    const dotsRef = useRef(null);
    const elementRef = useRef(null);
    const wrapperRef = useRef(null);
    const [isLastPage, setLastPage] = useState(false);
    const [isFirstPage, setFirstPage] = useState(!rewind);
    const gliderRef = useRef();
    const handleOnAnimated = useCallback(() => {
        var _a;
        const currentSlide = ((_a = gliderRef.current) === null || _a === void 0 ? void 0 : _a.slide) || 0;
        setLastPage(isOnLastPage({
            currentSlide,
            slidesCount,
            slidesToShow,
        }));
        setFirstPage(currentSlide === 0);
        onSlide === null || onSlide === void 0 ? void 0 : onSlide(currentSlide);
    }, [slidesCount, slidesToShow, onSlide]);
    const initializeGlider = useCallback(() => {
        const element = elementRef.current;
        if (element &&
            !gliderRef.current &&
            (!hasDots || (hasDots && dotsRef.current))) {
            gliderRef.current = new Glider(element, {
                slidesToShow,
                rewind,
                slidesToScroll,
                dots: dotsRef.current,
            });
            element.addEventListener('glider-animated', handleOnAnimated);
        }
    }, [slidesToShow, rewind, slidesToScroll, handleOnAnimated, hasDots]);
    useEffect(() => {
        initializeGlider();
    }, [initializeGlider]);
    const slideNext = useCallback(() => {
        const glider = gliderRef.current;
        const currentSlide = (glider === null || glider === void 0 ? void 0 : glider.slide) || 0;
        const item = isLastPage ? 0 : currentSlide + slidesToScroll;
        glider === null || glider === void 0 ? void 0 : glider.scrollItem(item, false);
    }, [isLastPage, slidesToScroll]);
    const slidePrev = useCallback(() => {
        const glider = gliderRef.current;
        const currentSlide = (glider === null || glider === void 0 ? void 0 : glider.slide) || 0;
        const lastPage = slidesCount - slidesToShow;
        const prevSlide = currentSlide - slidesToScroll;
        const item = currentSlide === 0 ? lastPage : prevSlide;
        glider === null || glider === void 0 ? void 0 : glider.scrollItem(item, false);
    }, [slidesCount, slidesToShow, slidesToScroll]);
    useAutoplay({
        slideNext,
        rewind,
        isLastPage,
        autoplay,
        autoplayDelay,
        wrapperRef,
    });
    const getPrevProps = useCallback(() => ({
        disabled: rewind ? false : isFirstPage,
        onClick: slidePrev,
    }), [rewind, slidePrev, isFirstPage]);
    const getNextProps = useCallback(() => ({
        disabled: rewind ? false : isLastPage,
        onClick: slideNext,
    }), [isLastPage, rewind, slideNext]);
    const getDotsProps = useCallback(() => ({
        ref: dotsRef,
    }), []);
    const getCarouselProps = useCallback(() => ({
        ref: elementRef,
    }), []);
    const getContainerProps = useCallback(() => ({
        ref: wrapperRef,
    }), []);
    return {
        isLastPage,
        getPrevProps,
        getNextProps,
        getDotsProps,
        getContainerProps,
        getCarouselProps,
    };
};
export default useCarousel;
//# sourceMappingURL=useCarousel.js.map