var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useContext, useMemo, useRef, useState, } from 'react';
import ClickAwayListener from '@material-ui/core/ClickAwayListener';
import Grow from '@material-ui/core/Grow';
import RootRef from '@material-ui/core/RootRef';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import { spacingToRem, } from '@toptal/picasso-shared';
import Popper from '../Popper';
import Paper from '../Paper';
import styles from './styles';
import noop from '../utils/noop';
const DropdownContext = React.createContext(null);
export const useDropdownContext = () => {
    const context = useContext(DropdownContext);
    if (!context) {
        throw new Error('Dropdown compound components cannot be rendered outside the Dropdown component');
    }
    return context;
};
const useStyles = makeStyles(styles, {
    name: 'PicassoDropdown',
});
// eslint-disable-next-line react/display-name
export const Dropdown = forwardRef(function Dropdown(props, ref) {
    const { className, style, children, content, offset, placement, disableAutoClose, disableAutoFocus, disablePortal, popperOptions, popperProps, keepMounted, onOpen = noop, popperContainer, onClose = noop, contentStyle, 
    // Avoid passing external classes inside the rest props
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    classes: externalClasses, contentOverflow = 'scroll' } = props, rest = __rest(props, ["className", "style", "children", "content", "offset", "placement", "disableAutoClose", "disableAutoFocus", "disablePortal", "popperOptions", "popperProps", "keepMounted", "onOpen", "popperContainer", "onClose", "contentStyle", "classes", "contentOverflow"]);
    const classes = useStyles(props);
    const contentRef = useRef();
    const [anchorEl, setAnchorEl] = useState();
    const [isOpen, setIsOpen] = useState(false);
    const handleAnchorClick = (event) => {
        if (isOpen) {
            close();
        }
        else {
            open(event);
        }
    };
    const handleContentKeyDown = (event) => {
        if (event.key === 'Tab') {
            event.preventDefault();
        }
        // Always close menu regardless of disableAutoClose
        if (event.key === 'Escape') {
            forceClose();
        }
        if (event.key === 'Enter') {
            close();
        }
        if (event.key === ' ') {
            close();
        }
    };
    const open = (event) => {
        setAnchorEl(event.currentTarget);
        setIsOpen(true);
        onOpen();
    };
    const close = () => {
        if (disableAutoClose) {
            return;
        }
        forceClose();
    };
    const forceClose = () => {
        setAnchorEl(undefined);
        setIsOpen(false);
        onClose();
    };
    const focus = () => {
        if (disableAutoFocus) {
            return;
        }
        if (!contentRef || !contentRef.current) {
            return;
        }
        const { firstChild } = contentRef.current;
        // TODO: add focusable interface to Picasso.Menu and other components that expose focus
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        if (firstChild && firstChild.focus) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            return firstChild.focus();
        }
        if (contentRef.current.focus) {
            return contentRef.current.focus();
        }
    };
    const paperMargins = useMemo(() => {
        if (offset) {
            return Object.assign(Object.assign(Object.assign(Object.assign({}, (offset.top && { marginTop: spacingToRem(offset.top) })), (offset.bottom && { marginBottom: spacingToRem(offset.bottom) })), (offset.left && { marginLeft: spacingToRem(offset.left) })), (offset.right && { marginRight: spacingToRem(offset.right) }));
        }
    }, [offset]);
    // here you can expose other methods, states to child components
    const context = {
        close: () => forceClose(),
    };
    const handleClickAway = (event) => {
        const target = event.target;
        const isAnchorTapEvent = anchorEl && target instanceof Node && anchorEl.contains(target);
        if (isAnchorTapEvent) {
            return;
        }
        forceClose();
    };
    return (React.createElement("div", Object.assign({}, rest, { ref: ref, className: cx(classes.root, className), style: style }),
        React.createElement("div", { className: classes.anchor, onClick: handleAnchorClick }, typeof children === 'function' ? children({ isOpen }) : children),
        (isOpen || keepMounted) && (React.createElement(Popper, Object.assign({ className: classes.popper, anchorEl: anchorEl !== null && anchorEl !== void 0 ? anchorEl : null, popperOptions: Object.assign({ onCreate: focus, 
                /*
                Fixes https://github.com/toptal/picasso/pull/2124#issuecomment-894341054
                When the anchor goes above the viewport, popper goes to infinite flipping.
                flipped: true -> flipped: false -> flipped: true -> ...
                */
                modifiers: { flip: { enabled: contentOverflow !== 'visible' } } }, popperOptions), placement: placement, style: paperMargins, disablePortal: disablePortal, keepMounted: keepMounted, autoWidth: false, open: isOpen, enableCompactMode: true, container: popperContainer }, popperProps),
            React.createElement(ClickAwayListener, { onClickAway: handleClickAway },
                React.createElement("div", { onClick: close },
                    React.createElement(Grow, { in: isOpen, appear: true },
                        React.createElement(Paper, { style: contentStyle, className: cx(classes.content, {
                                [classes.contentVisible]: contentOverflow === 'visible',
                            }), onKeyDown: handleContentKeyDown, elevation: 2 },
                            React.createElement(DropdownContext.Provider, { value: context },
                                React.createElement(RootRef, { rootRef: contentRef }, content))))))))));
});
Dropdown.defaultProps = {
    disableAutoClose: false,
    disableAutoFocus: true,
    disablePortal: false,
    keepMounted: false,
    onClose: noop,
    onOpen: noop,
    placement: 'bottom-end',
    popperOptions: {},
};
Dropdown.displayName = 'Dropdown';
export default Dropdown;
//# sourceMappingURL=Dropdown.js.map