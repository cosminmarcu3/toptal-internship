var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Drawer as MUIDrawer } from '@material-ui/core';
import { makeStyles, useTheme } from '@material-ui/core/styles';
import cx from 'classnames';
import { useDrawer, usePicassoRoot } from '@toptal/picasso-provider';
import React from 'react';
import { CloseMinor16 } from '../Icon';
import styles from './styles';
import ButtonCircular from '../ButtonCircular';
import Container from '../Container';
import DrawerTitle from '../DrawerTitle';
import { useIsomorphicLayoutEffect } from '../utils';
import { useBodyScrollLock } from '../utils/use-body-scroll-lock';
const useStyles = makeStyles(styles, { name: 'PicassoDrawer' });
export const Drawer = (props) => {
    const { children, disablePortal, open, onClose, title, width = 'regular', transitionProps, maintainBodyScrollLock } = props, rest = __rest(props, ["children", "disablePortal", "open", "onClose", "title", "width", "transitionProps", "maintainBodyScrollLock"]);
    const classes = useStyles();
    const { setHasDrawer } = useDrawer();
    const theme = useTheme();
    const container = usePicassoRoot();
    useBodyScrollLock(Boolean(maintainBodyScrollLock && open));
    useIsomorphicLayoutEffect(() => {
        setHasDrawer(open);
        const cleanup = () => {
            setHasDrawer(false);
        };
        return cleanup;
    }, [open, setHasDrawer]);
    const handleOnClose = () => {
        if (onClose) {
            onClose();
        }
    };
    return (React.createElement(MUIDrawer, Object.assign({}, rest, { open: open, onClose: handleOnClose, disablePortal: disablePortal, container: container, ModalProps: { style: { zIndex: theme.zIndex.drawer } }, SlideProps: transitionProps }),
        React.createElement(Container, { flex: true, direction: 'column', className: cx(classes.container, classes[width]) },
            React.createElement(DrawerTitle, { title: title }),
            React.createElement(Container, { flex: true, className: classes.content }, children),
            React.createElement(ButtonCircular, { variant: 'flat', icon: React.createElement(CloseMinor16, null), onClick: handleOnClose, className: classes.closeButton, "aria-label": 'Close drawer' }))));
};
Drawer.displayName = 'Drawer';
Drawer.defaultProps = {
    anchor: 'right',
    disablePortal: false,
    onClose: () => { },
    width: 'regular',
};
export default Drawer;
//# sourceMappingURL=Drawer.js.map