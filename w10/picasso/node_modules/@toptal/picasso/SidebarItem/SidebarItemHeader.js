var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import React, { forwardRef, useCallback } from 'react';
import MenuItem from '../MenuItem';
import SidebarItemContent from '../SidebarItemContent';
import styles from './styles';
import { useSubMenuContext } from './SubMenuContextProvider';
import getBadgeProps from './utils/getBadgeProps/getBadgeProps';
import getTagProps from './utils/getTagProps/getTagProps';
const useStyles = makeStyles(styles, {
    name: 'PicassoSidebarItemHeader',
});
export const SidebarItemHeader = forwardRef(function SidebarItemHeader(props, ref) {
    const { className, disabled, menu, selected, compact, variant = 'light', onClick, collapsible, testIds, 
    // these props are being destructured only for the purpose of excluding them from `...rest`
    /* eslint-disable @typescript-eslint/no-unused-vars */
    icon, isSubMenu, badge, tag, isExpanded, expand, index } = props, 
    /* eslint-enable */
    rest = __rest(props, ["className", "disabled", "menu", "selected", "compact", "variant", "onClick", "collapsible", "testIds", "icon", "isSubMenu", "badge", "tag", "isExpanded", "expand", "index"]);
    const classes = useStyles();
    const { parentMenu } = useSubMenuContext();
    const hasMenu = menu != null;
    const handleMenuItemClick = useCallback((event) => {
        if (!hasMenu) {
            onClick === null || onClick === void 0 ? void 0 : onClick(event);
        }
    }, [hasMenu, onClick]);
    const subMenuClass = parentMenu &&
        (parentMenu.icon ? classes.nestedMenuWithIcon : classes.nestedMenu);
    const shouldShowSelected = (compact || !hasMenu) && selected;
    return (React.createElement(MenuItem, Object.assign({}, rest, { classes: classes, ref: ref, className: cx(classes.root, classes.noWrap, classes[variant], subMenuClass, {
            [classes.compact]: compact,
            [classes.selected]: shouldShowSelected,
            [classes.parentCompact]: parentMenu === null || parentMenu === void 0 ? void 0 : parentMenu.compact,
            [classes.collapsible]: hasMenu && (collapsible || compact),
        }, className), onClick: handleMenuItemClick, selected: shouldShowSelected, disabled: disabled, variant: variant, nonSelectable: true, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.header }),
        React.createElement(SidebarItemContent, Object.assign({}, props, { badge: getBadgeProps(badge), tag: getTagProps(tag) }))));
});
//# sourceMappingURL=SidebarItemHeader.js.map