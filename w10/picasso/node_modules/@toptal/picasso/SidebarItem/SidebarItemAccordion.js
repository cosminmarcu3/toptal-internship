import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import React, { forwardRef, useCallback } from 'react';
import Accordion from '../Accordion';
import { ArrowDownMinor16 } from '../Icon';
import styles from './styles';
import { SubMenuContextProvider } from './SubMenuContextProvider';
import { ParentItemContextProvider } from './ParentItemContextProvider';
import { SidebarItemHeader } from './SidebarItemHeader';
const useStyles = makeStyles(styles, {
    name: 'PicassoSidebarItemAccordion',
});
export const SidebarItemAccordion = forwardRef(function SidebarItemAccordion(props, ref) {
    const { expand, index, menu, disabled, variant, isExpanded, icon, compact, } = props;
    const classes = useStyles();
    const handleAccordionChange = useCallback((event, isAccordionExpanded) => {
        event.stopPropagation();
        expand === null || expand === void 0 ? void 0 : expand((isAccordionExpanded && index) || null);
    }, [index, expand]);
    const content = (React.createElement(SubMenuContextProvider, { parentMenu: { icon, compact }, parentSidebarItemIndex: index }, menu));
    return (React.createElement(ParentItemContextProvider, { isOpened: isExpanded || false },
        React.createElement(Accordion, { onChange: handleAccordionChange, classes: {
                summary: classes.collapsibleWrapper,
                content: classes.content,
            }, content: content, borders: 'none', disabled: disabled, expanded: isExpanded, expandIcon: React.createElement(ArrowDownMinor16, { className: cx(classes.expandIcon, classes[`${variant}ExpandIcon`], {
                    [classes.expandIconDisabled]: disabled,
                }) }) },
            React.createElement(SidebarItemHeader, Object.assign({}, props, { ref: ref })))));
});
//# sourceMappingURL=SidebarItemAccordion.js.map