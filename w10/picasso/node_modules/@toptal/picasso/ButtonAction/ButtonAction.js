var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import Button from '../Button';
import styles from './styles';
import Loader from '../Loader';
// Using { index: -1 } to inject CSS link to the bottom of the head
// in order to prevent Button's styles to override ButtonAction's ones
// Related Jira issue: https://toptal-core.atlassian.net/browse/FX-1520
const useStyles = makeStyles(styles, {
    name: 'PicassoButtonAction',
    index: -1,
});
const loaderIcon = React.createElement(Loader, { size: 'small', variant: 'inherit' });
export const ButtonAction = forwardRef(function ButtonAction(props, ref) {
    const { className, active, focused, hovered, disabled, loading, icon, iconPosition, onClick } = props, rest = __rest(props, ["className", "active", "focused", "hovered", "disabled", "loading", "icon", "iconPosition", "onClick"]);
    const classes = useStyles();
    const { root: rootClass, content, icon: iconClassName, iconLeft, iconRight, small, } = classes;
    const rootClassName = cx({
        [classes.active]: active,
        [classes.focused]: focused,
        [classes.hovered]: hovered,
        [classes.disabled]: disabled,
        [classes.loading]: loading,
        [classes.iconless]: !icon,
    }, rootClass);
    const usedIcon = loading ? loaderIcon : icon;
    const usedIconPosition = icon ? iconPosition : 'right';
    return (React.createElement(Button, Object.assign({}, rest, { ref: ref, icon: usedIcon, iconPosition: usedIconPosition, onClick: loading ? undefined : onClick, variant: 'secondary', classes: {
            root: rootClassName,
            content,
            icon: iconClassName,
            iconLeft,
            iconRight,
            small,
        }, className: className, size: 'small', active: active, hovered: hovered, focused: focused, disabled: disabled })));
});
ButtonAction.defaultProps = {
    iconPosition: 'left',
};
ButtonAction.displayName = 'ButtonAction';
export default ButtonAction;
//# sourceMappingURL=ButtonAction.js.map