 
import { MouseEvent, KeyboardEvent, ChangeEvent, FocusEventHandler, Ref } from 'react';
import { Item, ChangedOptions } from '../types';
export declare const EMPTY_INPUT_VALUE = "";
export declare const INITIAL_HIGHLIGHT_INDEX = 0;
export declare const normalizeInitialIndex: ({ initialIndex, itemCount, moveAmount, }: {
    initialIndex: number;
    itemCount: number;
    moveAmount: number;
}) => number;
/**
 * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,
 * it will wrap to either 0 or itemCount - 1.
 *
 * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.
 * @param {number} initialIndex The initial position to move from.
 * @param {number} itemCount The total number of items.
 * @returns {number} The new index after the move.
 */
export declare const getNextWrappingIndex: (moveAmount: number, initialIndex: number, itemCount: number) => number;
export interface Props {
    value: string;
    options?: Item[] | null;
    onSelect?: (item: Item, event: MouseEvent | KeyboardEvent) => void;
    onOtherOptionSelect?: (value: string, event: MouseEvent | KeyboardEvent) => void;
    onResetClick?: (event: MouseEvent<HTMLButtonElement & HTMLAnchorElement>) => void;
    onChange?: (value: string, options: ChangedOptions) => void;
    onKeyDown?: (event: KeyboardEvent<HTMLInputElement>, inputValue: string) => void;
    onFocus?: FocusEventHandler<HTMLInputElement>;
    onBlur?: FocusEventHandler<HTMLInputElement>;
    getDisplayValue: (item: Item | null) => string;
    closeOnSelect?: boolean;
    enableReset?: boolean;
    showOtherOption?: boolean;
    disabled?: boolean;
    ref?: Ref<HTMLInputElement>;
}
export declare const useAutocomplete: ({ value, options, closeOnSelect, onChange, onKeyDown, onFocus, onBlur, onSelect, onOtherOptionSelect, onResetClick, getDisplayValue, enableReset, showOtherOption, disabled, ref, }: Props) => {
    getItemProps: (index: number, item: Item) => {
        onClick: (event: MouseEvent) => void;
        role: string;
        'aria-selected': boolean;
        selected: boolean;
        onMouseMove: () => void;
        onMouseDown: (event: React.MouseEvent) => void;
    };
    getOtherItemProps: (index: number, newValue: string) => {
        onClick: (event: MouseEvent) => void;
        role: string;
        'aria-selected': boolean;
        selected: boolean;
        onMouseMove: () => void;
        onMouseDown: (event: React.MouseEvent) => void;
    };
    getInputProps: () => {
        'aria-autocomplete': "both" | "none" | "inline" | "list" | undefined;
        onFocus: FocusEventHandler<HTMLInputElement>;
        onClick: () => void;
        onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement | HTMLSelectElement>) => void;
        onKeyDown: (event: KeyboardEvent<HTMLInputElement>) => void;
        onBlur: FocusEventHandler<HTMLInputElement>;
        enableReset: boolean | undefined;
        onResetClick: (event: MouseEvent<HTMLButtonElement & HTMLAnchorElement>) => void;
    };
    isOpen: boolean;
    highlightedIndex: number;
    shouldShowOtherOption: boolean;
};
