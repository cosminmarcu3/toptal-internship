 
import React, { InputHTMLAttributes, KeyboardEvent, ReactNode, ComponentType, FocusEventHandler, MouseEvent } from 'react';
import { BaseProps } from '@toptal/picasso-shared';
import { PopperOptions } from 'popper.js';
import { InputProps } from '../Input';
import { Item, ChangedOptions } from './types';
import { BaseInputProps, Status } from '../OutlinedInput';
export interface Props extends BaseProps, Omit<InputHTMLAttributes<HTMLInputElement>, 'defaultValue' | 'value' | 'onChange' | 'onSelect' | 'onKeyDown' | 'size'> {
    /** Callback invoked when `input` element value is changed */
    onChange?: (value: string, options: ChangedOptions) => void;
    /** The value of the selected option, required for a controlled component. */
    value: string;
    /** Whether a component is disabled */
    disabled?: boolean;
    /** Callback invoked when selection changes */
    onSelect?: (item: Item, event: MouseEvent | KeyboardEvent) => void;
    /** Whether to close popper upon selection */
    closeOnSelect?: boolean;
    /** Callback invoked when other option selected */
    onOtherOptionSelect?: (value: string, event: MouseEvent | KeyboardEvent) => void;
    /** Placeholder for value */
    placeholder?: string;
    /** Text prefix for other option */
    otherOptionText?: string;
    /** Callback responsible for rendering the other option given the input's value */
    renderOtherOption?: (value: string) => ReactNode;
    /** Width of the component */
    width?: 'full' | 'shrink' | 'auto';
    /** Width of the menu */
    menuWidth?: string;
    /** Shows the loading icon when options are loading */
    loading?: boolean;
    /** Allow to show the other option in the list of options */
    showOtherOption?: boolean;
    /** Label to show when no options were found */
    noOptionsText?: string | null;
    /** List of options */
    options?: Item[] | null;
    /** A function that takes a display value from the option item */
    getDisplayValue?: (item: Item | null) => string;
    /**  Callback invoked when key is pressed */
    onKeyDown?: (event: KeyboardEvent<HTMLInputElement>, inputValue: string) => void;
    /** Focus event handler */
    onFocus?: FocusEventHandler<HTMLInputElement>;
    /** Blur event handler */
    onBlur?: FocusEventHandler<HTMLInputElement>;
    /** ReactNode for labels that will be used as start InputAdornment - */
    startAdornment?: ReactNode;
    /** ReactNode for labels that will be used as end InputAdornment - */
    endAdornment?: ReactNode;
    /**
     * @deprecated Use the `status` prop instead to both support success and error states
     * Indicate whether `Autocomplete` is in error state
     */
    error?: boolean;
    /** Indicate `Autocomplete` status */
    status?: Status;
    /** Specify icon which should be rendered inside Input */
    icon?: ReactNode;
    /** Custom input component */
    inputComponent?: ComponentType<InputProps>;
    /** Callback responsible for rendering the option given the option and its index in the list of options */
    renderOption?: (option: Item, index: number) => ReactNode;
    /** Provide unique key for each option */
    getKey?: (item: Item) => string;
    /** Specifies whether the autofill enabled or not, disabled by default */
    enableAutofill?: boolean;
    /** Whether to render reset icon when there is a value in the input */
    enableReset?: boolean;
    /** Callback invoked when reset button was clicked */
    onResetClick?: (event: MouseEvent<HTMLButtonElement & HTMLAnchorElement>) => void;
    /** DOM element that wraps the Popper */
    popperContainer?: HTMLElement;
    /** Options provided to the popper.js instance */
    popperOptions?: PopperOptions;
    inputProps?: BaseInputProps;
    /** Show the "Powered By Google" label */
    poweredByGoogle?: boolean;
    testIds?: InputProps['testIds'] & {
        menuItem?: string;
        scrollMenu?: string;
        otherOption?: string;
        noOptions?: string;
        loadingAdornment?: string;
        input?: string;
        disableAutofillInput?: string;
    };
}
export declare const Autocomplete: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLInputElement>>;
export default Autocomplete;
