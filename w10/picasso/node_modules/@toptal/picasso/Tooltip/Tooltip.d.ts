import React, { ReactNode, ChangeEvent, HTMLAttributes } from 'react';
import { TooltipProps } from '@material-ui/core';
import { BaseProps } from '@toptal/picasso-shared';
import { ContainerValue } from './types';
export declare type DelayType = 'short' | 'long';
export declare type MaxWidthType = 'none' | 'default';
export declare type PlacementType = TooltipProps['placement'];
export interface Props extends BaseProps, HTMLAttributes<HTMLDivElement> {
    /** Trigger element for tooltip */
    children: ReactNode;
    /** Content to be rendered inside tooltip */
    content?: ReactNode;
    /** Where should the tooltip be positioned */
    placement?: PlacementType;
    /** Called when tooltip is opened */
    onOpen?: (event: ChangeEvent<{}>) => void;
    /** Called when tooltip is closed */
    onClose?: (event: ChangeEvent<{}>) => void;
    /** Whether user can interact with tooltip content */
    interactive?: boolean;
    /** Programatically control tooltip's visibility */
    open?: boolean;
    /** Disables all listener */
    disableListeners?: boolean;
    /** Allows tooltip to change its placement when it overflows */
    preventOverflow?: boolean;
    /** Disable the portal behavior. The children stay within it's parent */
    disablePortal?: boolean;
    /** A delay in showing the tooltip */
    delay?: DelayType;
    /** Show a compact tooltip */
    compact?: boolean;
    /** If `true`, the tooltip follow the cursor over the wrapped element. This prop exists in material-ui@5+ */
    followCursor?: boolean;
    /** Max width of a tooltip */
    maxWidth?: MaxWidthType;
    onTransitionExiting?: () => void;
    onTransitionExited?: () => void;
    /** Tooltip div ref */
    tooltipRef?: React.Ref<HTMLDivElement>;
    /** A node, or a function that returns node. The container will have the portal children appended to it. */
    container?: ContainerValue;
}
export declare const Tooltip: React.ForwardRefExoticComponent<Props & React.RefAttributes<unknown>>;
export default Tooltip;
