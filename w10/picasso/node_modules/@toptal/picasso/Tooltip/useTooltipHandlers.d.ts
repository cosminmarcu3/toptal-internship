import { ChangeEvent, MouseEvent, ReactElement } from 'react';
import { TooltipState } from './useTooltipState';
import { ChildrenProps } from './types';
interface UseTooltipHandlersOptions {
    onOpen?: (event: ChangeEvent<{}>) => void;
    onClose?: (event: ChangeEvent<{}>) => void;
    onMouseOver?: (event: MouseEvent<HTMLElement>) => void;
    onMouseMove?: (event: MouseEvent<HTMLElement>) => void;
    onClick?: (event: MouseEvent<HTMLElement>) => void;
    children: ReactElement<ChildrenProps>;
    tooltipState: TooltipState;
    disableListeners?: boolean;
}
export declare const useTooltipHandlers: ({ onClose, onOpen, onMouseOver, onMouseMove, onClick, tooltipState, disableListeners, children, }: UseTooltipHandlersOptions) => {
    handleOpen: ((event: ChangeEvent<{}>) => void) | undefined;
    handleClose: ((event: ChangeEvent<{}>) => void) | undefined;
    children: ReactElement<ChildrenProps, string | import("react").JSXElementConstructor<any>>;
};
export {};
