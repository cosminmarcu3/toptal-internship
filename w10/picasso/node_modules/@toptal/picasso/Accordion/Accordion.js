var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useState, } from 'react';
import cx from 'classnames';
import { Accordion as MUIAccordion } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import { ArrowDownMinor16 } from '../Icon';
import AccordionSummary from '../AccordionSummary';
import AccordionDetails from '../AccordionDetails';
import styles from './styles';
import ButtonAction from '../ButtonAction';
const useStyles = makeStyles(styles, {
    name: 'PicassoAccordion',
});
const EmptyAccordionSummary = ({ 'data-testid': dataTestId, }) => React.createElement("div", { "data-testid": dataTestId });
const decorateWithExpandIconClasses = (expandIcon, classes) => React.cloneElement(expandIcon, {
    className: cx(expandIcon.props.className, classes),
});
/* eslint-disable complexity */
export const Accordion = forwardRef(function Accordion(props, ref) {
    const { children, content, expanded, defaultExpanded, expandIcon, borders, disabled, className, style, onChange, testIds, transitionProps } = props, rest = __rest(props, ["children", "content", "expanded", "defaultExpanded", "expandIcon", "borders", "disabled", "className", "style", "onChange", "testIds", "transitionProps"]);
    const classes = useStyles(props);
    const borderClasses = {
        all: classes.bordersAll,
        middle: classes.bordersMiddle,
        none: classes.bordersNone,
    };
    const [summaryExpanded, setSummaryExpanded] = useState(defaultExpanded);
    const [prevExpanded, setPrevExpanded] = useState(defaultExpanded);
    // getDerivedStateFromProps implementation to allow expanded to be controlled
    if (expanded !== undefined && expanded !== prevExpanded) {
        setSummaryExpanded(expanded);
        setPrevExpanded(expanded);
    }
    const handleSummaryClick = () => {
        setSummaryExpanded(!summaryExpanded);
    };
    const expandIconClass = cx(classes.expandIcon, {
        [classes.expandIconExpanded]: summaryExpanded,
    });
    const appliedBorders = children || expanded ? borders : 'none';
    return (React.createElement(MUIAccordion, Object.assign({}, rest, { ref: ref, classes: {
            root: cx(classes.root, borderClasses[appliedBorders]),
        }, className: className, style: style, elevation: 0, expanded: summaryExpanded, disabled: disabled, onChange: onChange, TransitionProps: transitionProps }),
        children ? (React.createElement(AccordionSummary, { classes: {
                root: classes.summary,
                content: classes.content,
            }, expandIcon: null, onClick: handleSummaryClick, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.accordionSummary },
            children,
            expandIcon ? (decorateWithExpandIconClasses(expandIcon, expandIconClass)) : (React.createElement("div", { className: classes.expandIconAlignTop },
                React.createElement(ButtonAction, { icon: React.createElement(ArrowDownMinor16, { className: expandIconClass }) }))))) : (React.createElement(EmptyAccordionSummary, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.emptyAccordionSummary })),
        React.createElement(AccordionDetails, { classes: {
                root: classes.details,
            } }, content)));
});
Accordion.defaultProps = {
    borders: 'all',
    defaultExpanded: false,
    disabled: false,
    expanded: undefined,
    onChange: () => { },
};
Accordion.displayName = 'Accordion';
export default Accordion;
//# sourceMappingURL=Accordion.js.map