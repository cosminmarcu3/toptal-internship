var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import SimpleReactCalendar from 'simple-react-calendar';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import isWeekend from 'date-fns/isWeekend';
import styles from './styles';
import CalendarMonthHeader from '../CalendarMonthHeader';
import CalendarContainer from '../CalendarContainer';
import { CalendarIndicators } from '../CalendarIndicators';
const getNormalizedValue = (value) => {
    if (!value) {
        return;
    }
    if (value instanceof Date) {
        return value;
    }
    const [start, end] = value;
    return { start, end };
};
const isDateRange = (value) => {
    return !(value instanceof Date) && Boolean(value.start && value.end);
};
const useStyles = makeStyles(styles, { name: 'PicassoCalendar' });
export const Calendar = forwardRef(function Calendar(props, ref) {
    const classes = useStyles();
    const { range, activeMonth, value, onChange, minDate, maxDate, disabledIntervals, indicatedIntervals, renderDay, weekStartsOn, hasFooter, renderRoot = rootProps => (React.createElement(CalendarContainer, Object.assign({}, rootProps, { hasFooter: hasFooter }))), renderMonthHeader = CalendarMonthHeader } = props, rest = __rest(props, ["range", "activeMonth", "value", "onChange", "minDate", "maxDate", "disabledIntervals", "indicatedIntervals", "renderDay", "weekStartsOn", "hasFooter", "renderRoot", "renderMonthHeader"]);
    const handleChange = (selection) => {
        if (isDateRange(selection)) {
            const { start, end } = selection;
            onChange([start, end]);
        }
        else {
            onChange(selection);
        }
    };
    return (React.createElement("div", Object.assign({ ref: ref }, rest, { tabIndex: 0 }),
        React.createElement(SimpleReactCalendar, { className: classes.root, selected: getNormalizedValue(value), onSelect: handleChange, customRender: renderRoot, renderDay: (dayProps) => {
                const { key, isDisabled, isSelected, isSelectable, isToday, isMonthNext, isMonthPrev, isSelectionStart, isSelectionEnd, handleOnClick, handleOnEnter, getDayFormatted, date, ISODate, } = dayProps;
                const defaultMarkup = (React.createElement("button", { "data-testid": `day-button-${isSelected ? 'selected' : getDayFormatted(date)}`, "data-simple-react-calendar-day": ISODate, key: key, tabIndex: isDisabled || !isSelectable ? -1 : undefined, className: cx(classes.day, {
                        [classes.selected]: isSelected,
                        [classes.weekend]: isWeekend(date),
                        [classes.selectable]: isSelectable,
                        [classes.grayed]: (isMonthPrev || isMonthNext) && !isSelected && !isDisabled,
                        [classes.disabled]: isDisabled || !isSelectable,
                        [classes.startSelection]: isSelectionStart,
                        [classes.endSelection]: isSelectionEnd,
                    }), onClick: handleOnClick, onMouseEnter: handleOnEnter, value: date.toString(), type: 'button' },
                    getDayFormatted(date),
                    React.createElement(CalendarIndicators, { date: date, indicatedIntervals: indicatedIntervals, isSelected: isSelected, isToday: isToday })));
                return renderDay
                    ? renderDay(Object.assign(Object.assign({}, dayProps), { children: defaultMarkup }))
                    : defaultMarkup;
            }, renderMonthHeader: renderMonthHeader, renderDaysOfWeek: ({ children }) => {
                return React.createElement("div", { className: classes.weekDays }, children);
            }, renderDayOfWeek: ({ day, key }) => {
                return (React.createElement("div", { key: key, className: classes.weekDay }, day));
            }, renderWeek: ({ children }) => {
                return React.createElement("div", { className: classes.week }, children);
            }, activeMonth: activeMonth, mode: range ? 'range' : 'single', minDate: minDate, maxDate: maxDate, disabledIntervals: disabledIntervals, getNoticeContent: () => null, weekStartsOn: weekStartsOn })));
});
Calendar.defaultProps = {
    range: false,
};
Calendar.displayName = 'Calendar';
export default Calendar;
//# sourceMappingURL=Calendar.js.map