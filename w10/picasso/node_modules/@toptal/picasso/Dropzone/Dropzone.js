import React, { forwardRef } from 'react';
import { useDropzone } from 'react-dropzone';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import { Upload24 } from '../Icon';
import FormHint from '../FormHint';
import FormError from '../FormError';
import Container from '../Container';
import FileList from '../FileList';
import Typography from '../Typography';
import { usePropDeprecationWarning } from '../utils/use-deprecation-warnings';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'Dropzone' });
export const Dropzone = forwardRef(function Dropzone(props, ref) {
    const { hint, hideContentText, onRemove, value, className, errorMessages = [], style, 'data-testid': dataTestId, focused, hovered, 
    // dropzoneOptions
    accept, minSize, maxSize, multiple, disabled, onDrop, onDropAccepted, onDropRejected, validator, } = props;
    const isDisabled = Boolean(disabled || (!multiple && value && value.length > 0));
    const { getRootProps, isDragActive, getInputProps } = useDropzone({
        accept,
        minSize,
        maxSize,
        multiple,
        disabled: isDisabled,
        onDrop,
        onDropAccepted,
        onDropRejected,
        validator,
    });
    const classes = useStyles();
    usePropDeprecationWarning({
        props,
        name: 'errorMessages',
        componentName: 'Dropzone',
        description: 'Use the `value[n].error` prop instead. `errorMessages` is deprecated and will be removed in the next major release.',
    });
    return (React.createElement(Container, { style: style, ref: ref, className: className },
        React.createElement(Container, Object.assign({ flex: true, direction: 'column', alignItems: 'center', "data-testid": dataTestId }, getRootProps({
            className: cx(classes.root, {
                [classes.dragActive]: isDragActive,
                [classes.hovered]: hovered,
                [classes.disabled]: isDisabled,
                [classes.focused]: focused,
            }),
        })),
            React.createElement("input", Object.assign({}, getInputProps({ className: classes.nativeInput }))),
            React.createElement(Upload24, { color: 'darkGrey' }),
            !hideContentText && (React.createElement(Typography, { size: 'medium', color: 'black', weight: 'semibold' }, "Click or drag to upload")),
            hint && React.createElement(FormHint, { className: cx(classes.hint) }, hint),
            errorMessages.length > 0 &&
                errorMessages.map((error, index) => (React.createElement(FormError, { className: classes.error, key: `${error}-${String(index)}` }, error)))),
        value && value.length > 0 && (React.createElement(Container, { top: 'xsmall' },
            React.createElement(FileList, { files: value, onItemRemove: onRemove })))));
});
Dropzone.displayName = 'Dropzone';
Dropzone.defaultProps = {
    disabled: false,
    maxSize: Infinity,
    minSize: 0,
    multiple: true,
};
export default Dropzone;
//# sourceMappingURL=Dropzone.js.map