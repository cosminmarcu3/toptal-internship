import { useCallback, useContext, useMemo, useState, } from 'react';
import MenuContext from '../../MenuContext';
const useSlideMenu = () => {
    const [items, setItems] = useState({});
    const { onItemUpdate, onItemClick, onBackClick } = useContext(MenuContext);
    const lastKey = useMemo(() => {
        const keys = Object.keys(items);
        return keys.length ? keys[keys.length - 1] : undefined;
    }, [items]);
    const lastMenu = useMemo(() => {
        return lastKey && items[lastKey];
    }, [items, lastKey]);
    const handleItemUpdate = useCallback((key, menu) => {
        if (menu && items[key]) {
            setItems(Object.assign(Object.assign({}, items), { [key]: menu }));
        }
    }, [items]);
    const handleItemClick = useCallback((key, menu) => {
        if (menu) {
            setItems(Object.assign(Object.assign({}, items), { [key]: menu }));
        }
    }, [items]);
    const handleBackClick = useCallback((event) => {
        if (event) {
            event.stopPropagation();
        }
        if (lastKey) {
            const newItems = Object.assign({}, items);
            delete newItems[lastKey];
            setItems(newItems);
        }
    }, [items, lastKey]);
    const context = useMemo(() => ({
        variant: 'slide',
        onItemUpdate: onItemUpdate !== null && onItemUpdate !== void 0 ? onItemUpdate : handleItemUpdate,
        onItemClick: onItemClick !== null && onItemClick !== void 0 ? onItemClick : handleItemClick,
        onBackClick: onBackClick !== null && onBackClick !== void 0 ? onBackClick : handleBackClick,
    }), [
        onItemUpdate,
        onItemClick,
        onBackClick,
        handleItemUpdate,
        handleItemClick,
        handleBackClick,
    ]);
    return {
        context,
        innerMenu: lastMenu,
        hasBackButton: Boolean(onBackClick),
    };
};
export default useSlideMenu;
//# sourceMappingURL=use-slide-menu.js.map