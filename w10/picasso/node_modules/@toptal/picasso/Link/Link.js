var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from 'react';
import { Link as MUILink } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'PicassoLink' });
const sanitizeRel = (rel, target) => {
    if (target !== '_blank') {
        return rel;
    }
    if (!rel) {
        return 'noopener';
    }
    const isRelSafe = rel.includes('noreferrer') || rel.includes('noopener');
    return isRelSafe ? rel : rel.concat(' noopener');
};
export const Link = forwardRef(function Link(props, ref) {
    const { href, onClick, children, className, color = 'blue', style, as = 'a', variant = 'anchor', tabIndex, target, rel, disabled, visited = false, noUnderline, 'aria-disabled': ariaDisabled } = props, rest = __rest(props, ["href", "onClick", "children", "className", "color", "style", "as", "variant", "tabIndex", "target", "rel", "disabled", "visited", "noUnderline", 'aria-disabled']);
    const nativeHTMLAttributes = rest;
    const classes = useStyles();
    const sanitizedRel = sanitizeRel(rel, target);
    return (React.createElement(MUILink, Object.assign({}, nativeHTMLAttributes, { ref: ref, href: disabled ? undefined : href, target: disabled ? undefined : target, rel: sanitizedRel, onClick: disabled ? undefined : onClick, className: cx(classes.root, className, {
            [classes.action]: variant === 'action',
            [classes.white]: color === 'white',
            [classes.blue]: color === 'blue',
            [classes.visited]: visited,
            [classes.disabled]: disabled,
            [classes.noUnderline]: noUnderline,
        }), style: style, component: as, tabIndex: tabIndex, "aria-disabled": disabled || ariaDisabled }), children));
});
Link.defaultProps = {
    as: 'a',
    color: 'blue',
    variant: 'anchor',
    noUnderline: false,
};
Link.displayName = 'Link';
export default Link;
//# sourceMappingURL=Link.js.map