var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import ListItem from '../ListItem';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'PicassoList' });
const Tags = {
    unordered: 'ul',
    ordered: 'ol',
};
export const List = (props) => {
    const classes = useStyles();
    const { variant, children, start = 1, className } = props, rest = __rest(props, ["variant", "children", "start", "className"]);
    const totalChildElements = React.Children.count(children);
    const listItems = React.Children.map(children, (child, index) => {
        if (!React.isValidElement(child)) {
            return child;
        }
        return React.cloneElement(child, {
            variant,
            isLastElement: totalChildElements === index + 1,
            index: index + start - 1,
        });
    });
    const ListTag = Tags[variant];
    return (React.createElement(ListTag, Object.assign({ className: cx(classes.root, classes[variant], className) }, rest), listItems));
};
List.defaultProps = {
    variant: 'unordered',
    start: 1,
};
List.Item = ListItem;
List.displayName = 'List';
export default List;
//# sourceMappingURL=List.js.map