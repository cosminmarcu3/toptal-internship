var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useCallback } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { AVATAR_INITIALS_LIMIT } from '../utils/constants';
import getNameInitials from '../utils/get-name-initials';
import ImageAvatar from './ImageAvatar/ImageAvatar';
import TextAvatar from './TextAvatar/TextAvatar';
import IconAvatar from './IconAvatar/IconAvatar';
import AvatarWrapper from './AvatarWrapper/AvatarWrapper';
import AvatarEditContainer from './AvatarEditContainer/AvatarEditContainer';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoAvatarWrapper',
});
export const Avatar = (props) => {
    const { alt, src, className, name, size, style, variant, testIds, onEdit } = props, rest = __rest(props, ["alt", "src", "className", "name", "size", "style", "variant", "testIds", "onEdit"]);
    const renderAvatar = useCallback(() => {
        if (src) {
            return (React.createElement(ImageAvatar, { alt: alt, className: className, name: name, 
                /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
                size: size, src: src, style: style, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.image }));
        }
        if (name) {
            const initials = getNameInitials(name);
            const isLongText = initials.length >= AVATAR_INITIALS_LIMIT;
            return (React.createElement(TextAvatar, { className: className, fontSize: isLongText ? 'small' : 'large', 
                /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
                size: size, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.text }, initials));
        }
        return (React.createElement(IconAvatar, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.icon, className: className, 
            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
            size: size }));
    }, [
        size,
        alt,
        className,
        src,
        testIds === null || testIds === void 0 ? void 0 : testIds.icon,
        testIds === null || testIds === void 0 ? void 0 : testIds.image,
        testIds === null || testIds === void 0 ? void 0 : testIds.text,
        name,
        style,
    ]);
    const classes = useStyles(props);
    const isEditable = Boolean(onEdit);
    const avatar = (React.createElement(AvatarWrapper
    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
    , Object.assign({ 
        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
        variant: variant, 
        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
        size: size, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.wrapper }, rest), renderAvatar()));
    if (isEditable) {
        return (React.createElement("div", { className: classes.editableAvatarContainer },
            avatar,
            isEditable && (React.createElement(AvatarEditContainer, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.editContainer, onClick: onEdit, size: size }))));
    }
    return avatar;
};
Avatar.defaultProps = {
    size: 'xsmall',
    variant: 'square',
};
Avatar.displayName = 'Avatar';
export default Avatar;
//# sourceMappingURL=Avatar.js.map