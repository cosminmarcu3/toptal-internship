var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useRef, } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import { MenuItem as MUIMenuItem } from '@material-ui/core';
import { useTitleCase, } from '@toptal/picasso-shared';
import Container from '../Container';
import { ChevronMinor16, CheckMinor16 } from '../Icon';
import Paper from '../Paper';
import Popper from '../Popper';
import Link from '../Link';
import { ClickAwayListener, toTitleCase } from '../utils';
import { useMenuItem } from './hooks';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoMenuItem',
});
export const MenuItem = forwardRef(function MenuItem(props, ref) {
    const { as = 'li', children, description, className, disabled, disableGutters, menu, titleCase: propTitleCase, selected, checkmarked, style, value, variant = 'light', nonSelectable, onClick, onMouseEnter, icon, avatar } = props, rest = __rest(props, ["as", "children", "description", "className", "disabled", "disableGutters", "menu", "titleCase", "selected", "checkmarked", "style", "value", "variant", "nonSelectable", "onClick", "onMouseEnter", "icon", "avatar"]);
    const classes = useStyles();
    const anchorRef = useRef(null);
    const titleCase = useTitleCase(propTitleCase);
    const { isOpened, onItemClick, onItemMouseEnter, onAwayClick } = useMenuItem({
        menu,
        onClick,
        onMouseEnter,
    });
    const isLink = as === Link && rest.href;
    const isIconWrapperVisible = checkmarked !== undefined || icon;
    return (React.createElement(React.Fragment, null,
        React.createElement(MUIMenuItem, Object.assign({}, rest, { ref: ref, 
            // replace Picasso Link with Anchor to not applying Picasso
            // Link component styles, this is the only difference between them now
            component: isLink ? 'a' : as, classes: {
                gutters: classes.gutters,
                selected: classes.selected,
            }, className: cx(classes.root, classes[variant], className, {
                [classes.nonSelectable]: nonSelectable,
                [classes.disabled]: disabled,
            }), disabled: disabled, disableGutters: disableGutters, onClick: onItemClick, onMouseEnter: onItemMouseEnter, style: style, value: value, selected: selected || isOpened }),
            React.createElement(Container, { ref: anchorRef, className: classes.itemWrapper, flex: true, direction: 'row' },
                avatar && React.createElement(Container, { right: 'xsmall' }, avatar),
                React.createElement(Container, { flex: true, direction: 'column', className: classes.content },
                    React.createElement(Container, { flex: true, alignItems: 'center' },
                        isIconWrapperVisible && (React.createElement(Container, { className: classes.iconContainer, flex: true, inline: true, right: 'xsmall' }, checkmarked ? React.createElement(CheckMinor16, null) : icon)),
                        typeof children === 'string' ? (React.createElement("span", { className: cx(classes.stringContent, {
                                [classes.stringContentSemibold]: checkmarked,
                            }), style: style }, titleCase ? toTitleCase(children) : children)) : (children),
                        menu && (React.createElement(Container, { flex: true, inline: true, left: 'xsmall' },
                            React.createElement(ChevronMinor16, { color: '' })))),
                    description && (React.createElement(Container, { className: cx(classes.description, {
                            [classes.descriptionDisabled]: disabled,
                        }), left: isIconWrapperVisible ? 'medium' : undefined, top: 0.25 }, description))))),
        menu && isOpened && (React.createElement(Popper, { anchorEl: anchorRef.current, placement: 'right-start', open: true, autoWidth: false, enableCompactMode: true, popperOptions: {
                modifiers: {
                    offset: {
                        offset: `-10px,6px`,
                    },
                },
            } },
            React.createElement(ClickAwayListener, { onClickAway: onAwayClick },
                React.createElement(Paper, { className: classes.paper }, menu))))));
});
MenuItem.defaultProps = {
    as: 'li',
    variant: 'light',
    nonSelectable: false,
};
MenuItem.displayName = 'MenuItem';
export default MenuItem;
//# sourceMappingURL=MenuItem.js.map