var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useMemo } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import MenuItem from '../MenuItem';
import NonNativeSelectOption from '../NonNativeSelectOption';
import SelectOptions from '../SelectOptions';
import { flattenOptions, isOptionsType, } from '../SelectBase';
import Typography from '../Typography';
import styles from './styles';
const useStyles = makeStyles(styles);
const MenuGroup = (props) => {
    const { group, children } = props, rest = __rest(props, ["group", "children"]);
    const classes = useStyles();
    return (React.createElement(React.Fragment, null,
        React.createElement(MenuItem, Object.assign({ role: 'option', titleCase: false, nonSelectable: true, className: classes.menuGroup }, rest),
            React.createElement(Typography, { size: 'xsmall', weight: 'semibold', color: 'dark-grey' }, group)),
        children));
};
const renderOptions = ({ options, getItemProps, selection, highlightedIndex, offset = 0, renderOption, }) => {
    return options.map((option, index) => {
        return (React.createElement(NonNativeSelectOption, Object.assign({ key: option.key || option.value, option: option, selected: selection.isOptionSelected(option), highlighted: highlightedIndex === index + offset, description: option.description }, getItemProps(option, index + offset)), renderOption === null || renderOption === void 0 ? void 0 : renderOption(option)));
    });
};
const renderGroups = ({ groups, getItemProps, selection, highlightedIndex, renderOption, }) => {
    let optionsCount = 0;
    return Object.keys(groups).map(group => {
        const menuGroups = (React.createElement(MenuGroup, { key: group, group: group }, renderOptions({
            options: groups[group],
            getItemProps,
            selection,
            highlightedIndex,
            offset: optionsCount,
            renderOption,
        })));
        optionsCount += groups[group].length;
        return menuGroups;
    });
};
const addOffsetToHighlightedIndex = (groups, highlightedIndex) => {
    if (!highlightedIndex) {
        return highlightedIndex;
    }
    let optionsCount = 0;
    const offset = Object.values(groups).findIndex(group => {
        optionsCount += group.length;
        const isHighlightedOptionInGroup = highlightedIndex < optionsCount;
        return isHighlightedOptionInGroup;
    }) + 1;
    return highlightedIndex + offset;
};
const NonNativeSelectOptions = ({ options, renderOption = () => null, highlightedIndex, getItemProps, onBlur, selection, filterOptionsValue, noOptionsText, fixedHeader, fixedFooter, testIds, }) => {
    const flatOptions = useMemo(() => flattenOptions(options), [options]);
    if (!flatOptions.length && filterOptionsValue) {
        return (React.createElement(SelectOptions, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.noOptions, role: 'listbox', fixedHeader: fixedHeader },
            React.createElement(MenuItem, { titleCase: false, disabled: true }, noOptionsText)));
    }
    return (React.createElement(SelectOptions, { fixedHeader: fixedHeader, onBlur: onBlur, selectedIndex: isOptionsType(options)
            ? highlightedIndex
            : addOffsetToHighlightedIndex(options, highlightedIndex), fixedFooter: fixedFooter, role: 'listbox' }, isOptionsType(options)
        ? renderOptions({
            options,
            getItemProps,
            selection,
            highlightedIndex,
            renderOption,
        })
        : renderGroups({
            groups: options,
            getItemProps,
            selection,
            highlightedIndex,
            renderOption,
        })));
};
NonNativeSelectOptions.displayName = 'NonNativeSelectOptions';
export default NonNativeSelectOptions;
//# sourceMappingURL=NonNativeSelectOptions.js.map