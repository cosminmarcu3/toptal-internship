var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { Typography as MUITypography } from '@material-ui/core';
import styles from './styles';
import toTitleCase from '../utils/to-title-case';
import toMuiVariant from './utils/to-mui-variant';
import getTypographyClassName from './utils/get-typography-class-name';
const useStyles = makeStyles(styles, {
    name: 'PicassoTypography',
});
export const Typography = forwardRef(function Typography(props, ref) {
    const { align, as, children, className, color, inline, invert, lineThrough, noWrap, size = 'inherit', style, titleCase, underline, variant = 'body', weight } = props, rest = __rest(props, ["align", "as", "children", "className", "color", "inline", "invert", "lineThrough", "noWrap", "size", "style", "titleCase", "underline", "variant", "weight"]);
    const classes = useStyles(props);
    return (React.createElement(MUITypography, Object.assign({}, rest, { ref: ref, align: align, className: className, classes: {
            root: getTypographyClassName(classes, {
                variant,
                size,
                color,
                weight,
                underline,
                invert,
                lineThrough,
                as,
            }),
        }, style: style, variant: toMuiVariant(variant, size), display: inline ? 'inline' : 'initial', 
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        component: as, noWrap: noWrap }), titleCase ? toTitleCase(children) : children));
});
Typography.defaultProps = {
    inline: false,
    noWrap: false,
    size: 'inherit',
    variant: 'body',
};
Typography.displayName = 'Typography';
export default Typography;
//# sourceMappingURL=Typography.js.map