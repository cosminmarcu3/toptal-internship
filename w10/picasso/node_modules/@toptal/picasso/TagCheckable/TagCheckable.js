var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cx from 'classnames';
import React, { forwardRef } from 'react';
import Tag from '../Tag';
import { useStyles } from '../Tag/Tag';
const TagCheckable = forwardRef(function TagCheckable(_a, ref) {
    var { checked = false, children, icon, onClick, onChange, className } = _a, rest = __rest(_a, ["checked", "children", "icon", "onClick", "onChange", "className"]);
    const classes = useStyles();
    const handleClick = (e) => {
        onChange === null || onChange === void 0 ? void 0 : onChange(!checked);
        onClick === null || onClick === void 0 ? void 0 : onClick(e);
    };
    const variant = checked ? 'green' : 'light-grey';
    return (React.createElement(Tag, Object.assign({ className: cx(className, classes.checkable), icon: icon, onClick: handleClick, ref: ref, variant: variant }, rest), children));
});
export default TagCheckable;
//# sourceMappingURL=TagCheckable.js.map