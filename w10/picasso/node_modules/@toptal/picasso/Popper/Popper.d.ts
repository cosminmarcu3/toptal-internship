import React, { ReactNode } from 'react';
import PopperJs, { ReferenceObject, PopperOptions } from 'popper.js';
import { BaseProps } from '@toptal/picasso-shared';
export declare type PopperPlacementType = 'bottom-end' | 'bottom-start' | 'bottom' | 'left-end' | 'left-start' | 'left' | 'right-end' | 'right-start' | 'right' | 'top-end' | 'top-start' | 'top';
export interface Props extends BaseProps {
    children?: ReactNode;
    /** if true, the popper is visible */
    open: boolean;
    /** Disable the portal behavior. The children stay within it's parent DOM hierarchy */
    disablePortal?: boolean;
    /** Popper placement */
    placement?: PopperPlacementType;
    /** Options provided to the popper.js instance */
    popperOptions?: PopperOptions;
    /** Always keep Popper's children in the DOM */
    keepMounted?: boolean;
    /**
     * A node, component instance, or function that returns either.
     * The `container` will have the portal children appended to it.
     * By default, it uses the picasso root node
     */
    container?: HTMLElement | (() => HTMLElement);
    /**
     * HTML Element instance or a referenceObject
     * https://popper.js.org/popper-documentation.html#referenceObject
     */
    anchorEl: null | ReferenceObject | (() => ReferenceObject);
    /** Popper automatically resize to anchor element width */
    autoWidth?: boolean;
    /** Popper width */
    width?: string;
    /** Take full window width on small and medium screens */
    enableCompactMode?: boolean;
}
export declare const getPopperOptions: (popperOptions: PopperOptions, isInsideModal?: boolean) => {
    modifiers: {
        flip: {
            order?: number | undefined;
            enabled: boolean;
            fn?: PopperJs.ModifierFn | undefined;
            behavior?: PopperJs.Behavior | PopperJs.Position[] | undefined;
            padding?: number | PopperJs.Padding | undefined;
            boundariesElement?: Element | PopperJs.Boundary | undefined;
            flipVariations?: boolean | undefined;
            flipVariationsByContent?: boolean | undefined;
        };
        preventOverflow: {
            order?: number | undefined;
            enabled: boolean;
            fn?: PopperJs.ModifierFn | undefined;
            priority?: PopperJs.Position[] | undefined;
            padding: number | PopperJs.Padding;
            boundariesElement: string | Element;
            escapeWithReference?: boolean | undefined;
        };
        shift?: PopperJs.BaseModifier | undefined;
        offset?: (PopperJs.BaseModifier & {
            offset?: string | number | undefined;
        }) | undefined;
        keepTogether?: PopperJs.BaseModifier | undefined;
        arrow?: (PopperJs.BaseModifier & {
            element?: string | Element | undefined;
        }) | undefined;
        inner?: PopperJs.BaseModifier | undefined;
        hide?: PopperJs.BaseModifier | undefined;
        applyStyle?: (PopperJs.BaseModifier & {
            onLoad?: Function | undefined;
            gpuAcceleration?: boolean | undefined;
        }) | undefined;
        computeStyle?: (PopperJs.BaseModifier & {
            gpuAcceleration?: boolean | undefined;
            x?: "bottom" | "top" | undefined;
            y?: "left" | "right" | undefined;
        }) | undefined;
    };
    placement?: PopperJs.Placement | undefined;
    positionFixed?: boolean | undefined;
    eventsEnabled?: boolean | undefined;
    removeOnDestroy?: boolean | undefined;
    onCreate?(data: PopperJs.Data): void;
    onUpdate?(data: PopperJs.Data): void;
};
export declare const Popper: React.ForwardRefExoticComponent<Props & React.RefAttributes<PopperJs>>;
export default Popper;
