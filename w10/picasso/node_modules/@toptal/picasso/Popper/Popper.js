var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useContext } from 'react';
import cx from 'classnames';
import { Popper as MUIPopper } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import { useIsomorphicLayoutEffect } from '@toptal/picasso-shared';
import { usePicassoRoot, useBreakpoint } from '@toptal/picasso-provider';
import ModalContext from '../Modal/ModalContext';
import useWidthOf from '../utils/use-width-of';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'PicassoPopper' });
const getAnchorEl = (anchorEl) => (typeof anchorEl === 'function' ? anchorEl() : anchorEl);
const getPreventOverflowOptions = (isInsideModal) => {
    if (isInsideModal) {
        return {
            boundariesElement: 'scrollParent',
            padding: 0,
        };
    }
    return {
        boundariesElement: 'viewport',
        padding: 5,
    };
};
export const getPopperOptions = (popperOptions, isInsideModal = false) => {
    var _a, _b;
    return (Object.assign(Object.assign({}, popperOptions), { modifiers: Object.assign(Object.assign({}, popperOptions.modifiers), { flip: Object.assign({ enabled: true }, (_a = popperOptions.modifiers) === null || _a === void 0 ? void 0 : _a.flip), preventOverflow: Object.assign(Object.assign({ enabled: true }, getPreventOverflowOptions(isInsideModal)), (_b = popperOptions.modifiers) === null || _b === void 0 ? void 0 : _b.preventOverflow) }) }));
};
const useWidthStyle = ({ anchorEl, autoWidth, width, }) => {
    const resolvedAnchorEl = getAnchorEl(anchorEl);
    const anchorElWidth = useWidthOf(resolvedAnchorEl);
    if (width) {
        return { width };
    }
    if (autoWidth) {
        return { width: anchorElWidth };
    }
    return {};
};
export const Popper = forwardRef(function Popper(props, ref) {
    const { children, open, anchorEl, className, container, popperOptions = {}, keepMounted, autoWidth, width, enableCompactMode, disablePortal, style } = props, rest = __rest(props, ["children", "open", "anchorEl", "className", "container", "popperOptions", "keepMounted", "autoWidth", "width", "enableCompactMode", "disablePortal", "style"]);
    const picassoRootContainer = usePicassoRoot();
    const isInsideModal = useContext(ModalContext);
    const classes = useStyles();
    const isCompactLayoutResolution = useBreakpoint(['small', 'medium']);
    const isCompactLayout = enableCompactMode && isCompactLayoutResolution;
    const widthStyle = useWidthStyle({ autoWidth, width, anchorEl });
    const anchorElWidthStyle = !isCompactLayout && widthStyle;
    useIsomorphicLayoutEffect(() => {
        if (isCompactLayout && open && document.body.style.overflow !== 'hidden') {
            const prev = document.body.style.overflow;
            document.body.style.overflow = 'hidden';
            return () => {
                document.body.style.overflow = prev;
            };
        }
    }, [isCompactLayout, open]);
    const memoizedPopperOptions = React.useMemo(() => getPopperOptions(popperOptions, isInsideModal), [popperOptions, isInsideModal]);
    return (React.createElement(MUIPopper, Object.assign({ open: open, container: container || picassoRootContainer, anchorEl: anchorEl, className: cx(classes.root, className), popperRef: ref, popperOptions: memoizedPopperOptions, disablePortal: disablePortal, keepMounted: keepMounted, style: Object.assign(Object.assign({}, style), anchorElWidthStyle) }, rest), children));
});
Popper.defaultProps = {
    open: false,
    disablePortal: false,
    placement: 'bottom',
    popperOptions: {},
    autoWidth: true,
};
Popper.displayName = 'Popper';
export default Popper;
//# sourceMappingURL=Popper.js.map