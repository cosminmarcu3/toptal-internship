var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useRef, useMemo, } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { Slider as MUISlider, } from '@material-ui/core';
import cx from 'classnames';
import SliderValueLabel from '../SliderValueLabel';
import { SliderContextProvider } from './SliderContext';
import useCombinedRefs from '../utils/use-combined-refs';
import styles from './styles';
const useStyles = makeStyles(styles);
const createDefaultValueLabelComponent = (tooltip, disablePortal, compact) => {
    const ValueLableComponent = (props) => (React.createElement(SliderValueLabel, Object.assign({}, props, { tooltip: tooltip, disablePortal: disablePortal, compact: compact })));
    return ValueLableComponent;
};
export const Slider = forwardRef(function Slider(props, ref) {
    const { min, max, marks, value, defaultValue = 0, tooltip, tooltipFormat, compact, TooltipComponent: UserDefinedTooltip, step, disabled, disablePortal, onChange, hideThumbOnEmpty, disableTrackHighlight } = props, rest = __rest(props, ["min", "max", "marks", "value", "defaultValue", "tooltip", "tooltipFormat", "compact", "TooltipComponent", "step", "disabled", "disablePortal", "onChange", "hideThumbOnEmpty", "disableTrackHighlight"]);
    const _a = useStyles(), { wrapper, markTrack, hideThumb, markInactive, unmarkTrack } = _a, classes = __rest(_a, ["wrapper", "markTrack", "hideThumb", "markInactive", "unmarkTrack"]);
    const sliderRef = useCombinedRefs(ref, useRef(null));
    const isThumbHidden = hideThumbOnEmpty && (typeof value === 'undefined' || value === null);
    const DefaultValueLabelComponent = useMemo(() => createDefaultValueLabelComponent(tooltip, disablePortal, compact), [tooltip, disablePortal, compact]);
    // From Workaround for https://github.com/mui-org/material-ui/issues/21889
    const ValueLabelComponent = (UserDefinedTooltip ||
        DefaultValueLabelComponent);
    return (React.createElement(SliderContextProvider, null,
        React.createElement("div", { className: wrapper },
            React.createElement(MUISlider, Object.assign({}, rest, { ref: sliderRef, defaultValue: defaultValue, value: value, min: min, max: max, step: step, marks: marks, disabled: disabled, classes: Object.assign(Object.assign({}, classes), { track: cx(classes.track, {
                        [markTrack]: marks,
                        [unmarkTrack]: disableTrackHighlight,
                    }), thumb: cx(classes.thumb, {
                        [hideThumb]: isThumbHidden,
                    }), markActive: cx(classes.markActive, {
                        [markInactive]: isThumbHidden || disableTrackHighlight,
                    }) }), ValueLabelComponent: ValueLabelComponent, valueLabelFormat: tooltipFormat, valueLabelDisplay: tooltip, onChange: onChange })))));
});
Slider.displayName = 'Slider';
Slider.defaultProps = {
    defaultValue: 0,
    min: 0,
    max: 100,
    tooltip: 'off',
    disablePortal: false,
};
export default Slider;
//# sourceMappingURL=Slider.js.map