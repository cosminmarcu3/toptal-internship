import React, { createContext, useCallback, useContext, useMemo, useState, } from 'react';
import { noop } from '../utils';
const SliderContext = createContext({
    registerValueLabel: noop,
    hasTooltipOverlow: false,
});
const SliderContextProvider = ({ children }) => {
    const [valueLabels, setValueLabels] = useState([
        null,
        null,
    ]);
    const [hasTooltipOverlow, setHasTooltipOverflow] = useState(false);
    const checkTooltipsOverlap = useCallback(() => {
        if (valueLabels[0] && valueLabels[1]) {
            const minDistance = (valueLabels[0].tooltipWidth + valueLabels[1].tooltipWidth) / 2;
            const distance = valueLabels[1].thumb.offsetLeft - valueLabels[0].thumb.offsetLeft;
            setHasTooltipOverflow(distance < minDistance && distance !== 0);
        }
    }, [valueLabels]);
    const registerValueLabel = useCallback((index, tooltip, thumb) => {
        if (!valueLabels[index]) {
            const newTooltips = [...valueLabels];
            newTooltips[index] = { thumb, tooltipWidth: tooltip.offsetWidth };
            setValueLabels(newTooltips);
        }
        else {
            checkTooltipsOverlap();
        }
    }, [valueLabels, checkTooltipsOverlap]);
    const contextValue = useMemo(() => ({
        registerValueLabel,
        hasTooltipOverlow,
    }), [registerValueLabel, hasTooltipOverlow]);
    return (React.createElement(SliderContext.Provider, { value: contextValue }, children));
};
const useSliderContext = () => useContext(SliderContext);
export { SliderContextProvider, useSliderContext };
//# sourceMappingURL=SliderContext.js.map