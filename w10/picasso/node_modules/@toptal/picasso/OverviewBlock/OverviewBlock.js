var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import { useTitleCase, } from '@toptal/picasso-shared';
import styles from './styles';
import { useOverviewBlockGroupContext } from '../OverviewBlockGroup/OverviewBlockGroupContext';
import Container from '../Container';
import Typography from '../Typography';
import { toTitleCase } from '../utils';
const useStyles = makeStyles(styles, {
    name: 'PicassoOverviewBlock',
});
export const OverviewBlock = forwardRef(function OverviewBlock(props, ref) {
    const { value, label, variant, as, className, onClick, titleCase: propsTitleCase } = props, rest = __rest(props, ["value", "label", "variant", "as", "className", "onClick", "titleCase"]);
    const classes = useStyles();
    const { align, blockWidth } = useOverviewBlockGroupContext();
    const color = {
        value: 'black',
        label: 'dark-grey',
    };
    if (variant) {
        const [partName, colorName] = variant.split('-');
        color[partName] = colorName;
    }
    const isClickable = Boolean(onClick) || typeof as !== 'string';
    const Component = isClickable && as ? as : 'div';
    const titleCase = useTitleCase(propsTitleCase);
    return (React.createElement(Component, Object.assign({}, rest, { ref: ref, className: cx({ [classes.clickable]: isClickable }, { [classes.disableOutline]: !isClickable }, classes[`${align}Align`], classes[`${blockWidth}Width`], classes.root, className), onClick: onClick }),
        React.createElement(Container, { align: 'left' },
            React.createElement(Typography, { size: 'xxsmall', weight: 'semibold', color: color.label }, titleCase ? toTitleCase(label) : label),
            React.createElement(Typography, { size: 'large', weight: 'semibold', color: color.value }, value))));
});
OverviewBlock.defaultProps = {
    as: 'button',
};
OverviewBlock.displayName = 'OverviewBlock';
export default OverviewBlock;
//# sourceMappingURL=OverviewBlock.js.map