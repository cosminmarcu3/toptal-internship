var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useContext } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { TableCell as MUITableCell } from '@material-ui/core';
import { useTitleCase, } from '@toptal/picasso-shared';
import cx from 'classnames';
import toTitleCase from '../utils/to-title-case';
import styles from './styles';
import { TableContext, TableSectionContext, TableSection } from '../Table';
import Typography from '../Typography';
const useStyles = makeStyles(styles, { name: 'PicassoTableCell' });
const getTypographySettings = (tableSection) => {
    switch (tableSection) {
        case TableSection.HEAD:
            return {
                color: 'dark-grey',
                size: 'xsmall',
                weight: 'semibold',
            };
        case TableSection.FOOTER:
            return {
                color: 'black',
                size: 'small',
                weight: 'semibold',
            };
        default:
            return {
                color: 'dark-grey',
                size: 'small',
                weight: 'inherit',
            };
    }
};
export const TableCell = forwardRef(function TableCell(props, ref) {
    const { align, className, style, children, colSpan, rowSpan, titleCase: propsTitleCase } = props, rest = __rest(props, ["align", "className", "style", "children", "colSpan", "rowSpan", "titleCase"]);
    const _a = useStyles(), { compact: compactClass, narrow: narrowClass } = _a, muiClasses = __rest(_a, ["compact", "narrow"]);
    const { spacing } = useContext(TableContext);
    const tableSection = useContext(TableSectionContext);
    const isHead = tableSection === TableSection.HEAD;
    const titleCase = useTitleCase(propsTitleCase);
    const renderChildren = () => isHead && titleCase ? toTitleCase(children) : children;
    return (React.createElement(MUITableCell, Object.assign({}, rest, { ref: ref, align: align, classes: muiClasses, className: cx(className, {
            [compactClass]: spacing === 'compact',
            [narrowClass]: spacing === 'narrow',
        }), style: style, colSpan: colSpan, rowSpan: rowSpan }),
        React.createElement(Typography, Object.assign({ as: 'div' }, getTypographySettings(tableSection)), renderChildren())));
});
TableCell.defaultProps = {
    align: 'inherit',
};
TableCell.displayName = 'TableCell';
export default TableCell;
//# sourceMappingURL=TableCell.js.map