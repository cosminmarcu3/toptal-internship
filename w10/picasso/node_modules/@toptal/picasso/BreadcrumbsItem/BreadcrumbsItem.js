var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from 'react';
import { useTitleCase, } from '@toptal/picasso-shared';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import Typography from '../Typography';
import { toTitleCase } from '../utils';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoBreadcrumbs',
});
const Active = (props) => {
    return React.createElement(Typography, Object.assign({ weight: 'semibold', color: 'black' }, props));
};
export const BreadcrumbsItem = forwardRef(function BreadcrumbsItem(props, ref) {
    const { as, active, children, className, titleCase: propsTitleCase } = props, rest = __rest(props, ["as", "active", "children", "className", "titleCase"]);
    const Component = active ? Active : as || 'span';
    const classes = useStyles();
    const titleCase = useTitleCase(propsTitleCase);
    return (React.createElement(Component, Object.assign({ ref: ref, className: cx(classes.root, className) }, rest), titleCase ? toTitleCase(children) : children));
});
BreadcrumbsItem.defaultProps = {
    as: 'span',
};
BreadcrumbsItem.displayName = 'BreadcrumbsItem';
export default BreadcrumbsItem;
//# sourceMappingURL=BreadcrumbsItem.js.map