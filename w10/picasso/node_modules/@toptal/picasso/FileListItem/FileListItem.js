import React from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import Container from '../Container';
import Typography from '../Typography';
import Tooltip from '../Tooltip';
import ButtonCircular from '../ButtonCircular';
import Loader from '../Loader';
import ProgressBar from '../ProgressBar';
import { Attachment16, Trash16, CloseMinor16 } from '../Icon';
import styles from './styles';
import TypographyOverflow from '../TypographyOverflow';
const useStyles = makeStyles(styles, {
    name: 'FileListItem',
});
const FileListItem = ({ file, index, disabled, onRemove, testIds }) => {
    const { uploading, progress, error, file: { name }, } = file;
    const classes = useStyles();
    const handleRemove = () => {
        onRemove === null || onRemove === void 0 ? void 0 : onRemove(name, index);
    };
    const uploadingNode = (React.createElement(React.Fragment, null,
        React.createElement(Typography, { className: classes.label, variant: 'body', color: 'black', size: 'medium' }, "Uploading..."),
        progress !== undefined ? (React.createElement(ProgressBar, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.progressBar, value: progress })) : (React.createElement(Loader, { className: classes.loader, size: 'small' }))));
    const fileNode = (React.createElement(React.Fragment, null,
        React.createElement(Container, { flex: true, direction: 'column', className: cx(classes.fileNodeContent) },
            React.createElement(Container, { flex: true, direction: 'row' },
                !error && (React.createElement(Container, { right: 'xsmall' },
                    React.createElement(Attachment16, { color: 'darkGrey' }))),
                React.createElement(TypographyOverflow, { className: classes.label, variant: 'body', size: 'medium', color: error ? 'red' : 'black' }, name)),
            React.createElement(Typography, { className: classes.error, variant: 'body', size: 'xsmall', color: 'red' }, error)),
        onRemove && (React.createElement(Tooltip, { compact: true, placement: 'top', content: error ? 'Dismiss' : 'Remove File' },
            React.createElement(ButtonCircular, { variant: 'flat', onClick: handleRemove, disabled: disabled }, error ? React.createElement(CloseMinor16, { color: 'red' }) : React.createElement(Trash16, { color: 'red' }))))));
    return (React.createElement(Container, { flex: true, direction: 'row', alignItems: 'center', justifyContent: 'space-between', className: cx(classes.root) }, uploading && error === undefined ? uploadingNode : fileNode));
};
export default FileListItem;
//# sourceMappingURL=FileListItem.js.map