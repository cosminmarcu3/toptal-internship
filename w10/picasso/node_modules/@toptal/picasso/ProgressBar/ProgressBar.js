var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import Container from '../Container';
import Typography from '../Typography';
import styles from './styles';
const MIN_VALUE = 0;
const MAX_VALUE = 100;
const useStyles = makeStyles(styles, {
    name: 'PicassoProgressBar',
});
const normalizeValue = (value) => Math.min(Math.max(value, MIN_VALUE), MAX_VALUE);
export const ProgressBar = forwardRef(function ProgressBar(props, ref) {
    const { value, showPercentage, 'data-testid': dataTestId } = props, restProps = __rest(props, ["value", "showPercentage", 'data-testid']);
    const classes = useStyles(props);
    const percentage = normalizeValue(value);
    return (React.createElement(Container, Object.assign({ flex: true, direction: 'row', alignItems: 'center', "data-testid": dataTestId }, restProps, { ref: ref }),
        React.createElement("div", { className: cx(classes.progressBar) },
            React.createElement("div", { className: cx(classes.progressIndicator), style: {
                    width: `${props.value}%`,
                } })),
        showPercentage && (React.createElement(Container, { left: 'xsmall' },
            React.createElement(Typography, { variant: 'body', size: 'xsmall', weight: 'semibold', className: cx(classes.percentageValue) },
                percentage,
                "%")))));
});
ProgressBar.defaultProps = {
    showPercentage: false,
};
export default ProgressBar;
//# sourceMappingURL=ProgressBar.js.map