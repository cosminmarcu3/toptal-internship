import React, { useState } from 'react';
import { zoomTransform, select } from 'd3';
const treeContextValue = {
    state: {},
    updateState: () => { },
};
export const TreeViewContext = React.createContext(treeContextValue);
export const TreeViewContainer = ({ children }) => {
    const [state, setState] = useState({});
    const updateState = (newState) => {
        setState(Object.assign(Object.assign({}, state), newState));
    };
    const zoomHandler = (step) => {
        if (!state.ref || !state.zoom) {
            return;
        }
        select(state.ref)
            .transition()
            .call(state.zoom.scaleTo, function (datum, index, groups) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const defaultExtent = state.zoom.extent();
            const k0 = zoomTransform(this).k;
            // @ts-ignore
            const extent = defaultExtent.apply(this, [datum, index, groups]);
            const width = extent[1][0];
            // support backward compatibility for the `step` argument
            const k1 = step > 1 ? step - 1 : -step;
            return (width * k0 + width * k1) / width;
        });
    };
    return (React.createElement(TreeViewContext.Provider, { value: {
            state: Object.assign(Object.assign({}, state), { zoomHandler }),
            updateState,
        } }, children));
};
//# sourceMappingURL=TreeViewContainer.js.map