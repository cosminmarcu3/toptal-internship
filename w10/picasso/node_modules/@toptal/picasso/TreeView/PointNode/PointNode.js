import React, { forwardRef, useMemo, useRef, useState } from 'react';
import { useIsomorphicLayoutEffect } from '../../utils';
import { NodeContent } from './NodeContent';
export const PointNode = forwardRef(({ node, renderNode }, ref) => {
    const nodeRef = useRef(null);
    const [dimensions, setDimensions] = useState({});
    const transform = useMemo(() => {
        return `translate(${node.x},${node.y})`;
    }, [node.x, node.y]);
    useIsomorphicLayoutEffect(() => {
        var _a, _b, _c;
        if (nodeRef.current) {
            const { offsetWidth: width, offsetHeight: height } = (_c = (_b = (_a = node.ref) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.firstElementChild;
            if (dimensions.height !== height || dimensions.width !== width) {
                setDimensions({
                    width,
                    height,
                });
            }
        }
    }, [dimensions, node.ref]);
    return (React.createElement("g", { id: node.id, transform: transform, ref: ref },
        React.createElement("foreignObject", { width: dimensions.width, height: dimensions.height, ref: nodeRef }, renderNode ? renderNode(node) : React.createElement(NodeContent, { node: node }))));
});
PointNode.displayName = 'Node';
export default PointNode;
//# sourceMappingURL=PointNode.js.map