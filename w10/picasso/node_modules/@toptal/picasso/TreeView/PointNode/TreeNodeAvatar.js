var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import getNameInitials from '../../utils/get-name-initials';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoTreeNodeAvatar',
});
const renderInitials = ({ src, name, classes }) => {
    if (src || !name) {
        return null;
    }
    const initials = getNameInitials(name);
    return (React.createElement("g", null,
        React.createElement("g", { mask: 'url(#shape)', className: classes === null || classes === void 0 ? void 0 : classes.shape },
            React.createElement("rect", { x: '0', y: '0', width: '40', height: '40' })),
        React.createElement("text", { x: '50%', y: '50%', className: classes === null || classes === void 0 ? void 0 : classes.text }, initials)));
};
const sizeValues = {
    xxsmall: '32',
    xsmall: '40',
    small: '80',
    medium: '120',
    large: '160',
};
export const TreeNodeAvatar = (props) => {
    const classes = useStyles();
    const { name, src, size = 'xxsmall', objectFit = 'contain' } = props, rest = __rest(props, ["name", "src", "size", "objectFit"]);
    const sizeValue = sizeValues[size];
    return (React.createElement("svg", Object.assign({ width: sizeValue, height: sizeValue, viewBox: '0 0 40 40' }, rest),
        React.createElement("g", null,
            src && (React.createElement("image", { href: src, x: '0', y: '0', height: '40', width: '40', mask: 'url(#shape)', preserveAspectRatio: objectFit === 'cover' ? 'xMidYMid slice' : undefined })),
            renderInitials({ classes, name, src })),
        React.createElement("mask", { id: 'shape' },
            React.createElement("g", { fill: 'white' },
                React.createElement("polygon", { points: '0,0 40,0 40,40 8,40 0,32' })))));
};
TreeNodeAvatar.defaultProps = {
    size: 'xxsmall',
    objectFit: 'contain',
};
TreeNodeAvatar.displayName = 'TreeNodeAvatar';
//# sourceMappingURL=TreeNodeAvatar.js.map