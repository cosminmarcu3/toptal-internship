import { useEffect, useMemo, useState } from 'react';
import { zoom as d3zoom, select, zoomIdentity } from 'd3';
export const useZoom = ({ rootRef, scaleExtent, center, initialScale = 1, transitionDuration, }) => {
    const [initialized, setInitialized] = useState(false);
    const zoom = useMemo(() => d3zoom().scaleExtent(scaleExtent), [scaleExtent]);
    const handleZoom = (step) => {
        if (!rootRef.current) {
            return;
        }
        select(rootRef.current).transition().call(zoom.scaleBy, step);
    };
    useEffect(() => {
        if (!rootRef.current) {
            return;
        }
        const transformContainer = select(rootRef.current.firstElementChild);
        zoom.on('zoom', (event) => {
            transformContainer.attr('transform', event.transform);
        });
        if (!initialized) {
            select(rootRef.current)
                .call(zoom)
                .call(zoom.transform, zoomIdentity.scale(initialScale));
            if (center) {
                select(rootRef.current).call(zoom.translateTo, center.x, center.y);
            }
            setInitialized(true);
        }
        else if (center) {
            select(rootRef.current)
                .transition()
                .duration(transitionDuration)
                .call(zoom.translateTo, center.x, center.y);
        }
    }, [zoom, initialized, center, rootRef, initialScale, transitionDuration]);
    return {
        zoom,
        handleZoom,
    };
};
//# sourceMappingURL=useZoom.js.map