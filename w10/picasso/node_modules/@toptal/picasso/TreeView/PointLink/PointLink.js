import React, { useMemo } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import styles from './styles';
const useStyles = makeStyles(styles, { name: 'PicassoPointLink' });
export const PointLink = (props) => {
    const { link, direction, verticalMargin, horizontalMargin } = props;
    const classes = useStyles();
    const path = useMemo(() => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const { source, target } = link;
        const sourceYDeltas = {
            horizontal: ((_a = source.rect) === null || _a === void 0 ? void 0 : _a.height) / 2 || 0,
            vertical: ((_b = source.rect) === null || _b === void 0 ? void 0 : _b.height) || 0,
        };
        const sourceXDeltas = {
            horizontal: ((_c = source.rect) === null || _c === void 0 ? void 0 : _c.width) || 0,
            vertical: ((_d = source.rect) === null || _d === void 0 ? void 0 : _d.width) / 2 || 0,
        };
        const sourceY = source.y + sourceYDeltas[direction];
        const sourceX = source.x + sourceXDeltas[direction];
        const svgPaths = {
            horizontal: `M${sourceX}, ${sourceY}
        H${sourceX + horizontalMargin / 2}
        V${target.y + ((_f = (_e = target.rect) === null || _e === void 0 ? void 0 : _e.height) !== null && _f !== void 0 ? _f : 0) / 2}
        H${target.x}`,
            vertical: `M${sourceX}, ${sourceY}
        V${sourceY + verticalMargin / 2}
        H${target.x + ((_h = (_g = target.rect) === null || _g === void 0 ? void 0 : _g.width) !== null && _h !== void 0 ? _h : 0) / 2}
        V${target.y}`,
        };
        return svgPaths[direction];
    }, [link, direction, verticalMargin, horizontalMargin]);
    return React.createElement("path", { d: path, className: classes.pointLink });
};
PointLink.displayName = 'PointLink';
export default PointLink;
//# sourceMappingURL=PointLink.js.map