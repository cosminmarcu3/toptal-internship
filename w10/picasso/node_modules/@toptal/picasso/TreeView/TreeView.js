import React, { createRef, useContext, useEffect, useState, useMemo, } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { TreeViewContext } from './TreeViewContainer';
import { useTree } from './useTree';
import Zoom from './Zoom';
import styles from './styles';
import { useZoom } from './useZoom';
import { DEFAULT_SCALE_EXTENT, ZERO_VECTOR2, TreeViewPropsDefaults, } from './variables';
import { TreeViewSvg } from './TreeViewSvg';
import { useFinalMargins } from './useFinalMargins';
import { usePropDeprecationWarning } from '../utils/use-deprecation-warnings';
const useStyles = makeStyles(styles, { name: 'PicassoTreeView' });
export const TreeView = (props) => {
    var _a, _b, _c;
    usePropDeprecationWarning({
        props,
        name: 'centerTranslation',
        componentName: 'TreeView',
        description: 'If you happen to rely on it, you are likely would want to migrate to StaticTreeView component instead of TreeView',
    });
    usePropDeprecationWarning({
        props,
        name: 'transitionDuration',
        componentName: 'TreeView',
        description: 'If you happen to rely on it, you are likely would want to migrate to StaticTreeView component instead of TreeView',
    });
    const { data, renderNode, nodeWidth = TreeView.defaultProps.nodeWidth, nodeHeight = TreeView.defaultProps.nodeHeight, scaleExtent = TreeView.defaultProps.scaleExtent, initialScale = TreeView.defaultProps.initialScale, scaleCoefficient = TreeView.defaultProps.scaleCoefficient, showZoom = TreeView.defaultProps.showZoom, 
    // NOTE: these two are intentionally removed from defaultProps in order
    // to make usePropDeprecationWarning hook correctly detect their usage
    centerTranslation = ZERO_VECTOR2, transitionDuration = 750, } = props;
    const { direction = TreeView.defaultProps.directionProps.direction, variant = TreeView.defaultProps.directionProps.variant, } = (_a = props.directionProps) !== null && _a !== void 0 ? _a : TreeView.defaultProps.directionProps;
    const classes = useStyles();
    const rootRef = createRef();
    const [verticalMargin, horizontalMargin] = useFinalMargins(direction, (_b = props.directionProps) === null || _b === void 0 ? void 0 : _b.verticalMargin, (_c = props.directionProps) === null || _c === void 0 ? void 0 : _c.horizontalMargin);
    const { nodes, links, selectedNode } = useTree({
        data,
        direction,
        verticalMargin,
        horizontalMargin,
        nodeWidth,
        nodeHeight,
        variant,
    });
    const center = useMemo(() => {
        var _a, _b;
        if (!selectedNode) {
            return ZERO_VECTOR2;
        }
        const { x: xPosition, y: yPosition, data: nodeData } = selectedNode;
        return {
            x: xPosition + nodeWidth / 2 + (((_a = nodeData.selectedOffset) === null || _a === void 0 ? void 0 : _a.x) || 0),
            y: yPosition + nodeHeight / 2 + (((_b = nodeData.selectedOffset) === null || _b === void 0 ? void 0 : _b.y) || 0),
        };
    }, [selectedNode, nodeWidth, nodeHeight]);
    const { handleZoom, zoom } = useZoom({
        rootRef,
        scaleExtent,
        center: {
            x: center.x + centerTranslation.x,
            y: center.y + centerTranslation.y,
        },
        transitionDuration,
        initialScale,
    });
    const [initialized, setInitialized] = useState(false);
    const { updateState } = useContext(TreeViewContext);
    useEffect(() => {
        if (!rootRef.current || initialized || !zoom) {
            return;
        }
        updateState({
            ref: rootRef.current,
            zoom,
        });
        setInitialized(true);
    }, [rootRef, initialized, zoom, updateState]);
    return (React.createElement("div", { className: classes.root },
        showZoom && (React.createElement(Zoom, { handleZoom: handleZoom, scaleCoefficient: scaleCoefficient })),
        React.createElement(TreeViewSvg, { ref: rootRef, nodes: nodes, links: links, direction: direction, verticalMargin: verticalMargin, horizontalMargin: horizontalMargin, renderNode: renderNode, svgProps: { className: classes.svg } })));
};
TreeView.defaultProps = Object.assign(Object.assign({}, TreeViewPropsDefaults), { scaleExtent: DEFAULT_SCALE_EXTENT, initialScale: 1, scaleCoefficient: 0.5, showZoom: true });
TreeView.displayName = 'TreeView';
export default TreeView;
//# sourceMappingURL=TreeView.js.map