/* eslint-disable @typescript-eslint/no-non-null-assertion */
import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { isBrowser } from '@toptal/picasso-shared';
import { ButtonBase } from '@material-ui/core';
import cx from 'classnames';
import InputAdornment from '../InputAdornment';
import Container from '../Container';
import { ArrowDownMinor16, ArrowUpMinor16, ArrowDownMinor24, ArrowUpMinor24, } from '../Icon';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'NumberInputEndAdornment',
});
// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const nativeInputValueSetter = isBrowser()
    ? Object.getOwnPropertyDescriptor(
    // eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope
    window.HTMLInputElement.prototype, 'value').set
    : undefined;
export const NumberInputEndAdornment = (props) => {
    const { step = 1, min = -Infinity, max = Infinity, value, disabled, size = 'medium', inputRef, } = props;
    const classes = useStyles(props);
    const normalizedStep = Number(step);
    const normalizedValue = Number(value);
    const normalizedMin = Number(min);
    const normalizedMax = Number(max);
    const fireEvent = (nextValue) => {
        if (!nativeInputValueSetter) {
            return;
        }
        const input = inputRef === null || inputRef === void 0 ? void 0 : inputRef.current;
        nativeInputValueSetter.call(input, nextValue);
        const event = new Event('input', {
            bubbles: true,
            cancelable: true,
        });
        if (input) {
            input.dispatchEvent(event);
        }
    };
    const handleUpClick = () => {
        if (typeof value === 'undefined') {
            return;
        }
        let nextValue = normalizedValue + normalizedStep;
        if (nextValue <= max) {
            if (normalizedValue < normalizedMin + normalizedStep) {
                nextValue = normalizedMin + normalizedStep;
            }
            fireEvent(nextValue);
        }
        else if (normalizedValue !== normalizedMax) {
            nextValue = normalizedMax;
            fireEvent(nextValue);
        }
    };
    const handleDownClick = () => {
        if (typeof value === 'undefined') {
            return;
        }
        let nextValue = normalizedValue - normalizedStep;
        if (nextValue >= min) {
            if (normalizedValue > normalizedMax - normalizedStep) {
                nextValue = normalizedMax - normalizedStep;
            }
            fireEvent(nextValue);
        }
        else if (normalizedValue !== normalizedMin) {
            nextValue = normalizedMin;
            fireEvent(nextValue);
        }
    };
    const rootClassName = cx({
        [classes.disabled]: disabled,
    }, classes[size], classes.root);
    return (React.createElement(InputAdornment, { position: 'end' },
        React.createElement(Container, { flex: true, direction: 'column', inline: true },
            React.createElement(ButtonBase, { disabled: disabled, classes: {
                    root: rootClassName,
                }, onClick: handleUpClick }, size === 'large' ? React.createElement(ArrowUpMinor24, null) : React.createElement(ArrowUpMinor16, null)),
            React.createElement(ButtonBase, { disabled: disabled, classes: {
                    root: rootClassName,
                }, onClick: handleDownClick }, size === 'large' ? React.createElement(ArrowDownMinor24, null) : React.createElement(ArrowDownMinor16, null)))));
};
NumberInputEndAdornment.defaultProps = {
    min: -Infinity,
    max: Infinity,
    value: 0,
    step: 1,
    disabled: false,
    size: 'medium',
};
NumberInputEndAdornment.displayName = 'NumberInputEndAdornment';
export default NumberInputEndAdornment;
//# sourceMappingURL=NumberInputEndAdornment.js.map