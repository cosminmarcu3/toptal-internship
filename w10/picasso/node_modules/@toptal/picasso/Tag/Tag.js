var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import { useTitleCase } from '@toptal/picasso-shared';
import Chip from '../Chip';
import { CloseMinor16 } from '../Icon';
import styles from './styles';
import toTitleCase from '../utils/to-title-case';
const useStyles = makeStyles(styles, { name: 'PicassoLabel' });
// eslint-disable-next-line react/display-name
export const Tag = forwardRef(function Tag(props, ref) {
    const { as = 'div', className, disabled, endAdornment, hovered, children, icon, onDelete, style, titleCase: propsTitleCase, variant = 'light-grey' } = props, rest = __rest(props
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    , ["as", "className", "disabled", "endAdornment", "hovered", "children", "icon", "onDelete", "style", "titleCase", "variant"]);
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { color } = rest, htmlAttributes = __rest(rest, ["color"]);
    const classes = useStyles();
    const titleCase = useTitleCase(propsTitleCase);
    const label = (React.createElement(React.Fragment, null,
        React.createElement("span", { className: classes.innerLabel }, titleCase ? toTitleCase(children) : children),
        endAdornment));
    const handleDelete = (event) => {
        if (disabled) {
            return;
        }
        if (onDelete) {
            event.preventDefault();
            onDelete();
        }
    };
    return (React.createElement(Chip, Object.assign({}, htmlAttributes, { ref: ref, classes: {
            root: classes.root,
            label: classes.label,
            clickable: classes.clickable,
        }, className: cx(className, classes[variant], {
            [classes.hovered]: hovered,
            [classes.disabled]: disabled,
        }), style: style, icon: icon
            ? React.cloneElement(icon, {
                color: disabled ? 'grey' : 'dark-grey',
            })
            : undefined, label: label, deleteIcon: React.createElement("span", { "aria-label": 'delete icon', role: 'button', className: classes.deleteIcon },
            React.createElement(CloseMinor16, null)), component: as, onDelete: onDelete ? handleDelete : undefined, "aria-disabled": disabled })));
});
Tag.defaultProps = {
    as: 'div',
    children: '',
    variant: 'light-grey',
};
Tag.displayName = 'Tag';
export { useStyles };
export default Tag;
//# sourceMappingURL=Tag.js.map