import React, { ReactNode, ReactElement, HTMLAttributes, ElementType, AnchorHTMLAttributes } from 'react';
import { BaseProps, TextLabelProps } from '@toptal/picasso-shared';
export declare type DivOrAnchorProps = AnchorHTMLAttributes<HTMLAnchorElement> & HTMLAttributes<HTMLDivElement>;
export interface Props extends BaseProps, TextLabelProps, DivOrAnchorProps {
    /** The component used for the root node. Either a string to use a DOM element or a component. */
    as?: ElementType;
    /** Text content of the `Tag` component */
    children: ReactNode;
    /** Specify the icon which should be rendered inside Tag */
    icon?: ReactElement;
    /** Defines if `Tag` is disabled */
    disabled?: boolean;
    /** A callback which is invoked after remove `Icon` is clicked
     *
     * Please note that specifying this callback automatically adds remove `Icon` as children of the `Tag`
     */
    onDelete?: () => void;
    /** Variant of the `Tag` */
    variant?: 'light-grey' | 'blue' | 'green' | 'yellow' | 'red';
    /** ReactNode rendered after label */
    endAdornment?: ReactNode;
    hovered?: boolean;
}
declare const useStyles: (props?: any) => import("@material-ui/styles").ClassNameMap<string>;
export declare const Tag: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLDivElement>>;
export { useStyles };
export default Tag;
