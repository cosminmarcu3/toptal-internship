import React from 'react';
import { BaseProps } from '@toptal/picasso-shared';
import { EditorPlugin } from '../QuillEditor';
import { ASTType } from '../RichText';
import { Status } from '../OutlinedInput';
import { CounterMessageSetter } from './types';
export interface Props extends BaseProps {
    /** Indicates that an element is to be focused on page load */
    autoFocus?: boolean;
    /** Default value in [HAST](https://github.com/syntax-tree/hast) format */
    defaultValue?: ASTType;
    /**
     * This Boolean attribute indicates that the user cannot interact with the control.
     */
    disabled?: boolean;
    /** unique identifier */
    id: string;
    /**
     * @deprecated Use the `status` prop instead to both support success and error states
     * Indicate whether `RichTextEditor` is in error state
     */
    error?: boolean;
    /** Indicate `RichTextEditor` is in `error` or `default` state */
    status?: Extract<Status, 'error' | 'default'>;
    /** Used inside Form with combination of Label to enable forHtml functionality */
    hiddenInputId?: string;
    /**
     * The maximum number of characters that the user can enter.
     * If this value isn't specified, the user can enter an unlimited
     * number of characters.
     */
    maxLength?: number;
    /**
     * The minimum number of characters required that the user should enter.
     */
    minLength?: number;
    /** Name attribute of the input element */
    name?: string;
    /**
     * Custom counter message for minLength
     */
    minLengthMessage?: CounterMessageSetter;
    /**
     * Custom counter message for maxLength
     */
    maxLengthMessage?: CounterMessageSetter;
    /**
     * Callback on text change
     */
    onChange?: (value: string) => void;
    /**
     * Callback for blur event
     */
    onBlur?: () => void;
    /**
     * Callback for focus event
     */
    onFocus?: () => void;
    /** The placeholder attribute specifies a short hint that describes the expected value of a text editor. */
    placeholder?: string;
    /** List of plugins to enable on the editor */
    plugins?: EditorPlugin[];
    setHasMultilineCounter?: (name: string, hasCounter: boolean) => void;
    testIds?: {
        wrapper?: string;
        editor?: string;
        headerSelect?: string;
        boldButton?: string;
        italicButton?: string;
        unorderedListButton?: string;
        orderedListButton?: string;
    };
}
export declare const RichTextEditor: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLDivElement>>;
export default RichTextEditor;
