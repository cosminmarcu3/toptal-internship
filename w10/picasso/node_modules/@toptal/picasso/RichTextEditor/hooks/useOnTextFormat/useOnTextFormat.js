import { useCallback } from 'react';
import { actions as toolbarActions } from '../../store/toolbar';
import { convertBoldFromEditorValue, convertItalicFromEditorValue, convertListFromEditorValue, convertHeaderFromEditorValue, convertLinkFromEditorValue, } from '../../utils/convertFormat';
const useOnTextFormat = ({ dispatch }) => {
    const handleTextFormat = useCallback((e) => {
        switch (e.formatName) {
            case 'bold': {
                const boldValue = convertBoldFromEditorValue(e.value);
                return toolbarActions.setBold(dispatch)(boldValue);
            }
            case 'italic': {
                const italicValue = convertItalicFromEditorValue(e.value);
                return toolbarActions.setItalic(dispatch)(italicValue);
            }
            case 'list': {
                const listValue = convertListFromEditorValue(e.value);
                return toolbarActions.setList(dispatch)(listValue);
            }
            case 'header': {
                const headerValue = convertHeaderFromEditorValue(e.value);
                return toolbarActions.setHeader(dispatch)(headerValue);
            }
            case 'link': {
                const linkValue = convertLinkFromEditorValue(e.value);
                return toolbarActions.setLink(dispatch)(linkValue);
            }
            default:
                throw Error(`TextEditor - useOnTextFormat is not implemented for ${e}`);
        }
    }, [dispatch]);
    return { handleTextFormat };
};
export default useOnTextFormat;
//# sourceMappingURL=useOnTextFormat.js.map