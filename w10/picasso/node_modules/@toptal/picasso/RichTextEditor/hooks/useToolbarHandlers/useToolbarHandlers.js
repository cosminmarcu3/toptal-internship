import { useCallback } from 'react';
import { CUSTOM_QUILL_EDITOR_FORMAT_EVENT, } from '../../../QuillEditor';
import { INSERT_DEFAULT_LINK_TEXT } from '../../../QuillEditor/constants';
import { convertHeaderToEditorValue } from '../../utils/convertFormat';
const useToolbarHandlers = ({ editorRef, handleTextFormat, format }) => {
    const sendFormatEvent = useCallback((detail) => {
        var _a;
        const formatEvent = new CustomEvent(CUSTOM_QUILL_EDITOR_FORMAT_EVENT, {
            detail,
        });
        (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.dispatchEvent(formatEvent);
    }, [editorRef]);
    const sendDefaultLinkTextEvent = useCallback(detail => {
        var _a;
        const defaultLinkTextEvent = new CustomEvent(INSERT_DEFAULT_LINK_TEXT, {
            detail,
        });
        (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.dispatchEvent(defaultLinkTextEvent);
    }, [editorRef]);
    const handleBold = () => {
        const bold = !format.bold;
        sendFormatEvent({ bold });
        handleTextFormat({
            formatName: 'bold',
            value: bold,
        });
    };
    const handleItalic = () => {
        const italic = !format.italic;
        sendFormatEvent({ italic });
        handleTextFormat({
            formatName: 'italic',
            value: italic,
        });
    };
    const handleOrdered = () => {
        const list = format.list === 'ordered' ? undefined : 'ordered';
        sendFormatEvent({ list });
        handleTextFormat({
            formatName: 'list',
            value: list,
        });
    };
    const handleUnordered = () => {
        const list = format.list === 'bullet' ? undefined : 'bullet';
        sendFormatEvent({ list });
        handleTextFormat({
            formatName: 'list',
            value: list,
        });
    };
    const handleHeader = event => {
        const header = convertHeaderToEditorValue(event.target.value);
        sendFormatEvent(header ? { header, bold: false, italic: false } : { header });
        handleTextFormat({
            formatName: 'header',
            value: header,
        });
    };
    const handleLink = () => {
        const link = window.prompt('URL');
        const URLRegexp = new RegExp(/[(http(s)?)://(www.)?a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/gi);
        if (!link || !URLRegexp.test(link)) {
            window.alert('Not valid URL');
            return;
        }
        sendDefaultLinkTextEvent({ link });
        sendFormatEvent({ link });
        handleTextFormat({
            formatName: 'link',
            value: link,
        });
    };
    return {
        handleBold,
        handleItalic,
        handleOrdered,
        handleUnordered,
        handleHeader,
        handleLink,
    };
};
export default useToolbarHandlers;
//# sourceMappingURL=useToolbarHandlers.js.map