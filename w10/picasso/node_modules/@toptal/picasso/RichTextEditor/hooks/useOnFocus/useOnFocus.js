import { useCallback, useState } from 'react';
import { actions as toolbarActions } from '../../store/toolbar';
const useOnFocus = ({ autoFocus, editorRef, toolbarRef, wrapperRef, onFocus, onBlur, dispatch, }) => {
    const [isEditorFocused, setIsEditorFocused] = useState(autoFocus);
    const handleFocus = useCallback((e) => {
        if (!editorRef.current || !toolbarRef.current || !wrapperRef) {
            return;
        }
        toolbarActions.setDisabled(dispatch)(false);
        const focusElement = e.target;
        const isFocusElementInToolbar = toolbarRef.current.contains(focusElement);
        if (isFocusElementInToolbar) {
            return;
        }
        setIsEditorFocused(true);
        onFocus();
    }, [dispatch, onFocus, editorRef, toolbarRef, wrapperRef]);
    const handleBlur = useCallback((e) => {
        if (!toolbarRef.current || !editorRef.current) {
            return;
        }
        const focusElement = e.relatedTarget;
        const isFocusElementInToolbar = toolbarRef.current.contains(focusElement);
        const isFocusElementInEditor = editorRef.current.contains(focusElement);
        const isFocusElementWrapper = wrapperRef.current === focusElement;
        if (isFocusElementInToolbar ||
            isFocusElementInEditor ||
            isFocusElementWrapper) {
            return;
        }
        toolbarActions.setDisabled(dispatch)(true);
        toolbarActions.resetFormat(dispatch)();
        setIsEditorFocused(false);
        onBlur();
    }, [dispatch, onBlur, toolbarRef, editorRef, wrapperRef]);
    return {
        isEditorFocused,
        handleFocus,
        handleBlur,
    };
};
export default useOnFocus;
//# sourceMappingURL=useOnFocus.js.map