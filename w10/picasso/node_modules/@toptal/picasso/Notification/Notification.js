var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, cloneElement, } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { SnackbarContent } from '@material-ui/core';
import cx from 'classnames';
import capitalize from '@material-ui/core/utils/capitalize';
import { CloseMinor16, ExclamationSolid16, ExclamationSolid24, CheckSolid24, Info24, } from '../Icon';
import Container from '../Container';
import ButtonCircular from '../ButtonCircular';
import styles from './styles';
import Typography from '../Typography';
const renderNotificationCloseButton = ({ onClose, classes, testIds, }) => (React.createElement(ButtonCircular, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.closeButton, onClick: onClose, className: classes === null || classes === void 0 ? void 0 : classes.close, icon: React.createElement(CloseMinor16, { className: classes === null || classes === void 0 ? void 0 : classes.closeIcon }) }));
const renderNotificationIcon = ({ icon, variant, classes }) => {
    const iconProps = {
        className: classes === null || classes === void 0 ? void 0 : classes.icon,
    };
    // TODO: these are Icons required circular Icon bg color definitions, all Icons should be white on that color
    // Missing the following: https://github.com/toptal/picasso/issues/253
    switch (variant) {
        case 'red':
            return React.createElement(ExclamationSolid24, Object.assign({}, iconProps, { color: 'red' }));
        case 'yellow':
            return React.createElement(ExclamationSolid16, Object.assign({}, iconProps, { color: 'yellow' }));
        case 'green':
            return React.createElement(CheckSolid24, Object.assign({}, iconProps, { color: 'green' }));
        default: {
            const infoProps = Object.assign(Object.assign({}, iconProps), { color: 'grey' });
            return icon ? cloneElement(icon, infoProps) : React.createElement(Info24, Object.assign({}, infoProps));
        }
    }
};
const renderNotificationContent = (props) => {
    const { classes, children, onClose, variant, testIds } = props;
    const capitalizedVariant = capitalize(variant);
    return (React.createElement(Container, { flex: true, className: classes === null || classes === void 0 ? void 0 : classes.contentWrapper, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.content },
        React.createElement(Container, { flex: true, alignItems: 'center', className: cx(classes === null || classes === void 0 ? void 0 : classes.iconWrapper, classes === null || classes === void 0 ? void 0 : classes[`iconWrapper${capitalizedVariant}`]) }, renderNotificationIcon(props)),
        React.createElement(Typography, { size: variant === 'yellow' ? 'small' : 'medium', className: cx(classes === null || classes === void 0 ? void 0 : classes.content, classes === null || classes === void 0 ? void 0 : classes[`content${capitalizedVariant}`]), as: 'div' }, children),
        onClose && renderNotificationCloseButton(props)));
};
const useStyles = makeStyles(styles, {
    name: 'Notification',
});
export const Notification = forwardRef(function Notification(props, ref) {
    const { className, variant, elevated, testIds, 'data-testid': dataTestId } = props, rest = __rest(props, ["className", "variant", "elevated", "testIds", 'data-testid']);
    const classes = useStyles();
    return (React.createElement(SnackbarContent, Object.assign({}, rest, { className: cx(classes[`notification${capitalize(variant)}`], {
            [classes.notificationShadow]: elevated,
            [classes.roundedBorders]: elevated,
        }, classes.notification, className), "data-testid": dataTestId || (testIds === null || testIds === void 0 ? void 0 : testIds.notification), message: renderNotificationContent(Object.assign(Object.assign({}, props), { classes })), ref: ref })));
});
Notification.defaultProps = {
    elevated: false,
    variant: 'yellow',
};
Notification.displayName = 'Notification';
export default Notification;
//# sourceMappingURL=Notification.js.map