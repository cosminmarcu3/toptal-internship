var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import styles from './styles';
import { FormCompound as Form } from '../FormCompound';
const useStyles = makeStyles(styles, {
    name: 'PicassoFormControlLabel',
});
const FormControlLabel = forwardRef(function FormControlLabel(props, ref) {
    const { control, label, className, style, disabled, requiredDecoration, titleCase, 
    // Avoid passing external classes inside the rest props
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    classes: externalClasses } = props, rest = __rest(props, ["control", "label", "className", "style", "disabled", "requiredDecoration", "titleCase", "classes"]);
    const classes = useStyles(props);
    return (React.createElement("label", Object.assign({}, rest, { ref: ref, className: cx(classes.root, {
            [classes.disabled]: disabled,
        }, className), style: style }),
        React.cloneElement(control, { disabled }),
        React.createElement(Form.Label, { className: classes.label, as: 'span', requiredDecoration: requiredDecoration, disabled: disabled, titleCase: titleCase }, label)));
});
FormControlLabel.displayName = 'FormControlLabel';
export default FormControlLabel;
//# sourceMappingURL=FormControlLabel.js.map