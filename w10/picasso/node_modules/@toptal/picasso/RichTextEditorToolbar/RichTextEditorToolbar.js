import React, { forwardRef } from 'react';
import { makeStyles } from '@material-ui/core';
import cx from 'classnames';
import { Bold16, Italic16, Link16, ListOrdered16, ListUnordered16, } from '../Icon';
import Container from '../Container';
import Select from '../Select';
import styles from './styles';
import TextEditorButton from '../RichTextEditorButton';
const useStyles = makeStyles(styles, {
    name: 'RichTextEditorToolbar',
});
export const RichTextEditorToolbar = forwardRef(function RichTextEditorToolbar(props, ref) {
    const { disabled, id, format, onBoldClick, onItalicClick, onLinkClick, onHeaderChange, onUnorderedClick, onOrderedClick, testIds, plugins, } = props;
    const classes = useStyles(props);
    const isHeadingFormat = format.header === '3';
    const allowLinks = plugins === null || plugins === void 0 ? void 0 : plugins.includes('link');
    return (React.createElement(Container, { id: `${id}toolbar`, ref: ref, className: classes.toolbar },
        React.createElement(Container, { className: cx(classes.group, {
                groupDisabled: disabled,
            }) },
            React.createElement(Select, { onChange: onHeaderChange, value: format.header, options: [
                    { value: '3', text: 'heading' },
                    { value: '', text: 'normal' },
                ], size: 'small', menuWidth: '123px', className: classes.select, disabled: disabled, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.headerSelect })),
        React.createElement(Container, { className: classes.group },
            React.createElement(TextEditorButton, { icon: React.createElement(Bold16, null), onClick: onBoldClick, active: isHeadingFormat ? false : format.bold, disabled: isHeadingFormat || disabled, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.boldButton }),
            React.createElement(TextEditorButton, { icon: React.createElement(Italic16, null), onClick: onItalicClick, active: isHeadingFormat ? false : format.italic, disabled: isHeadingFormat || disabled, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.italicButton })),
        React.createElement(Container, { className: classes.group },
            React.createElement(TextEditorButton, { icon: React.createElement(ListUnordered16, null), onClick: onUnorderedClick, active: format.list === 'bullet', disabled: disabled, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.unorderedListButton }),
            React.createElement(TextEditorButton, { icon: React.createElement(ListOrdered16, null), onClick: onOrderedClick, active: format.list === 'ordered', disabled: disabled, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.orderedListButton })),
        allowLinks && (React.createElement(Container, { className: classes.group },
            React.createElement(TextEditorButton, { icon: React.createElement(Link16, null), onClick: onLinkClick, active: !!format.link, disabled: disabled, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.linkButton })))));
});
RichTextEditorToolbar.defaultProps = {
    disabled: false,
    format: {
        bold: false,
        italic: false,
        list: false,
        header: '',
        link: '',
    },
    onBoldClick: () => { },
    onItalicClick: () => { },
    onHeaderChange: () => { },
    onUnorderedClick: () => { },
    onOrderedClick: () => { },
};
RichTextEditorToolbar.displayName = 'RichTextEditorToolbar';
export default RichTextEditorToolbar;
//# sourceMappingURL=RichTextEditorToolbar.js.map