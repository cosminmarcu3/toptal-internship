import { makeStyles } from '@material-ui/core/styles';
import classNames from 'classnames';
import React, { forwardRef, useCallback, useState } from 'react';
import { Container } from '../Container';
import { ThumbsDown16, ThumbsDown24, ThumbsUp16, ThumbsUp24 } from '../Icon';
import styles from './styles';
const useStyles = makeStyles(styles);
const componentsBySize = {
    small: [ThumbsUp16, ThumbsDown16],
    large: [ThumbsUp24, ThumbsDown24],
};
let globalId = 0;
export const RatingThumbs = forwardRef(function RatingThumbs({ name, interactive = true, size = 'small', value, onChange, testIds = {} }, ref) {
    const classes = useStyles();
    const [baseUniqueId] = useState(() => globalId++);
    const positiveInputId = `${baseUniqueId}-posititve`;
    const negativeInputId = `${baseUniqueId}-negative`;
    const [ThumbsUp, ThumbsDown] = componentsBySize[size];
    const handleChange = useCallback((event) => {
        if (interactive) {
            onChange === null || onChange === void 0 ? void 0 : onChange(event.target.value === "positive" /* ThumbsValue.POSITIVE */, event);
        }
    }, [onChange, interactive]);
    return (React.createElement(Container, { ref: ref },
        React.createElement("label", { className: classes.label, htmlFor: positiveInputId },
            React.createElement(ThumbsUp, { className: classNames(classes.thumbs, {
                    [classes.interactiveThumbs]: interactive,
                    [classes.thumbsPositive]: value === true,
                }) }),
            React.createElement("input", { id: positiveInputId, className: classes.radio, type: 'radio', name: name, value: "positive" /* ThumbsValue.POSITIVE */, onChange: handleChange, readOnly: !interactive, checked: value === true, "data-testid": testIds.positiveInput })),
        React.createElement("label", { className: classes.label, htmlFor: negativeInputId },
            React.createElement(ThumbsDown, { className: classNames(classes.thumbs, {
                    [classes.interactiveThumbs]: interactive,
                    [classes.thumbsNegative]: value === false,
                }) }),
            React.createElement("input", { id: negativeInputId, className: classes.radio, type: 'radio', name: name, value: "negative" /* ThumbsValue.NEGATIVE */, onChange: handleChange, readOnly: !interactive, checked: value === false, "data-testid": testIds.negativeInput }))));
});
RatingThumbs.displayName = 'RatingThumbs';
export default RatingThumbs;
//# sourceMappingURL=RatingThumbs.js.map