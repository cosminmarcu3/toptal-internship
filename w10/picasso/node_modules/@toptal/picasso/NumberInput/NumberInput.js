var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import OutlinedInput from '../OutlinedInput';
import InputAdornment from '../InputAdornment';
import { useCombinedRefs } from '../utils';
import styles from './styles';
import { NumberInputEndAdornment } from '../NumberInputEndAdornment';
import { usePropDeprecationWarning } from '../utils/use-deprecation-warnings';
const useStyles = makeStyles(styles, {
    name: 'PicassoNumberInput',
});
export const NumberInput = forwardRef(function NumberInput(props, ref) {
    const { step = 1, min = -Infinity, max = Infinity, hideControls, value, onChange, disabled, error, status, onResetClick, enableReset, width, icon, size, testIds } = props, rest = __rest(props, ["step", "min", "max", "hideControls", "value", "onChange", "disabled", "error", "status", "onResetClick", "enableReset", "width", "icon", "size", "testIds"]);
    usePropDeprecationWarning({
        props,
        name: 'error',
        componentName: 'NumberInput',
        description: 'Use the `status` prop instead. `error` is deprecated and will be removed in the next major release.',
    });
    const classes = useStyles(props);
    const inputRef = useCombinedRefs(ref, useRef(null));
    const endAdornment = hideControls ? null : (React.createElement(NumberInputEndAdornment, { step: step, min: min, max: max, value: value, disabled: disabled, size: size, inputRef: inputRef }));
    const startAdornment = icon ? (React.createElement(InputAdornment, { position: 'start', disablePointerEvents: true }, icon)) : null;
    return (React.createElement(OutlinedInput, { classes: {
            root: classes.root,
            input: classes.input,
        }, inputProps: Object.assign(Object.assign({}, rest), { step,
            min,
            max }), width: width, onResetClick: onResetClick, enableReset: enableReset, status: error ? 'error' : status, inputRef: inputRef, type: 'number', value: value, disabled: disabled, onChange: onChange, endAdornment: endAdornment, startAdornment: startAdornment, size: size, testIds: testIds }));
});
NumberInput.defaultProps = {
    onChange: () => { },
    value: 0,
    step: 1,
    min: -Infinity,
    max: Infinity,
    hideControls: false,
    size: 'medium',
    status: 'default',
};
NumberInput.displayName = 'NumberInput';
export default NumberInput;
//# sourceMappingURL=NumberInput.js.map