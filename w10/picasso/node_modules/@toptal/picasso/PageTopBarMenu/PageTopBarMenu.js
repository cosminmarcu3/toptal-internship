var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable complexity */
import React, { forwardRef } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import { useBreakpoint } from '../utils';
import UserBadge from '../UserBadge';
import Avatar from '../Avatar';
import { DropdownCompound as Dropdown } from '../DropdownCompound';
import Typography from '../Typography';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoTopBarMenu',
});
export const PageTopBarMenu = forwardRef(function PageTopBarMenu(props, ref) {
    const { name, meta, avatar, className, style, children } = props, rest = __rest(props, ["name", "meta", "avatar", "className", "style", "children"]);
    const classes = useStyles();
    const isCompactLayout = useBreakpoint(['small', 'medium']);
    const metaContent = typeof meta === 'string' ? (React.createElement(Typography, { className: classes.truncateText, invert: !isCompactLayout, size: 'xsmall' }, meta)) : (meta);
    const content = isCompactLayout ? (React.createElement(React.Fragment, null,
        React.createElement(UserBadge, { center: true, size: 'xxsmall', classes: {
                root: classes.contentUserBadge,
                avatar: classes.avatar,
                name: cx(classes.name, classes.truncateText),
            }, name: name, avatar: avatar }, meta && metaContent),
        children)) : (children);
    const trigger = isCompactLayout ? (React.createElement(Avatar, { size: 'xxsmall', name: name, src: avatar })) : (React.createElement(UserBadge, { invert: true, center: true, size: 'xxsmall', classes: {
            name: cx(classes.name, classes.truncateText),
        }, name: name, avatar: avatar }, meta && metaContent));
    return (React.createElement(Dropdown, Object.assign({}, rest, { ref: ref, className: cx(classes.root, className), classes: { content: classes.content }, style: style, content: content, offset: { top: isCompactLayout ? 0.8 : 'xsmall' }, popperOptions: {
            modifiers: {
                flip: { enabled: false },
                preventOverflow: {
                    padding: 0,
                },
            },
        } }),
        trigger,
        React.createElement(Dropdown.Arrow, { className: classes.arrow })));
});
PageTopBarMenu.defaultProps = {};
PageTopBarMenu.displayName = 'PageTopBarMenu';
export default PageTopBarMenu;
//# sourceMappingURL=PageTopBarMenu.js.map