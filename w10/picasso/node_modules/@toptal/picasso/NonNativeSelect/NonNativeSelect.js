var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable complexity */
import React, { useRef } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import capitalize from '@material-ui/core/utils/capitalize';
import { Search16 } from '../Icon';
import OutlinedInput from '../OutlinedInput';
import Popper from '../Popper';
import MenuItem from '../MenuItem';
import SelectCaret from '../SelectCaret';
import NonNativeSelectLoader from '../NonNativeSelectLoader';
import { useAdornments, useSelectState, useSelectProps, renderOption as defaultRenderOption, getOptionText, DEFAULT_LIMIT, DEFAULT_SEARCH_THRESHOLD, countOptions, filterFlatOptions as defaultFilterOptions, } from '../SelectBase';
import NonNativeSelectOptions from '../NonNativeSelectOptions';
import { documentable, forwardRef, noop, useCombinedRefs } from '../utils';
import styles from './styles';
import NonNativeSelectLimitFooter from '../NonNativeSelectLimitFooter';
import InputAdornment from '../InputAdornment';
const useStyles = makeStyles(styles);
const DEFAULT_EMPTY_ARRAY_VALUE = [];
export const NonNativeSelect = documentable(forwardRef(
// eslint-disable-next-line max-lines-per-function
(props, ref) => {
    const { className, style, width = 'full', menuWidth, loading, id, icon, iconPosition = 'start', name, noOptionsText, renderOption = defaultRenderOption, placeholder, disabled, disablePortal, error, status, multiple, value = multiple ? DEFAULT_EMPTY_ARRAY_VALUE : '', size, enableReset, popperContainer, enableAutofill, autoComplete, searchPlaceholder, searchThreshold = DEFAULT_SEARCH_THRESHOLD, limit = DEFAULT_LIMIT, getDisplayValue = getOptionText, options, onChange, filterOptions = defaultFilterOptions, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    native, testIds } = props, rest = __rest(props, ["className", "style", "width", "menuWidth", "loading", "id", "icon", "iconPosition", "name", "noOptionsText", "renderOption", "placeholder", "disabled", "disablePortal", "error", "status", "multiple", "value", "size", "enableReset", "popperContainer", "enableAutofill", "autoComplete", "searchPlaceholder", "searchThreshold", "limit", "getDisplayValue", "options", "onChange", "filterOptions", "native", "testIds"]);
    const classes = useStyles();
    const selectRef = useCombinedRefs(ref, useRef(null));
    const searchInputRef = useRef(null);
    const popperRef = useRef(null);
    const inputWrapperRef = useRef(null);
    const selectState = useSelectState({
        getDisplayValue,
        filterFlatOptions: filterOptions,
        options,
        disabled,
        multiple,
        value,
        searchThreshold,
        limit,
    });
    const { highlightedIndex, isOpen, showSearch, filterOptionsValue, displayValue, selection, filteredOptions, } = selectState;
    const { getItemProps, getRootProps, getInputProps, getSearchInputProps } = useSelectProps({
        selectRef,
        popperRef,
        searchInputRef,
        selectProps: props,
        selectState,
    });
    const searchInput = showSearch ? (React.createElement(MenuItem, { as: 'div', nonSelectable: true, disableGutters: true, className: classes.searchInputGutters },
        React.createElement(OutlinedInput, Object.assign({ inputRef: searchInputRef, className: classes.searchOutlinedInput, startAdornment: React.createElement(InputAdornment, { position: 'start', disablePointerEvents: true },
                React.createElement(Search16, null)), placeholder: searchPlaceholder, size: size === 'large' ? 'medium' : size, value: filterOptionsValue, testIds: testIds, "aria-autocomplete": 'list', "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.searchInput }, getSearchInputProps())))) : null;
    const rootProps = getRootProps();
    const [startAdornment, endAdornment] = useAdornments({
        position: iconPosition,
        icon,
        disabled,
    });
    const selectComponent = (React.createElement(React.Fragment, null,
        React.createElement("div", Object.assign({}, rootProps, { className: classes.inputWrapper }),
            !enableAutofill && name && (React.createElement("input", { type: 'hidden', value: displayValue, name: name })),
            React.createElement(OutlinedInput
            // eslint-disable-next-line react/jsx-props-no-spreading
            , Object.assign({}, rest, { onChange: onChange, inputRef: selectRef, status: error ? 'error' : status, disabled: disabled, id: id, startAdornment: startAdornment, endAdornment: endAdornment, 
                // Input specific props
                value: displayValue }, getInputProps(), { placeholder: placeholder, width: width, readOnly: true, defaultValue: undefined, className: classes.outlinedInput, inputProps: {
                    size: 1, // let input to have smallest width by default for width:'shrink'
                }, size: size === 'large' ? 'medium' : size, role: 'textbox', enableReset: enableReset ? selection.isSelected() : false, autoComplete: enableAutofill ? autoComplete : autoComplete || 'off', name: enableAutofill ? name : undefined, testIds: testIds })),
            React.createElement(SelectCaret, { disabled: disabled })),
        !disabled && isOpen && (React.createElement(Popper, { ref: popperRef, autoWidth: true, width: menuWidth, placement: 'bottom-start', open: true, anchorEl: inputWrapperRef.current, container: popperContainer, disablePortal: disablePortal }, loading ? (React.createElement(NonNativeSelectLoader, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.loader })) : (React.createElement(NonNativeSelectOptions, { options: filteredOptions, renderOption: renderOption, highlightedIndex: highlightedIndex, getItemProps: getItemProps, 
            // eslint-disable-next-line react/jsx-handler-names
            onBlur: rootProps.onBlur, selection: selection, filterOptionsValue: filterOptionsValue, multiple: multiple, noOptionsText: noOptionsText, fixedHeader: searchInput, fixedFooter: limit < countOptions(options) ? (React.createElement(NonNativeSelectLimitFooter, { totalCount: countOptions(options), limit: limit, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.limitFooter })) : null, testIds: {
                noOptions: testIds === null || testIds === void 0 ? void 0 : testIds.noOptions,
            } }))))));
    return (React.createElement("div", { className: cx(classes.root, className, classes[`root${capitalize(width)}`], {
            [classes.rootDisabled]: disabled,
        }), style: style, ref: inputWrapperRef }, selectComponent));
}));
NonNativeSelect.defaultProps = {
    disabled: false,
    status: 'default',
    getDisplayValue: getOptionText,
    iconPosition: 'start',
    loading: false,
    noOptionsText: 'No matches found',
    onChange: noop,
    onBlur: noop,
    renderOption: defaultRenderOption,
    size: 'medium',
    width: 'full',
    searchThreshold: DEFAULT_SEARCH_THRESHOLD,
    limit: DEFAULT_LIMIT,
    enableAutofill: false,
    searchPlaceholder: 'Search',
    filterOptions: defaultFilterOptions,
};
NonNativeSelect.displayName = 'NonNativeSelect';
export default NonNativeSelect;
//# sourceMappingURL=NonNativeSelect.js.map