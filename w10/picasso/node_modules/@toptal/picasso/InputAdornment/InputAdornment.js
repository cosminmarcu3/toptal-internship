var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useCallback, } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { InputAdornment as MUIInputAdornment } from '@material-ui/core';
import cx from 'classnames';
import styles from './styles';
import noop from '../utils/noop';
const useStyles = makeStyles(styles, {
    name: 'PicassoInputAdornment',
});
const InputAdornment = (props) => {
    const { className, style, children, position, disabled, disablePointerEvents, stopPropagation, 'data-testid': dataTestId, onClick = noop } = props, rest = __rest(props, ["className", "style", "children", "position", "disabled", "disablePointerEvents", "stopPropagation", 'data-testid', "onClick"]);
    const classes = useStyles();
    const handleClick = useCallback((event) => {
        if (stopPropagation) {
            event.stopPropagation();
        }
        onClick(event);
    }, [onClick, stopPropagation]);
    return (React.createElement(MUIInputAdornment, Object.assign({}, rest, { classes: {
            root: cx(classes.root, {
                [classes.rootDisabled]: disabled,
            }),
        }, className: className, style: style, position: position, disablePointerEvents: disablePointerEvents, onClick: handleClick, "data-testid": dataTestId }), children));
};
export default InputAdornment;
//# sourceMappingURL=InputAdornment.js.map