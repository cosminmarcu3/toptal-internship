var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Container from '../Container';
import Typography from '../Typography';
import { ModalCompound as Modal } from '../ModalCompound';
import Button from '../Button';
import styles from './styles';
import { noop, useSafeState } from '../utils';
const useStyles = makeStyles(styles, {
    name: 'PicassoPromptModal',
});
export const PromptModal = forwardRef(function PromptModal(props, ref) {
    const { children, title, message, variant, submitText, cancelText, onSubmit, onAfterSubmit = noop, onCancel = noop, onClose, testIds } = props, rest = __rest(props, ["children", "title", "message", "variant", "submitText", "cancelText", "onSubmit", "onAfterSubmit", "onCancel", "onClose", "testIds"]);
    const classes = useStyles();
    const [result, setResult] = useSafeState();
    const [loading, setLoading] = useSafeState(false);
    const [error, setError] = useSafeState(false);
    const handleSubmit = () => __awaiter(this, void 0, void 0, function* () {
        try {
            setLoading(true);
            setError(false);
            yield onSubmit(result);
            setLoading(false);
            handleOnAfterSubmit();
        }
        catch (err) {
            setError(true);
            setLoading(false);
        }
    });
    const handleOnAfterSubmit = () => {
        onAfterSubmit();
        handleClose();
    };
    const handleCancel = () => {
        onCancel();
        handleClose();
    };
    const handleClose = () => {
        setResult(undefined);
        if (onClose) {
            onClose();
        }
    };
    return (React.createElement(Modal, Object.assign({ ref: ref, onClose: onClose && handleClose, classes: classes }, rest),
        title && React.createElement(Modal.Title, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.title }, title),
        React.createElement(Modal.Content, null,
            React.createElement(Typography, { size: 'medium', "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.message }, message),
            children && (React.createElement(Container, { top: 'xsmall' }, children({
                setResult,
                result,
                setLoading,
                loading,
                setError,
                error,
            })))),
        React.createElement(Modal.Actions, null,
            React.createElement(Button, { disabled: loading, variant: 'secondary', onClick: handleCancel, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.closeButton }, cancelText),
            React.createElement(Button, { loading: loading, onClick: handleSubmit, variant: `${variant}`, "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.submitButton }, submitText))));
});
PromptModal.defaultProps = {
    cancelText: 'Cancel',
    onCancel: noop,
    size: 'small',
    submitText: 'Submit',
    variant: 'positive',
    onAfterSubmit: noop,
};
PromptModal.displayName = 'PromptModal';
export default PromptModal;
//# sourceMappingURL=PromptModal.js.map