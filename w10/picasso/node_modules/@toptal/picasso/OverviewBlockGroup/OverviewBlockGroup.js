var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { OverviewBlockGroupContext } from './OverviewBlockGroupContext';
import OverviewBlockRow from '../OverviewBlockRow';
// We need to inject a single row if there is none provided.
// It allows to skip `OverviewBlock.Row` component for a single-row groups.
const shouldInjectRow = (children) => {
    if (!children) {
        return false;
    }
    return !React.Children.toArray(children)
        .filter((el) => React.isValidElement(el))
        .some(el => el.type.displayName === OverviewBlockRow.displayName);
};
const OverviewBlockGroup = (props) => {
    const { children, align = 'default', blockWidth = 'regular' } = props, rest = __rest(props, ["children", "align", "blockWidth"]);
    return (React.createElement("section", Object.assign({}, rest),
        React.createElement(OverviewBlockGroupContext.Provider, { value: { align, blockWidth } }, shouldInjectRow(children) ? (React.createElement(OverviewBlockRow, null, children)) : (children))));
};
OverviewBlockGroup.displayName = 'OverviewBlockGroup';
OverviewBlockGroup.defaultProps = {
    align: 'default',
    blockWidth: 'regular',
};
export default OverviewBlockGroup;
//# sourceMappingURL=OverviewBlockGroup.js.map