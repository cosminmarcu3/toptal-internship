var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import MUIStepLabel from '@material-ui/core/StepLabel';
import { useTitleCase } from '@toptal/picasso-shared';
import StepIcon from '../StepIcon';
import styles from './styles';
import toTitleCase from '../utils/to-title-case';
import TypographyOverflow from '../TypographyOverflow';
const useStyles = makeStyles(styles, { name: 'PicassoStepLabel' });
export const StepLabel = (props) => {
    const { active, className, children, completed, hideLabel, overflowEllipsis, style, titleCase: propsTitleCase } = props, rest = __rest(props, ["active", "className", "children", "completed", "hideLabel", "overflowEllipsis", "style", "titleCase"]);
    const titleCase = useTitleCase(propsTitleCase);
    const classes = useStyles();
    const withOverflowEllipsis = !hideLabel && overflowEllipsis;
    const labelElement = (React.createElement("span", { className: classes.label }, titleCase ? toTitleCase(children) : children));
    return (React.createElement(MUIStepLabel, Object.assign({}, rest, { classes: {
            labelContainer: cx({
                [classes.root]: !hideLabel || active,
                [classes.labelContainerOverflowEllipsis]: withOverflowEllipsis,
            }),
            label: cx({
                [classes.hidden]: hideLabel && !active,
                [classes.labelOverflowEllipsis]: withOverflowEllipsis,
            }),
        }, className: className, icon: React.createElement(StepIcon, { active: active, completed: completed }), style: style }), withOverflowEllipsis ? (React.createElement(TypographyOverflow, null, labelElement)) : (labelElement)));
};
StepLabel.defaultProps = {
    hideLabel: false,
};
StepLabel.displayName = 'StepLabel';
export default StepLabel;
//# sourceMappingURL=StepLabel.js.map