import React, { useEffect, useState } from 'react';
import debounce from 'debounce';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import styles from './styles';
import Typography from '../Typography';
import Container from '../Container';
var SavingState;
(function (SavingState) {
    SavingState[SavingState["Initial"] = 0] = "Initial";
    SavingState[SavingState["Saving"] = 1] = "Saving";
    SavingState[SavingState["Saved"] = 2] = "Saved";
})(SavingState || (SavingState = {}));
const useStyles = makeStyles(styles, {
    name: 'PicassoAutoSaveIndicator',
});
const FormAutoSaveIndicator = ({ saving, label = 'Saved', hideTimeout = 1000, }) => {
    const [savingState, setSavingState] = useState(SavingState.Initial);
    const classes = useStyles();
    useEffect(() => {
        if (saving) {
            setSavingState(SavingState.Saving);
        }
        else if (savingState === SavingState.Saving) {
            setSavingState(SavingState.Saved);
        }
    }, [saving, savingState]);
    useEffect(() => {
        const hideIndicator = debounce(() => {
            setSavingState(SavingState.Initial);
        }, hideTimeout);
        if (savingState === SavingState.Saved) {
            hideIndicator();
        }
        return () => {
            hideIndicator.clear();
        };
    }, [savingState, hideTimeout]);
    return (React.createElement(Container, { className: cx(classes.root, {
            [classes.visible]: savingState === SavingState.Saved,
        }), align: 'right' },
        React.createElement(Typography, { size: 'xxsmall' }, label)));
};
export default FormAutoSaveIndicator;
//# sourceMappingURL=FormAutoSaveIndicator.js.map