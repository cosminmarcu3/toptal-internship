import React, { ChangeEventHandler, ReactType, ReactNode, InputHTMLAttributes, MouseEvent } from 'react';
import { InputBaseComponentProps } from '@material-ui/core/InputBase';
import { StandardProps, SizeType } from '@toptal/picasso-shared';
declare type ValueType = (string | number | boolean | object)[] | string | number | boolean | object;
export declare type Status = 'error' | 'success' | 'default';
export declare type BaseInputProps = InputBaseComponentProps & {
    variant?: 'dark' | 'light';
};
export interface Props extends StandardProps, Omit<InputHTMLAttributes<HTMLInputElement>, 'value' | 'defaultValue' | 'size' | 'color'> {
    /** Width of the component */
    width?: 'full' | 'shrink' | 'auto';
    inputComponent?: ReactType<InputBaseComponentProps>;
    inputProps?: BaseInputProps;
    defaultValue?: ValueType;
    value?: ValueType;
    /** Whether `Input` should be rendered as `TextArea` or not */
    multiline?: boolean;
    /** If true, the input element will be focused during the first mount */
    autoFocus?: boolean;
    /** Specify rows amount for `TextArea` */
    rows?: string | number;
    rowsMax?: string | number;
    /** Type attribute of the Input element. It should be a valid HTML5 input type */
    type?: string;
    /**
     * @deprecated Use the `status` prop instead to both support success and error states
     * Indicate whether input is in error state
     */
    error?: boolean;
    /** Indicate input status */
    status?: Status;
    startAdornment?: ReactNode;
    endAdornment?: ReactNode;
    onChange?: ChangeEventHandler<HTMLInputElement>;
    /** Component size */
    size?: SizeType<'small' | 'medium' | 'large'>;
    /** Whether to render reset icon when there is a value in the input */
    enableReset?: boolean;
    /** Callback invoked when reset button was clicked */
    onResetClick?: (event: MouseEvent<HTMLButtonElement & HTMLAnchorElement>) => void;
    /** Ref of the input element */
    inputRef?: React.Ref<HTMLInputElement>;
    testIds?: {
        resetButton?: string;
        validIcon?: string;
    };
}
declare const OutlinedInput: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLElement>>;
export default OutlinedInput;
