var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import { OutlinedInput as MUIOutlinedInput } from '@material-ui/core';
import capitalize from '@material-ui/core/utils/capitalize';
import InputAdornment from '../InputAdornment';
import ButtonCircular from '../ButtonCircular';
import { CloseMinor16 } from '../Icon';
import styles from './styles';
import noop from '../utils/noop';
import { usePropDeprecationWarning } from '../utils/use-deprecation-warnings';
import InputValidIconAdornment from '../InputValidIconAdornment';
const useStyles = makeStyles(styles, {
    name: 'PicassoOutlinedInput',
});
const ResetButton = ({ classes, hasValue, onClick, testIds, }) => (React.createElement(InputAdornment, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.resetButton, position: 'end', className: cx(classes.resetButton, {
        [classes.resetButtonDirty]: hasValue,
    }) },
    React.createElement(ButtonCircular, { tabIndex: -1, icon: React.createElement(CloseMinor16, null), variant: 'flat', role: 'reset', onClick: onClick, onMouseDown: (event) => event.preventDefault(), onFocus: (event) => event.stopPropagation() })));
const OutlinedInput = forwardRef(function OutlinedInput(props, ref) {
    const { className, style, multiline, autoFocus, rows, rowsMax, width = 'auto', inputComponent, inputProps, defaultValue, value, type, error, status, startAdornment, endAdornment: userDefinedEndAdornment, onChange, size = 'medium', enableReset, disabled, onResetClick = noop, inputRef, testIds } = props, rest = __rest(props, ["className", "style", "multiline", "autoFocus", "rows", "rowsMax", "width", "inputComponent", "inputProps", "defaultValue", "value", "type", "error", "status", "startAdornment", "endAdornment", "onChange", "size", "enableReset", "disabled", "onResetClick", "inputRef", "testIds"]);
    usePropDeprecationWarning({
        props,
        name: 'error',
        componentName: 'OutlinedInput',
        description: 'Use the `status` prop instead. `error` is deprecated and will be removed in the next major release.',
    });
    const classes = useStyles(props);
    const isDark = (inputProps === null || inputProps === void 0 ? void 0 : inputProps.variant) === 'dark';
    const shouldShowReset = enableReset && !disabled;
    const hasEndAdornment = status === 'success' || shouldShowReset;
    const endAdornment = hasEndAdornment ? (React.createElement(React.Fragment, null,
        shouldShowReset && (React.createElement(ResetButton, { classes: classes, hasValue: Boolean(value), onClick: onResetClick, testIds: testIds })),
        !multiline && status === 'success' && (React.createElement(InputValidIconAdornment, { "data-testid": testIds === null || testIds === void 0 ? void 0 : testIds.validIcon })),
        userDefinedEndAdornment)) : (userDefinedEndAdornment);
    return (React.createElement(MUIOutlinedInput, Object.assign({}, rest, { classes: {
            root: cx(classes.root, classes[`root${capitalize(width)}`], classes[`root${capitalize(size)}`], { [`${classes.hidden}`]: type === 'hidden' }, { [classes.rootDark]: isDark }),
            input: cx(classes.input, classes[`input${capitalize(size)}`], {
                [classes.inputDark]: isDark,
            }),
            inputMultiline: classes.inputMultiline,
            notchedOutline: cx(classes.notchedOutline, {
                [classes.notchedOutlineDark]: isDark,
            }),
            focused: classes.focused,
        }, className: className, style: style, labelWidth: 0, fullWidth: width === 'full', error: Boolean(status === 'error' || error), inputComponent: inputComponent, inputProps: inputProps, ref: ref, inputRef: inputRef, defaultValue: defaultValue, value: value, type: type, startAdornment: startAdornment, endAdornment: endAdornment, multiline: multiline, autoFocus: autoFocus, minRows: rows, maxRows: rowsMax, onChange: onChange, disabled: disabled })));
});
OutlinedInput.defaultProps = {
    width: 'auto',
    size: 'medium',
    onResetClick: noop,
    status: 'default',
};
OutlinedInput.displayName = 'OutlinedInput';
export default OutlinedInput;
//# sourceMappingURL=OutlinedInput.js.map