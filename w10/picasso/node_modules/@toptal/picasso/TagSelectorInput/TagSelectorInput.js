var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import OutlinedInput from '../OutlinedInput';
import styles from './styles';
import { usePropDeprecationWarning } from '../utils/use-deprecation-warnings';
const useStyles = makeStyles(styles, {
    name: 'PicassoTagSelectorInput',
});
export const TagSelectorInput = forwardRef(function TagSelectorInput(props, ref) {
    const { id, name, defaultValue, value, placeholder, status, error, disabled, autoFocus, autoComplete, children, multiline, width, style, rows, rowsMax, type, onChange, startAdornment, endAdornment, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onResetClick, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    enableReset, inputProps, testIds } = props, rest = __rest(props, ["id", "name", "defaultValue", "value", "placeholder", "status", "error", "disabled", "autoFocus", "autoComplete", "children", "multiline", "width", "style", "rows", "rowsMax", "type", "onChange", "startAdornment", "endAdornment", "onResetClick", "enableReset", "inputProps", "testIds"]);
    usePropDeprecationWarning({
        props,
        name: 'error',
        componentName: 'TagSelectorInput',
        description: 'Use the `status` prop instead. `error` is deprecated and will be removed in the next major release.',
    });
    const classes = useStyles();
    let usedEndAdornment = null;
    if (endAdornment) {
        usedEndAdornment = React.cloneElement(endAdornment, {
            className: classes.endAdornment,
        });
    }
    return (React.createElement(OutlinedInput, { inputRef: ref, style: style, className: cx(classes.inputBase, {
            [classes.withEndAdornment]: Boolean(endAdornment),
        }), id: id, name: name, defaultValue: defaultValue, value: value, placeholder: placeholder, status: error ? 'error' : status, disabled: disabled, autoFocus: autoFocus, autoComplete: autoComplete, multiline: multiline, rows: rows, rowsMax: rowsMax, type: type, width: width, 
        // html attributes
        inputProps: Object.assign(Object.assign({}, rest), inputProps), testIds: testIds, endAdornment: usedEndAdornment, startAdornment: startAdornment, onChange: onChange }, children));
});
TagSelectorInput.defaultProps = {
    multiline: false,
    width: 'auto',
    status: 'default',
};
TagSelectorInput.displayName = 'TagSelectorInput';
export default TagSelectorInput;
//# sourceMappingURL=TagSelectorInput.js.map