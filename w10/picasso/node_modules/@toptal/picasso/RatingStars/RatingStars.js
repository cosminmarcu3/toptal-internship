var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useCallback } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import Container from '../Container';
import RatingIcon from '../RatingIcon';
import styles from './styles';
const useStyles = makeStyles(styles, {
    name: 'PicassoRating',
});
const RatingStars = forwardRef(function RatingStars(props, ref) {
    const { name, value, onChange, renderItem = (_, icon) => icon, max, interactive = true, size = 'small' } = props, rest = __rest(props, ["name", "value", "onChange", "renderItem", "max", "interactive", "size"]);
    const classes = useStyles();
    const handleChange = useCallback((event) => {
        if (onChange && interactive) {
            onChange(event);
        }
    }, [onChange, interactive]);
    const resetInputId = `${name}-reset`;
    return (React.createElement(Container
    // eslint-disable-next-line react/jsx-props-no-spreading
    , Object.assign({}, rest, { ref: ref }),
        [...Array(max)].map((_, index) => {
            const itemValue = index + 1;
            const itemId = `${name}-${itemValue}`;
            const defaultIcon = (React.createElement(RatingIcon, { active: !!value && itemValue <= value, interactive: interactive, size: size }));
            // When the user clicks again on the selected rating, reset the rating
            const shouldReset = itemValue === Number(value);
            return (React.createElement("label", { key: itemId, htmlFor: shouldReset ? resetInputId : itemId, className: cx(classes.label, {
                    [classes.clickableLabel]: interactive,
                }) },
                renderItem(itemValue, defaultIcon),
                React.createElement("input", { type: 'radio', name: name, id: itemId, value: itemValue, onChange: handleChange, readOnly: !interactive, checked: itemValue === value, className: classes.radio, "data-testid": itemId })));
        }),
        React.createElement("input", { type: 'radio', name: name, id: resetInputId, value: '', onChange: handleChange, className: classes.radio })));
});
RatingStars.defaultProps = {
    interactive: true,
    max: 5,
    size: 'small',
};
RatingStars.displayName = 'RatingStars';
export default RatingStars;
//# sourceMappingURL=RatingStars.js.map