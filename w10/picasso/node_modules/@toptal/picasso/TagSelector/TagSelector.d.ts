import React, { InputHTMLAttributes, ReactNode, FocusEventHandler } from 'react';
import { BaseProps } from '@toptal/picasso-shared';
import { PopperOptions } from 'popper.js';
import { AutocompleteProps, Item as AutocompleteItem } from '../Autocomplete';
import { Status } from '../OutlinedInput';
export interface Item extends AutocompleteItem {
    value?: string;
}
export declare const filterOutSelectedOptions: (options: Item[] | null, values: Item[], getKey?: (item: Item) => string | undefined) => AutocompleteItem[] | null;
export interface Props extends BaseProps, Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'value'> {
    /** Placeholder for value */
    placeholder?: string;
    /** Disables `TagSelector` */
    disabled?: boolean;
    /**
     * @deprecated Use the `status` prop instead to both support success and error states
     * Indicate whether `TagSelector` is in error state
     */
    error?: boolean;
    /** Indicate `TagSelector` status */
    status?: Status;
    /** Shows the loading icon when options are loading */
    loading?: boolean;
    /** Text prefix for other option */
    otherOptionLabel?: string;
    /** Callback invoked when other option selected */
    onOtherOptionSelect?: (value: string) => void;
    /** Allow to show the other option in the list of options */
    showOtherOption?: boolean;
    /** Label to show when no options were found */
    noOptionsText?: string;
    /** List of options with unique labels */
    options?: Item[] | null;
    /** The list of values of the selected options, required for a controlled component. */
    value?: Item[];
    /** A function that takes a display value from the option item */
    getDisplayValue?: (item: Item | null) => string;
    /**  Callback invoked when selection changes */
    onChange?: (value: Item[]) => void;
    /** Whether to close popper upon selection */
    closeOnSelect?: boolean;
    /** The value of the `input` element, required for a controlled component. */
    inputValue?: string;
    /** Callback invoked when `input` element value is changed */
    onInputChange?: (inputValue: string) => void;
    /** Focus event handler */
    onFocus?: FocusEventHandler<HTMLInputElement>;
    /** Blur event handler */
    onBlur?: FocusEventHandler<HTMLInputElement>;
    /** Width of the component */
    width?: 'full' | 'shrink' | 'auto';
    /** Specifies whether the autofill enabled or not, disabled by default */
    enableAutofill?: boolean;
    /** Provide unique key for each option */
    getKey?: (item: Item) => string;
    /** Callback responsible for rendering the option given the option and its index in the list of options */
    renderOption?: (option: Item, index: number) => ReactNode;
    /** Callback responsible for rendering the label given the option and Label props */
    renderLabel?: (props: {
        item: Item;
        displayValue: string;
        onDelete: () => void;
        disabled?: boolean;
    }) => ReactNode;
    /** DOM element that wraps the Popper */
    popperContainer?: HTMLElement;
    /** Options provided to the popper.js instance */
    popperOptions?: PopperOptions;
    testIds?: AutocompleteProps['testIds'];
}
export declare const TagSelector: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLInputElement>>;
export default TagSelector;
