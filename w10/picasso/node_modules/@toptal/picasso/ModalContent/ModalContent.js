var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import cx from 'classnames';
import styles from './styles';
import { useCombinedRefs } from '../utils';
import useScrollableShades from './hooks/use-scrollable-shades';
const useStyles = makeStyles(styles, {
    name: 'PicassoModalContent',
});
export const ModalContent = forwardRef(function ModalContent(props, ref) {
    const { children, className, style } = props, rest = __rest(props
    /**
     * This is necessary to ensure if ref is not passed in, there's still a ref to calculate
     * when to show the scrollable shades or not.
     */
    , ["children", "className", "style"]);
    /**
     * This is necessary to ensure if ref is not passed in, there's still a ref to calculate
     * when to show the scrollable shades or not.
     */
    const modalContentRef = useCombinedRefs(ref);
    const { top, bottom } = useScrollableShades(modalContentRef);
    const classes = useStyles();
    return (React.createElement("div", { className: cx(classes.wrapper) },
        top && React.createElement("div", { className: cx(classes.topShade) }),
        bottom && React.createElement("div", { className: cx(classes.bottomShade) }),
        React.createElement("div", Object.assign({}, rest, { style: style, ref: modalContentRef, className: cx(classes.modalContent, className) }), children)));
});
ModalContent.displayName = 'ModalContent';
export default ModalContent;
//# sourceMappingURL=ModalContent.js.map