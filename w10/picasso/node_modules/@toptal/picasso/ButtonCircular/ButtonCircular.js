var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import cx from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import Button from '../Button';
import kebabToCamelCase from '../utils/kebab-to-camel-case';
import styles from './styles';
// Using { index: -1 } to inject CSS link to the bottom of the head
// in order to prevent Button's styles to override ButtonCircular's ones
// Related Jira issue: https://toptal-core.atlassian.net/browse/FX-1520
const useStyles = makeStyles(styles, {
    name: 'PicassoButtonCircular',
    index: -1,
});
export const ButtonCircular = forwardRef(function ButtonCircular(props, ref) {
    const { className, variant = 'primary', active, focused, hovered, disabled } = props, rest = __rest(props, ["className", "variant", "active", "focused", "hovered", "disabled"]);
    const classes = useStyles();
    const { root: rootClass, focusVisible: focusVisibleClass } = classes;
    const variantClassName = classes[kebabToCamelCase(variant)];
    const rootClassName = cx({
        [classes.active]: active,
        [classes.focused]: focused,
        [classes.hovered]: hovered,
        [classes.disabled]: disabled,
    }, variantClassName, rootClass);
    return (React.createElement(Button, Object.assign({}, rest, { ref: ref, classes: {
            root: rootClassName,
            focusVisible: focusVisibleClass,
        }, className: className, size: 'small', active: active, hovered: hovered, focused: focused, disabled: disabled })));
});
ButtonCircular.defaultProps = {
    variant: 'primary',
};
ButtonCircular.displayName = 'ButtonCircular';
export default ButtonCircular;
//# sourceMappingURL=ButtonCircular.js.map