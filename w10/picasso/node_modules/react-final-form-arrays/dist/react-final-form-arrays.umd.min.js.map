{"version":3,"file":"react-final-form-arrays.umd.min.js","sources":["../src/defaultIsEqual.js","../src/useFieldArray.js","../src/useConstant.js","../src/FieldArray.js","../src/renderComponent.js"],"sourcesContent":["// @flow\nconst defaultIsEqual = (aArray: any[], bArray: any[]) =>\n  aArray === bArray ||\n  (Array.isArray(aArray) &&\n    Array.isArray(bArray) &&\n    aArray.length === bArray.length &&\n    !aArray.some((a, index) => a !== bArray[index]))\n\nexport default defaultIsEqual\n","// @flow\nimport { useMemo } from 'react';\nimport { useForm, useField } from 'react-final-form'\nimport { fieldSubscriptionItems, ARRAY_ERROR } from 'final-form'\nimport type { Mutators } from 'final-form-arrays'\nimport type { FieldValidator, FieldSubscription } from 'final-form'\nimport type { FieldArrayRenderProps, UseFieldArrayConfig } from './types'\nimport defaultIsEqual from './defaultIsEqual'\nimport useConstant from './useConstant'\n\nconst all: FieldSubscription = fieldSubscriptionItems.reduce((result, key) => {\n  result[key] = true\n  return result\n}, {})\n\nconst useFieldArray = (\n  name: string,\n  {\n    subscription = all,\n    defaultValue,\n    initialValue,\n    isEqual = defaultIsEqual,\n    validate: validateProp\n  }: UseFieldArrayConfig = {}\n): FieldArrayRenderProps => {\n  const form = useForm('useFieldArray')\n\n  const formMutators: Mutators = form.mutators\n  const hasMutators = !!(formMutators && formMutators.push && formMutators.pop)\n  if (!hasMutators) {\n    throw new Error(\n      'Array mutators not found. You need to provide the mutators from final-form-arrays to your form'\n    )\n  }\n  const mutators = useMemo<Mutators>(() =>\n    // curry the field name onto all mutator calls\n    Object.keys(formMutators).reduce((result, key) => {\n      result[key] = (...args) => formMutators[key](name, ...args)\n      return result\n    }, {}\n  ), [name, formMutators])\n\n  const validate: FieldValidator = useConstant(\n    () => (value, allValues, meta) => {\n      if (!validateProp) return undefined\n      const error = validateProp(value, allValues, meta)\n      if (!error || Array.isArray(error)) {\n        return error\n      } else {\n        const arrayError = []\n        // gross, but we have to set a string key on the array\n        ;((arrayError: any): Object)[ARRAY_ERROR] = error\n        return arrayError\n      }\n    }\n  )\n\n  const {\n    meta: { length, ...meta },\n    input,\n    ...fieldState\n  } = useField(name, {\n    subscription: { ...subscription, length: true },\n    defaultValue,\n    initialValue,\n    isEqual,\n    validate,\n    format: v => v\n  })\n\n  const forEach = (iterator: (name: string, index: number) => void): void => {\n    // required || for Flow, but results in uncovered line in Jest/Istanbul\n    // istanbul ignore next\n    const len = length || 0\n    for (let i = 0; i < len; i++) {\n      iterator(`${name}[${i}]`, i)\n    }\n  }\n\n  const map = (iterator: (name: string, index: number) => any): any[] => {\n    // required || for Flow, but results in uncovered line in Jest/Istanbul\n    // istanbul ignore next\n    const len = length || 0\n    const results: any[] = []\n    for (let i = 0; i < len; i++) {\n      results.push(iterator(`${name}[${i}]`, i))\n    }\n    return results\n  }\n\n  return {\n    fields: {\n      name,\n      forEach,\n      length: length || 0,\n      map,\n      ...mutators,\n      ...fieldState,\n      value: input.value\n    },\n    meta\n  }\n}\n\nexport default useFieldArray\n","// @flow\nimport React from 'react'\n\n/**\n * A simple hook to create a constant value that lives for\n * the lifetime of the component.\n *\n * Plagiarized from https://github.com/Andarist/use-constant\n *\n * Do NOT reuse this code unless you know what you're doing.\n * Use Andarist's hook; it's more fault tolerant to things like\n * falsy values.\n *\n * @param {Function} init - A function to generate the value\n */\nexport default function useConstant<T>(init: () => T): T {\n  const ref = React.useRef<?T>()\n  if (!ref.current) {\n    ref.current = init()\n  }\n  return ref.current\n}\n","// @flow\nimport { version as ffVersion } from 'final-form'\nimport { version as rffVersion } from 'react-final-form'\nimport type { FieldArrayProps } from './types'\nimport renderComponent from './renderComponent'\nimport useFieldArray from './useFieldArray'\nimport { version } from '../package.json'\n\nexport { version }\n\nconst versions = {\n  'final-form': ffVersion,\n  'react-final-form': rffVersion,\n  'react-final-form-arrays': version\n}\n\nconst FieldArray = ({\n  name,\n  subscription,\n  defaultValue,\n  initialValue,\n  isEqual,\n  validate,\n  ...rest\n}: FieldArrayProps) => {\n  const { fields, meta } = useFieldArray(name, {\n    subscription,\n    defaultValue,\n    initialValue,\n    isEqual,\n    validate\n  })\n\n  return renderComponent(\n    {\n      fields,\n      meta: {\n        ...meta,\n        __versions: versions\n      },\n      ...rest\n    },\n    `FieldArray(${name})`\n  )\n}\n\nexport default FieldArray\n","// @flow\nimport * as React from 'react'\nimport type { RenderableProps } from './types'\n\n// shared logic between components that use either render prop,\n// children render function, or component prop\nexport default function renderComponent<T>(\n  props: RenderableProps<T> & T,\n  name: string\n): React.Node {\n  const { render, children, component, ...rest } = props\n  if (component) {\n    return React.createElement(component, { ...rest, children, render }) // inject children back in\n  }\n  if (render) {\n    return render(children === undefined ? rest : { ...rest, children }) // inject children back in\n  }\n  if (typeof children !== 'function') {\n    throw new Error(\n      `Must specify either a render prop, a render function as children, or a component prop to ${name}`\n    )\n  }\n  return children(rest)\n}\n"],"names":["defaultIsEqual","aArray","bArray","Array","isArray","length","some","a","index","useFieldArray","name","_temp","init","useField","subscription","_ref","all","_ref$subscription","defaultValue","initialValue","isEqual","_ref$isEqual","validateProp","validate","formMutators","useForm","mutators","push","pop","useMemo","Object","keys","reduce","result","key","_len","arguments","args","_key","apply","value","allValues","meta","error","arrayError","ARRAY_ERROR","ref","React","useRef","current","_useField$meta","format","v","_objectWithoutPropertiesLoose","_excluded","input","fieldState","_useField","_excluded2","fields","_extends","forEach","iterator","len","i","map","results","Error","fieldSubscriptionItems","versions","final-form","ffVersion","version","react-final-form","rffVersion","react-final-form-arrays","rest","props","__versions","render","children","component","createElement","undefined"],"mappings":"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"}