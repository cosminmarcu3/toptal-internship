{"version":3,"file":"react-final-form-arrays.umd.js","sources":["../src/renderComponent.js","../src/defaultIsEqual.js","../src/useConstant.js","../src/useFieldArray.js","../src/FieldArray.js"],"sourcesContent":["// @flow\nimport * as React from 'react'\nimport type { RenderableProps } from './types'\n\n// shared logic between components that use either render prop,\n// children render function, or component prop\nexport default function renderComponent<T>(\n  props: RenderableProps<T> & T,\n  name: string\n): React.Node {\n  const { render, children, component, ...rest } = props\n  if (component) {\n    return React.createElement(component, { ...rest, children, render }) // inject children back in\n  }\n  if (render) {\n    return render(children === undefined ? rest : { ...rest, children }) // inject children back in\n  }\n  if (typeof children !== 'function') {\n    throw new Error(\n      `Must specify either a render prop, a render function as children, or a component prop to ${name}`\n    )\n  }\n  return children(rest)\n}\n","// @flow\nconst defaultIsEqual = (aArray: any[], bArray: any[]) =>\n  aArray === bArray ||\n  (Array.isArray(aArray) &&\n    Array.isArray(bArray) &&\n    aArray.length === bArray.length &&\n    !aArray.some((a, index) => a !== bArray[index]))\n\nexport default defaultIsEqual\n","// @flow\nimport React from 'react'\n\n/**\n * A simple hook to create a constant value that lives for\n * the lifetime of the component.\n *\n * Plagiarized from https://github.com/Andarist/use-constant\n *\n * Do NOT reuse this code unless you know what you're doing.\n * Use Andarist's hook; it's more fault tolerant to things like\n * falsy values.\n *\n * @param {Function} init - A function to generate the value\n */\nexport default function useConstant<T>(init: () => T): T {\n  const ref = React.useRef<?T>()\n  if (!ref.current) {\n    ref.current = init()\n  }\n  return ref.current\n}\n","// @flow\nimport { useMemo } from 'react';\nimport { useForm, useField } from 'react-final-form'\nimport { fieldSubscriptionItems, ARRAY_ERROR } from 'final-form'\nimport type { Mutators } from 'final-form-arrays'\nimport type { FieldValidator, FieldSubscription } from 'final-form'\nimport type { FieldArrayRenderProps, UseFieldArrayConfig } from './types'\nimport defaultIsEqual from './defaultIsEqual'\nimport useConstant from './useConstant'\n\nconst all: FieldSubscription = fieldSubscriptionItems.reduce((result, key) => {\n  result[key] = true\n  return result\n}, {})\n\nconst useFieldArray = (\n  name: string,\n  {\n    subscription = all,\n    defaultValue,\n    initialValue,\n    isEqual = defaultIsEqual,\n    validate: validateProp\n  }: UseFieldArrayConfig = {}\n): FieldArrayRenderProps => {\n  const form = useForm('useFieldArray')\n\n  const formMutators: Mutators = form.mutators\n  const hasMutators = !!(formMutators && formMutators.push && formMutators.pop)\n  if (!hasMutators) {\n    throw new Error(\n      'Array mutators not found. You need to provide the mutators from final-form-arrays to your form'\n    )\n  }\n  const mutators = useMemo<Mutators>(() =>\n    // curry the field name onto all mutator calls\n    Object.keys(formMutators).reduce((result, key) => {\n      result[key] = (...args) => formMutators[key](name, ...args)\n      return result\n    }, {}\n  ), [name, formMutators])\n\n  const validate: FieldValidator = useConstant(\n    () => (value, allValues, meta) => {\n      if (!validateProp) return undefined\n      const error = validateProp(value, allValues, meta)\n      if (!error || Array.isArray(error)) {\n        return error\n      } else {\n        const arrayError = []\n        // gross, but we have to set a string key on the array\n        ;((arrayError: any): Object)[ARRAY_ERROR] = error\n        return arrayError\n      }\n    }\n  )\n\n  const {\n    meta: { length, ...meta },\n    input,\n    ...fieldState\n  } = useField(name, {\n    subscription: { ...subscription, length: true },\n    defaultValue,\n    initialValue,\n    isEqual,\n    validate,\n    format: v => v\n  })\n\n  const forEach = (iterator: (name: string, index: number) => void): void => {\n    // required || for Flow, but results in uncovered line in Jest/Istanbul\n    // istanbul ignore next\n    const len = length || 0\n    for (let i = 0; i < len; i++) {\n      iterator(`${name}[${i}]`, i)\n    }\n  }\n\n  const map = (iterator: (name: string, index: number) => any): any[] => {\n    // required || for Flow, but results in uncovered line in Jest/Istanbul\n    // istanbul ignore next\n    const len = length || 0\n    const results: any[] = []\n    for (let i = 0; i < len; i++) {\n      results.push(iterator(`${name}[${i}]`, i))\n    }\n    return results\n  }\n\n  return {\n    fields: {\n      name,\n      forEach,\n      length: length || 0,\n      map,\n      ...mutators,\n      ...fieldState,\n      value: input.value\n    },\n    meta\n  }\n}\n\nexport default useFieldArray\n","// @flow\nimport { version as ffVersion } from 'final-form'\nimport { version as rffVersion } from 'react-final-form'\nimport type { FieldArrayProps } from './types'\nimport renderComponent from './renderComponent'\nimport useFieldArray from './useFieldArray'\nimport { version } from '../package.json'\n\nexport { version }\n\nconst versions = {\n  'final-form': ffVersion,\n  'react-final-form': rffVersion,\n  'react-final-form-arrays': version\n}\n\nconst FieldArray = ({\n  name,\n  subscription,\n  defaultValue,\n  initialValue,\n  isEqual,\n  validate,\n  ...rest\n}: FieldArrayProps) => {\n  const { fields, meta } = useFieldArray(name, {\n    subscription,\n    defaultValue,\n    initialValue,\n    isEqual,\n    validate\n  })\n\n  return renderComponent(\n    {\n      fields,\n      meta: {\n        ...meta,\n        __versions: versions\n      },\n      ...rest\n    },\n    `FieldArray(${name})`\n  )\n}\n\nexport default FieldArray\n"],"names":["renderComponent","props","name","render","children","component","rest","_excluded","React","createElement","undefined","Error","defaultIsEqual","aArray","bArray","Array","isArray","length","some","a","index","useConstant","init","ref","useRef","current","all","fieldSubscriptionItems","reduce","result","key","useFieldArray","subscription","defaultValue","initialValue","isEqual","validateProp","validate","form","useForm","formMutators","mutators","hasMutators","push","pop","useMemo","Object","keys","args","value","allValues","meta","error","arrayError","ARRAY_ERROR","useField","format","v","input","fieldState","forEach","iterator","len","i","map","results","fields","versions","ffVersion","rffVersion","version","FieldArray","__versions"],"mappings":"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"}